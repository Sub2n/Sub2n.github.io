{"pages":[{"title":"","text":"","link":"/about/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"190314-TIL","text":"Today I Learned JavaScript Methodwindow 객체의 method를 통해 사용자 입력, 화면 제어, 스크롤 제어 등을 하는 방법을 새로 배웠다. 외에도 screen, history, navigator, location 객체의 method를 활용해 사용자 분석을 위한 정보를 parsing하는 걸 프론트엔드에서 할 수 있다는 것을 알았다. Interval &amp; Timer네트워크 프로그래밍 수업 때 잠시 배웠던 Push, Polling 기법과 timeout을 간략하게 들었다. 시간이 날 때 개념을 확실히 하기 위해 노트에 적어두었다. jQueryjQuery의 selector를 이용, 요소의 이벤트를 처리하고 속성값을 이용해 기능을 구현했다. TO DO LIST과제로 TO DO LIST를 만들었다. 느낀 점:할 일을 추가, 수정, 삭제, field를 나눠서 보여주는 것만 하면 되는데도 생각해야할 것들이 많았다. 사용자가 작은 기능이라도 편하게 이용할 수 있도록 프로그래밍하는 것이 하나도 쉬운 게 없다. 💘 My To do list git 주소 To Do List","link":"/2019/03/14/190314-TIL/"},{"title":"190319-TIL","text":"Today I Learned 오늘 한 일 LeetCode Easy 문제 : 🌟 13. Roman to Integer if로 I, X, C일 때 경우를 나누어 풀었다. 시간이 짧게 걸린 알고리즘들은 let, const를 썼는데 나는 아직 var로 선언하는 방법밖에 공부하지 않아 더 공부를 해야겠다. webStorage 공부 localStorage, sessionStorage의 차이와 활용방법에 대해서 배웠다. localStorage.setItem(storage_key, storage_value), localStorage.getItem(storage_key) 를 사용하여 localHost에서 사용자가 입력한 정보를 유지하는 기능을 다수 추가했다. To do List, Signup Page 보완 locaStorage를 이용해 기존에 만들었던 html에 유지기능을 추가했다. Select, Input: radio 등 다양한 input type 학습 단순히 text type의 input뿐만이 아니라 select.val, option.text 등을 다루는 방법을 공부했다. 느낀 점 localStorage를 이용하는 것 뿐인데 해야할 일이 대폭 많아졌다. 꼼꼼하게 정리해놓고 해당 기능을 사용할 때마다 참고해야겠다. Upgrade ver. To do List ▶ 🌟 Upgrade ver. Sign Up Page ▶ 🌟","link":"/2019/03/19/190319-TIL/"},{"title":"190315-TIL","text":"Today I Learned 오늘 한 일 LeetCode Medium 문제를 풀었다. C나 C++이 아니고 익숙하지 않은 JavaScript로 알고리즘 문제를 풀려니 메소드를 하나하나 찾아야해서 시간이 오래 걸렸다. 🐸 2. Add Two Numbers : if문을 잔뜩 사용한 내 코드와 달리 carry를 이용한 솔루션을 보고 알고리즘 공부를 꾸준히 해서 효율성을 높여야겠다는 목표가 생겼다. 적어도 하루에 하나씩은 LeetCode 문제를 풀려고 한다. 오후엔 JavaScript를 이용해 Lotto 추첨기를 만들었다. 느낀 점:사용자의 입력을 받아서 화면에 적절히 출력하는 게 아직 어렵다. 3명이 팀별로 진행하다보니 알고리즘을 짜는 데에도 토의를 하느라 시간이 길어졌다. 협엽과 HTML, CSS, JS를 다루는 법에 조금 더 익숙해져야겠다. 🐸 Lottery Machine git address LOTTERY Machine","link":"/2019/03/15/190315-TIL/"},{"title":"190313-TIL","text":"Today I Learned 오늘부터 하루하루 내가 배우고 공부한 것들을 정리해놓기로 한다. 오전 - 팀 토의일주일이 조금 넘게 웹 기초를 배우며 과제를 진행한 것에 대해서 팀원들과 토의를 나눴다. 나는 Grab 홈페이지에서 설명을 누르면 이미지가 바꾸도록 jQuery를 써보는 과제가 인상 깊었다. Responsible Web 과 SEO 등 집중해서 공부하고 싶은 것들이 생겼다. 오후 - git1. git으로 블로그 만들기 : HEXOLorem ipsum 등 dummy text를 넣어 html 디자인 전 레이아웃을 잡는 방법을 알았다. github에서 제공하는 github.io Blog를 만들었다. Hexo를 설치하고 포스팅하는 방법을 알았다. : hexo new post, hexo generate, _config.yml을 수정한 후 hexo deploy : deployment - the use of something or someone in an effective way 2. git branch &amp; checkout &amp; merge 협업을 위해 중요한 git의 branch와 commit 개념을 배웠다. 익숙해지면 버전관리와 개발에 많은 도움이 될 것 같다. 난 Markdown Emoji가 좋다 🐷Markdown Emoji","link":"/2019/03/13/190313-TIL/"},{"title":"190318-TIL","text":"Today I Learned 오전 LeetCode Easy 문제 : 🌈 9. Palindrome Number 이번 문제는 비교적 쉽게 풀렸다. 주말에 Reverse Integer와 Reverse Bit 문제를 풀었을 때 썼던 알고리즘을 응용하니 문제가 풀렸다. CSS로 3가지 형태의 메뉴 만들기 BootStrap을 이용하지 않고 CSS와 jQuery를 이용해서 다운드롭, 햄버거 메뉴를 만들었다. jQueryUI의 slide()를 이용해서 왼 쪽에서 나오는 햄버거 메뉴를, CSS의 hover를 이용해 전체 드롭다운 메뉴와 특정 메뉴의 하단메뉴만 드롭다운으로 보여주는 메뉴를 만들었다. 오후 다음 우편번호 서비스를 이용해 회원가입 홈페이지 만들기 다음 우편번호 API를 이용해 우편번호를 찾고, 사용자 입력을 받아 정규표현식으로 Validation 하는 것까지 진행했다. 느낀 점 JavaScript로 처음 알고리즘 문제를 풀 때는 한 줄 치기도 어려웠는데 며칠 문제를 풀다보니까 조금씩 익숙해지는 것 같다. HTML 레이아웃을 짤 때 &lt;div&gt;에 의존하지 않고 &lt;ul&gt;과 &lt;li&gt; 태그를 자주 이용해야겠다는 생각을 했다. 매번 잊어버리므로 유념하자. 🌈 Simple Sign Up Page git address ▶ [Simple Sign Up Page] ◀","link":"/2019/03/18/190318-TIL/"},{"title":"190317-TIL","text":"Today I Learned어제는 처음으로 토익을 보러 갔다. 피곤해서 컴퓨터를 켜지도 못했지만 앞으로 알고리즘 문제를 하나라도 풀어야겠다. 오전 LeetCode Easy 문제: 7. Reverse Integer 와 관련문제 190. Reverse Bits를 풀었다. 오후 Hexo blog의 이름을 바꾸고 전부터 적용하고 싶었던 Hexo Clexy 테마를 적용했다. 처음에는 어떻게 해야할 지 몰랐지만 Clexy github description을 보며 따라하니 어떻게 적용이 됐다.내 마음대로 디자인을 바꾸려면 공부를 더 해야겠다. 카테고리를 나눠서 알고리즘 풀이, HTML/CSS와 javaScript 등 공부한 내용을 정리해서 올리고 싶어서 카테고리를 추가하는 방법을 찾아봤는데 잘 알 수 없었다. 강사님께 물어봐야겠다.","link":"/2019/03/17/190317-TIL/"},{"title":"190320-TIL","text":"Today I Learned 오늘 한 일 HTML, CSS, JS의 전체적인 개념을 복습했다. git 으로 협업하기를 배웠다. git flow를 이용해 branch를 만들고 작업, merge를 쉽게 하는 방법에 대해서도 공부했다. Fork &amp; Merge를 이용해서 여러명과 협업하고 repo에 contribute하는 방법을 새로 알았다. 느낀 점 몸이 안 좋아 알고리즘 문제 하나를 다 풀지 못했다. 하루종일 집중력 저하로 충전의 필요성을 느꼈다. git은 여러명과 프로젝트를 진행하며 불편했던 점들을 한 번에 해소해주는 느낌이었다. 더이상 카카오톡이나 텍스트파일로 코드를 주고받고 일일히 합치지 않아도 된다는 점이 굉장히 매력적으로 다가왔다. 자주 이용해 손에 익도록 만들어야겠다.","link":"/2019/03/20/190320-TIL/"},{"title":"190321-TIL","text":"Today I Learned 오늘 한 일 Naver Maps API를 이용한 맛집 리뷰 어플리케이션 : Naver가 제공하는 Naver Maps API를 이용해 웹에 지도를 띄우고, 다음 우편번호 서비스로 주소를 입력받아 해당 주소의 좌표에 마커를 찍는다. : 마커를 클릭했을 때 리뷰가 없다면 리뷰를 등록하고, 이미 리뷰가 등록됐다면 등록된 리뷰를 infoWindow로 보여준다. : 어려웠던 점! for문 내에서 marker객체와 infoWindow 객체를 각각 만들어 addEvent를 해주면 scope 문제로 마지막 이벤트 리스너만 살아남게 된다. 정확한 내용은 공부를 더 해야 알겠지만 우선 forEach문으로 해결했다. 참고한 페이지에서는 let으로 선언(block-scoping)해도 된다고 한다. 어제 배운 git fork &amp; merge를 이용해 팀원들과 협업을 했다. 패스트캠퍼스 수료생 선배들과 티타임을 가지며 개발자가 되기 위한 과정에 대해서 들었다. 꾸준히 열심히 하고 모르는 것을 넘어가지 않는 게 중요한 것 같다. 맛집 리뷰페이지 ▶ 🍩 Yummy 🍩","link":"/2019/03/21/190321-TIL/"},{"title":"190322~24 TIL","text":"Today I Learned 배운 것 LeetCode 14. Longest Common Prefix를 풀었다. : 쉬운 문제를 이틀에 걸쳐 풀었는데, javaScript에 String method 중 유용한 indexOf()라는 method가 있다는 것을 알았다. C++에서부터 나는 문자열을 다루는 데에 익숙하지 않다. var의 scope와 javaScript의 Hoisting에 대해 배웠다. var, let, const: var는 function-scoped고, let이나 const는 block-scoped이다. : let은 재할당이 가능, 선언한 이후에 할당할 수 있는 반면 const는 선언과 동시에 값을 할당하여야 하고 그 값을 변경시킬 수 없다. (C처럼) Hoisting: hoisting은 끌어올린다는 뜻이다. 자바스크립트에서는 변수가 끌어올려진다. 이 때, 변수의 선언은 hoist되지만 할당부(값)는 hoist되지 않는다. 즉 함수의 선언은 hoist되지만 변수의 값으로 선언한 함수는 hoist되지 않는다. 그래서 for문에서 var i =0으로 선언한 후 함수 종료 후에 i를 부르면 정의되지 않았다고 뜬다. 그러나 var i가 아니라 그냥 i=0 로 선언하면 i가 hoisting되어 global variable이 된다. 느낀 점scope와 hoisting 등 javaScript를 공부하니 그동안 아무 것도 모르는 상태에서 이것저것 만들어 보면서, 이해되지 않던 오류들이 조금씩 이해되기 시작했다. 어쩌다보니 LeetCode 알고리즘을 스터디로 함께 풀게 됐다. 어려명과 함께 공부하는 건 처음이지만 배울 점이 많을 거라고 생각한다. indexOf() 등 여러 javaScript String 관련 method를 접할 때마다 정리하고 활용할 수 있도록 해야겠다.","link":"/2019/03/24/190322-24-TIL/"},{"title":"190325-TIL","text":"Today I Learned 웹 애플리케이션 프로젝트오늘부터 5일간 팀원들과 함께 프로젝트를 진행한다. 간단한 프론트 기초 지식만 배운 상태에서 완벽한 애플리케이션을 만들기에는 부족함이 있지만 오늘 기획단계를 끝냈다.백엔드가 없어 데이터를 localStorage에 저장하고 불러올 예정이다. 회원가입과 로그인 기능도 뺐다. 디자인을 위해 전공 소프트웨어 공학 수업시간에 배운 Use Case Diagram, step-by-step Description, Communication Diagram을 작성해 기능들을 나눴다. 우리는 식단, 운동을 제공하고 사용자가 날짜별로 건강관리를 기록할 수 있는 프로그램을 만들 예정이다. 나는 운동 부위(상체, 복근, 하체, 전신)와 운동 종류(근력, 유산소, 스트레칭)에 따른 Youtube 운동 영상을 미리 수집해 분류한 후 사용자의 Option 선택에 따라 운동 영상을 제시하는 기능을 맡았다. 사용자는 또한 운동 기록을 저장하고 관리할 수 있다. 오늘은 전체적인 프로그램 디자인과 html 레이아웃을 마쳤다. Youtube API를 잠깐 써봤는데 생각보다 어렵지 않을 것 같다.","link":"/2019/03/25/190325-TIL/"},{"title":"190328-TIL","text":"Today I Learned 오늘 배운 것 프로젝트의 모든 정보를 localStorage에 load하고 save하는 기능을 끝냈다. 점점 객체와 배열을 다루는 방법이 익숙해진다. 어렵던 select의 option value와 option:selected).text도 잘 알았다. 디자인을 수정하고 메인 페이지를 full video background로 설정했다. 알고리즘 스터디에서 Array.reduce와 eval method를 새로 알았다. 주말에 더 공부 해야겠다. LeetCode 중 Medium 3. Longest Substring Without Repeating Characters 문제를 풀었다. 오랜만에 새로운 알고리즘 문제를 푸니 재미있었다. LeetCode에 console.log를 찍어 stdout을 확인할 수 있다는 것을 처음 알았다. 앞으로 자주 사용해야겠다. 프로젝트가 마무리되며 볼만해진다. 공공 데이터 포탈에서 제공하는 미세먼지 API를 사용해 메인 페이지에 마스크 사용여부를 알려주고 싶었는데 낮에 신청한 직후에는 잘 안 됐다. 그런데 밤에 해보니까 결과가 나와서 내일 다시 시도해볼 예정이다.","link":"/2019/03/28/190328-TIL/"},{"title":"190327-TIL","text":"Today I Learned 오늘 한 일프로젝트 clickSaveButton() -&gt; saveHealth() : 운동 영상의 상세 페이지에서 운동 기록 저장 버튼을 클릭시 해당 운동의 이름이 localStorage에 저장된다. showDiary() : 운동 기록을 저장한 후 반영된 페이지로 이동한다. clickMyHealthButton() -&gt; showMyHealthPop() : 나의 운동 버튼 클릭시 사용자 정의 운동을 입력하고 저장할 수 있는 페이지를 팝업으로 띄운다. clickSaveButton() -&gt; showSavedPage() : 팝업 창에서 운동 이름, youtube 주소, 운동 부위와 종류를 입력하면 기록이 localStorage에 저장된다. 외에도 알고리즘 스터디를 했다. 나는 5개 정도 문제를 미리 풀어놔서 복습하는 개념으로, 다른 사람들의 풀이에서 많은 걸 배우고 있다. 배운 것 ! 어떤 element를 클릭하고 새로 뜬 창에서 어떤 버튼을 눌렀을 때 맨 처음 element 값 전달하고 싶을 때는 button의 attr에 data-key 같은 식으로 정보를 전달해준다. 1234567891011121314151617181920212223242526 $('div.workout').click(function(){ //showWorkoutDetail var key = this.id; var workout = workouts[key]; var id = workout['YT_id']; $('#saveHealthButton').attr('data-key',key); $('#popModal').modal('show'); $('#popTitle').text(workout['name']); console.log(id); player = new YT.Player('player', { height: '300', width: '450', videoId: id, events: { 'onReady': onPlayerReady, 'onStateChange': onPlayerStateChange } }); }); $('#saveHealthButton').click(function(){ console.log($(this).attr('data-key'));//잘 뜸!! saveWorkout(); }); ! 외부 API를 사용하는 것은 어렵다. 조금만 수정하려고 해도 내 마음처럼 되지 않는다. 경험을 늘려야겠다. 운동 영상 썸네일 클릭시 Modal을 띄워 해당 운동 영상을 보여주려고 했는데, iframe을 사용하지 않고 new YT_player로 player를 만드는 API를 사용했더니 맨 처음 생성된 player만 뜨는 문제가 있었다. 구글 검색으로 해결했다! Modal show event마다 내가 원하는 youtube 보여주기!! How to embed YouTube video in Bootstrap modalAnswer: Insert YouTube Code inside Modal Bodyhttps://www.tutorialrepublic.com/faq/how-to-embed-youtube-video-inside-bootstrap-modal.php ! javaScript에서는 Array.length, String.length로 둘 다 뒤에 ()를 붙이지 않는다. java와 헷갈리지 말자. 느낀 점 프로젝트 기획 때 Use Case와 Communication을 잘 정리하고 나니 그 때 명세한 기능을 구현하기만 돼서 편하다. 순서대로 구현을 하니 딱히 커다란 문제가 생기지 않았다. 소프트웨어 공학 시간에도 그렇지만 다시 한 번 디자인이 중요하다고 느꼈다.","link":"/2019/03/27/190327-TIL/"},{"title":"190326-TIL","text":"Today I Learned 프로젝트 진행 중! 무식하면 몸이 고생한다를 뼈저리게 느끼고 있다. 백엔드가 없고 DB를 관리할 수가 없어서 리소스와 데이터를 수동으로 정리해 폴더에 넣는 작업을 했다. Dictionary가 익숙해질수록 편하게 쓰고 있다. 오늘 한 일 운동 부위, 종류에 따른 youtube 동영상 주소(고유주소ID, 썸네일, 이름) 모으고 각 selector로 사용할 id 부여 (upper_weight_1 등): Load할 때마다 workouts 먼저 그려놓고 숨겨놓음 selectBodyPart() -&gt; showHealthList() : Health Option select 조건에 따라 분류해놓은 운동 영상을 보이게 한다. selectHealthType() -&gt; showHealthList() : Health Option select 조건에 따라 분류해놓은 운동 영상을 보이게 한다. clickHealth() -&gt; showHealthDetail(id) : div에 배치된 운동 영상 클릭시 해당 영상의 상세 페이지를 팝업으로 띄운다. 배운 것 Dictionary key값이 string일 때는 Dict[‘key’] 잊지 말기!!!! 계속 ‘’ 를 잊어버린다. var today = new Date().toISOString().slice(2, 10); 날짜를 19-03-26 형식으로 만들어준다!!!!","link":"/2019/03/26/190326-TIL/"},{"title":"190329-TIL","text":"Today I Learned 오늘 한 일 jQeury 플러그인을 통해 Diary 화면의 배경에 ripples 효과를 줬다. 50px정도 여백에 효과가 적용되지 않는 문제가 있어 body background에 효과를 주는 것으로 해결했다. 알고리즘 스터디에서 Longest Common Prefix 문제를 다시 한 번 훑어보았다. 프로젝트 페이지의 폰트와 버튼 hover event 등을 추가하고 마무리했다. 느낀 점 프로젝트를 하며 겪었던 자잘한 문제들과 해결방법을 정리해두어야겠다. 첫 팀 프로젝트는 생각보다 재미있었다. 해결하지 못할 문제는 없다는 것을 다시 한 번 알았다. ✨ My Health Diary ✨","link":"/2019/03/29/190329-TIL/"},{"title":"190330~31 TIL","text":"Today I Learned 토요일에 특강을 들었다. 실제로 현업에서 개발을 어떻게 하는지, 개발 방법에는 Waterfall보다 Agile를 많이 쓰는 추세라는 것을 알았다.","link":"/2019/04/01/190330-31-TIL/"},{"title":"190403-TIL","text":"Today I Learned 오늘 한 일 &amp; 느낀 점 🍀 LINEplus 홈페이지를 Markup해보는 시간을 가졌다. 홈페이지를 선형화하고, semantic하게 요소를 정하고 class 이름을 짓는 것만 해도 머리가 아팠다. data를 다루는 function들은 그 관계를 정의하고 흐름을 파악하기가 쉬운데, Markup은 당장 이런 요소를 쓰면 되겠다고 생각을 해도 아직은 머릿속에 바로 그려지지가 않는다. 🍀 3월에 일주일간 진행했던 프로젝트 발표 시간을 가졌다. 다들 열심이 만들어서 동기부여가 됐다. 🍀 오전에 flex에 대해서 공부했다. 과제를 하느라 배운 걸 다 정리하지 못해서 내일 아침에 마저 정리할 예정이다. 🐾 My linepluscorp markup page 🐾","link":"/2019/04/03/190403-TIL/"},{"title":"190401 TIL","text":"Today I Learned 오늘 배운 것 오늘부터 4주간 HTML/CSS를 새로 배운다. 첫 수업이었는데 많은 것을 새롭게 알았다. 웹 접근성과 웹 표준이 무엇이며 얼마나 중요한지, 개발자에 자세에 대해서 배웠다. HTML5의 역사와 특징에 대해 다시 한 번 배웠다. Web page 제작을 위한 단계를 배웠다. 선형화(layout) 단계 : design이 아닌 논리적 구조를 linearize Semantic Element : &lt;div&gt;만 사용하는 것이 아니라 &lt;header&gt;, &lt;footer&gt;, &lt;article&gt; 등 사용 Naming : element naming and grouping 편리한 Emmet Cheatsheet를 알았다. 진짜 편하다! CSS Box Model : content-box(defualt)와 border-box의 차이점을 알았다. flex를 이용해서 layout을 잡는 것과, 호환되지 않을 때를 대비하여 float를 이용하는 방법을 여러 case를 통해서 배웠다. Margin collapsing, clear: both 등 float CSS trick들을 배웠다. 느낀 점 지난 한달 간 나에게 가장 어려운 건 javascript보다는 HTML/CSS로 layout을 잡는 것이었는데, 내 생각대로 요소들이 배치되지 않았기 때문이다. 수업에서 CSS의 여러 속성들과 기능을 배우면서 왜 그렇게 되지 않았는지 알게 되었다. flex와 float는 확실히 공부하고 넘어가야겠다.","link":"/2019/04/01/190401-TIL/"},{"title":"190402-TIL","text":"Today I Learned 오늘 한 일 CSS의 기초 문법, 상속과 겹침 그리고 우선순위에 대해 배웠다. 상속(Inheritance): 부모에게 적용한 style이 자식에게 적용되는 것: 영역에 관한 속성이 아닌 꾸미기 속성 등이 상속된다. 겹침(Cascading): 하나의 element에 여러 style이 겹쳐질 수 있다.: 우선순위가 같을 경우 가장 밑의 style이 적용된다. 우선순위: 각각 selector마다 가진 우선순위가 다름 정적블로그 특강 : jekyll을 이용해 블로그 만들기: 나는 지금 hexo를 이용해서 블로깅을 하고 있는데 jekyll에 대해서도 배웠다. 느낀 점 의미있는 태그. Semantic Markup이 중요함을 점점 더 느낀다. Web Accessibility를 고려하면 간단한 화면 배치도 간단하지 않다. Markup은 공부할수록 깊이있는 언어같다. 객체지향언어에서 class를 의미있고 효율적으로 짜는 데에도 관심이 많았기 때문에 이 부분을 잘 살려서 코딩을 하고 싶다. hexo를 계속 이용하기로 했다. 익숙하기도 하고, 나중에 내가 테마를 조금씩 수정하거나 만들고 싶다.","link":"/2019/04/02/190402-TIL/"},{"title":"190404-TIL","text":"Today I Learned 오늘 한 일 주요 메뉴인 &lt;nav&gt;요소의 main menu를 마크업하고 CSS 디자인을 했다. 웹 접근성을 고려해서 submenu를 따로 ul로 분리하지 않고 menu-item인 li 안에 넣는 게 어려웠는데, 해결을 했다. HTML5의 flex model을 공부했다. container와 item에 따로 주던 flex 속성 값들이 이해되지 않았는데 flex-direction과 justify-content, align-item과 align-content가 어떻게 다른지 정리했다. 어제 만들었던 LINEplus 홈페이지를 조금 수정했다. 접근성을 높이기 위해서 몇 몇 요소의 위치를 바꾸고, CSS로 배치를 했다. ▶ &lt;option&gt; 안에는 &lt;a&gt;가 올 수 없다! Interactive요소 안에는 interactive 요소가 올 수 없다. a 안에 button 등 ▶ W3 문서를 확인해보니 &lt;h&gt;안에 &lt;a&gt;가 오는 게 아니고 그 반대가 맞는 것 같다. CSS Animation에 대해서 배웠다. timing-function을 이용한 animation이 흥미로웠다. 이번 주말에 나도 한 번 만들어보고 싶다. ▶ 참고 링크 : steps를 이용한 애니메이션 느낀 점 HTML/CSS 수업을 3일 들었는데 지난 한 달간 궁금하던 점이 많이 해결되었다. 웹 표준을 준수하고 접근성을 높이기 위해서 고려해야할 게 한두가지가 아니다. 처음 배우는 HTML을 기초부터 제대로 하는 것 같아 좋다. 시간이 빠르게 가는 것 같아 아깝다. 요즘은 하루하루가 바쁜만큼 더 많이 알고 싶다는 욕심이 생긴다. 🐸 Modified Lineplus site 🐸","link":"/2019/04/04/190404-TIL/"},{"title":"190405-TIL","text":"Today I Learned 오늘 한 일 로그인 메뉴를 구성하는 form tag와 input의 여러 속성에 대해서 배웠다. fieldset에 대해 처음 알았다. 접근성을 위해 label 과 input 을 bind 해야한다는 것을 알았다. box-shadow, section에 heading하는 법을 알았다. 느낀 점 오늘은 실습 위주의 수업이라 재미있었다. 하루종일 너무 많은 정보를 들어서 어지러운데 다 내 걸로 만들어야겠다!","link":"/2019/04/05/190405-TIL/"},{"title":"190406~07-TIL","text":"Today I Learned 오늘 한 일 음수마진에 대해서 배웠다. CSS grid framework에 대해서 배웠다.","link":"/2019/04/08/190406-07-TIL/"},{"title":"190409-TIL","text":"Today I Learned 오늘 배운 것 tab menu 마크업 했다. float, absolute, flex를 이용해서 여러가지로 마크업할 수 있다는 것을 알았다. jQuery로 메뉴의 mouseover, focusin 등 event를 입혔다.","link":"/2019/04/09/190409-TIL/"},{"title":"190408-TIL","text":"Today I Learned 오늘 한 일 ⭐️ &lt;dl&gt; tag에 대해서 배웠다. &lt;dl&gt; : Defines a definition list. &lt;dt&gt; : Defines a term/name in a description list. &lt;dd&gt; : Is used to describe a term/name in a description list. Ø 원래 &lt;dt&gt;와&lt;dd&gt; 를 &lt;div&gt;로 묶으면 안 됐었는데 허용됨 : 다만 맞는 &lt;dt&gt;를 설명하는 모든 &lt;dd&gt; 함께 묶어야 함. ⭐️ Web Cafe 예제 중 배너와 검색영역을 Markup, 디자인 설계 했다. &gt; 웹 관련 용어 배너 디자인 : float 사용 &gt; Logical order and Markup design ⭐️ LINEcorp 페이지 Markup을 처음부터 다시 했다. 디자인 관점이 아닌 컨텐츠 관점으로 논리적인 Markup 순서를 정하고 html과 CSS를 작성했다. 느낀 점 경험이 부족해서인지 아직 content에 맞게 semantic한 tag를 생각해내는 게 어렵다. 👼 More Semantic LINEpluscorp","link":"/2019/04/08/190408-TIL/"},{"title":"190410-TIL","text":"Today I Learned오늘 한 일 🌷 LINEpluscorp 마크업을 다시 한 html에 header CSS 를 입혔다. 언어선택창에 Tab, Click event를 적용했다. 1234567891011&lt;div class=\"language\"&gt; &lt;button class=\"btn-language\"&gt;한국어&lt;/button&gt; &lt;ul class=\"language-list\"&gt; &lt;li class=\"language-item\" tabindex=\"0\"&gt;&lt;a href=\"#\" tabindex=\"-1\"&gt;English&lt;/a&gt;&lt;/li&gt; &lt;li class=\"language-item\" tabindex=\"0\"&gt;&lt;a href=\"#\" tabindex=\"-1\"&gt;日本語&lt;/a&gt;&lt;/li&gt; &lt;li class=\"language-item\" tabindex=\"0\"&gt;&lt;a href=\"#\" tabindex=\"-1\"&gt;한국어&lt;/a&gt;&lt;/li&gt; &lt;li class=\"language-item\" tabindex=\"0\"&gt;&lt;a href=\"#\" tabindex=\"-1\"&gt;中文(繁體)&lt;/a&gt;&lt;/li&gt; &lt;li class=\"language-item\" tabindex=\"0\"&gt;&lt;a href=\"#\" tabindex=\"-1\"&gt;中文(简体)&lt;/a&gt;&lt;/li&gt; &lt;li class=\"language-item\" tabindex=\"0\"&gt;&lt;a href=\"#\" tabindex=\"-1\"&gt;ภาษาไทย&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 12345678910111213141516171819202122232425262728293031var buttonLang = $('.btn-language');var listLang = $('.language-list'); // language button click eventbuttonLang.on('click keyup', function(e){ if(e.keyCode === 9){ listLang.parent().addClass('language-act'); } else{ // tab 아니고 click 됐을 떄 listLang.parent().toggleClass('language-act'); }});// event capturing &amp; bubbling// div.language 외의 영역 click시 닫기document.addEventListener(\"click\", function(e) { console.log(e); if (!e.path.includes(document.querySelector(\".language\"))) { listLang.parent().removeClass('language-act'); }});// div.language 외의 영역에 tab key 눌리면 닫기document.addEventListener(\"keyup\", function(e){ if(e.keyCode === 9){ if (!e.path.includes(document.querySelector(\".language\"))) { listLang.parent().removeClass('language-act'); } }}); Header에 mouseenter, mouseleave event를 적용했다.: flex를 쓰지 않고 해보고 싶었는데 결국 flex를 적용한 채 오늘은 마무리했다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;nav class=\"navigation\"&gt; &lt;ul class=\"menu\"&gt; &lt;li class=\"menu-item menu-item1 menu-act\"&gt; &lt;a href=\"#\"&gt;회사소개&lt;/a&gt; &lt;ul class=\"sub-menu submenu1\"&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;회사소개&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt; &lt;a href=\"#\"&gt;LINE's Mission&lt;/a&gt; &lt;ul class=\"mission-menu\"&gt; &lt;li class=\"mission-menu-item\"&gt;&lt;a href=\"#\"&gt;MISSION&lt;/a&gt;&lt;/li&gt; &lt;li class=\"mission-menu-item\"&gt;&lt;a href=\"#\"&gt;LINE STYLE&lt;/a&gt;&lt;/li&gt; &lt;li class=\"mission-menu-item\"&gt;&lt;a href=\"#\"&gt;LINE CODE&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;LINE그룹 행동 규범&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;LINE 로고 사용 가이드&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"menu-item\"&gt; &lt;a href=\"#\"&gt;사업&lt;/a&gt; &lt;ul class=\"sub-menu submenu2\"&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;서비스&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;서비스사업&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"menu-item\"&gt; &lt;a href=\"#\"&gt;홍보&lt;/a&gt; &lt;ul class=\"sub-menu submenu3\"&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;Global News&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;기사 및 보도자료&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;Blog &amp; SNS&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"menu-item\"&gt; &lt;a href=\"#\"&gt;채용&lt;/a&gt; &lt;ul class=\"sub-menu submenu4\"&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;일과 사람&lt;/a&gt;&lt;/li&gt; &lt;li class=\"sub-menu-item\"&gt;&lt;a href=\"#\"&gt;채용공고&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=\"sitemap\"&gt; &lt;a href=\"#\"&gt;SITEMAP&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; 12345678910var menuItem = $('.menu-item');menuItem.on('mouseenter', function(){ menuItem.removeClass('menu-act'); $(this).addClass('menu-act');});menuItem.on('mouseleave', function(){ $(this).removeClass('menu-act');}); 새로 배운 것 Event Capturing과 Bubbling으로 문제를 해결했다. 원리는 꼭 정리해놔야겠다! 한 기능을 구현하면 다른 기능이 문제가 생긴다. 아직 HTML과 CSS에 대한 이해가 부족한 것 같다. 🌷 More semantic LINE git","link":"/2019/04/10/190410-TIL/"},{"title":"190411-TIL","text":"Today I Learned오늘 한 일 Web Cafe의 새소식 영역을 &lt;section&gt;과 &lt;article&gt;을 이용해 Markup 했다. [Web Cafe 새소식 영역] [Markup Design] 123456789101112131415161718&lt;!-- news section HTML Code --&gt;&lt;section class=\"news\"&gt; &lt;h2 class=\"news-heading\"&gt;새소식&lt;/h2&gt; &lt;article class=\"news-item\"&gt; &lt;a href=\"#\"&gt; &lt;h3 class=\"news-item-subject\"&gt;W3C 사이트가 리뉴얼 되었습니다.&lt;/h3&gt; &lt;time class=\"news-item-date\" datetime=\"2019-04-11T11:19:37\"&gt;2019.04.11&lt;/time&gt; &lt;p class=\"news-item-brief\"&gt; 디자인 및 다양한 view 환경을 고려하여 구성되어 있으며, 기존보다 최신 정보 및 개발자를 위한 기술 가이드도 찾기 쉽도록 구성되어 있습니다. &lt;/p&gt; &lt;figure class=\"news-item-thumbnail\"&gt; &lt;img src=\"images/news.gif\" alt=\"\"&gt; &lt;figcaption&gt;W3C 리뉴얼&lt;/figcaption&gt; &lt;/figure&gt; &lt;/a&gt; &lt;/article&gt; &lt;a href=\"#\" class=\"news-more icon-plus\" target=\"_blank\"&gt;더보기&lt;/a&gt;&lt;/section&gt; : 처음으로 &lt;article&gt;과 &lt;figure&gt; tag를 써봤다. &lt;section&gt; 내에 &lt;article&gt;을 nesting하는 것은 신문의 스포츠 섹션에 단일 기사를 싣는 것과 같다는 글을 읽어 이해가 쉬웠다. Semantic HTML을 접하고 처음 &lt;div&gt; 범벅이던 코드를 만났을 때보다 훨씬 이해가 쉽고 직관적으로 구조를 짤 수 있게 된 기분이 든다. HTML5부터 inline인 &lt;a&gt; 안에 block 요소등을 넣을 수 있게 됐다. 그러나 focus를 받을 때 다음과 같은 문제가 생길 수 있다. ‘2019.04.11’이 inline인 time tag라서 그 부분이 들어간 모습 이는 &lt;a&gt;의 display를 block으로 바꿔주면 해결할 수 있다. Image Replacing and Sprite 웹 기초 수업 때 instagram 등 Social Media의 로고로 실습을 했던 Image Sprite 기법을 다시 한 번 적용해 Web Cafe 예제를 진행했다. [신규 이벤트 &amp; 관련 사이트 영역] [신규 이벤트 &amp; 관련 사이트 Design] Image Replacement: image가 들어갈 영역의 크기를 지정해놓고, 해당 높이나 너비만큼 padding을 주고 overflow: hidden 처리를 한 후 image를 sprite로 처리한다. Image Sprite: server가 제공하는 image 최소화하기위해 한 image만 준비하고 background 위치 조정해서 보여주는 것 : 단점으로 &lt;button&gt;에 focus시 outline이 안 보이는 문제가 있었는데, ARIA를 사용해 role을 주고 button의 textnode를 삭제해 해결했다. 123456789101112131415161718.btn-event{ position: absolute; top: 0; right: 0; height: 18px; padding: 2px;}.btn-event-prev, .btn-event-next { width: 19px; height: 18px; padding: 0; border: none; background-image: url(images/back_forward.png); background-position: 0 0;}.btn-event-next{ background-position: 100% 0;} 하루를 마무리 하며오늘 Semantic HTML과 tag의 효율성 등을 알아보다가 좋은 사이트를 알게 되었다. 많은 도움이 될 것으로 보여 기분이 좋다. 밑에 첨부한다. HEXO 테마를 바꾸고 싶은데 마땅히 마음에 드는 게 없어 만들어볼까 생각중이다. 이번 주말을 활용해 알아봐야겠다. 😊 INTERNETING IS HARD 😊","link":"/2019/04/11/190411-TIL/"},{"title":"190412-TIL","text":"Today I Learned오늘 한 일 계속 헷갈렸던 (그리고 어려웠던) CSS의 Transition(전이)과 Transform(변형)을 배웠다. CSS Animation은 정말 재밌다! mouseover와 mouseenter의 차이를 다시 한 번 복습했다. HEXO 테마를 바꿨다. 이제 정말 마지막이다!","link":"/2019/04/12/190412-TIL/"},{"title":"190413~14-TIL","text":"Today I Learned오늘 한 일 4월 1일부터 2주간 김데레사 강사님의 HTML/CSS 수업을 들은 내용을 Github Repository에 Markdown file로 정리해 올렸다. 꼬박 네 시간은 더 걸렸다. Markdown 작성법은 익숙해진 것 같다. Google Analytics를 블로그에 연결했다. 참고하려고 주소만 첨부해놓고 정리하지 않은 Referance 페이지가 정말 많다! 틈틈히 공부하고 정리해야겠다. 😅 💞 GO to my Markup Summary Repo 💞","link":"/2019/04/14/190413-14-TIL/"},{"title":"190415-TIL","text":"Today I Learned 오늘은 드디어 Web Cafe 예제를 끝마치고, 반응형 웹에 대해서 배웠다. 매번 아리송하던 Grid에 대해서 알고나니 속이 시원했다. 강력한 Layout 기능인데 우리나라에선 IE 점유율이 높아 잘 사용되지 않는다고 한다. 제대로 써보고 싶은데 아쉽다. Image, Video, iframe 등을 flexible하게 처리하는 방법을 배웠다. LeetCode Easy 26번 문제를 풀었다. 영어로 된 문제다보니까 문제를 제대로 파악을 하지 못해 매번 헛수고를 한다.","link":"/2019/04/15/190415-TIL/"},{"title":"190416-TIL","text":"Today I Learned오늘 한 일 LeetCode 27번 Remove Element 문제를 풀었다. 혼자 생각하며 알고리즘을 푸는 것은 어렵지 않은데, 다른 사람에게 논리적으로 설명하려고 하면 말문이 막힌다. 내가 알고 있는 것을 논리적으로 잘 전달하는 연습을 해야겠다. HTML/CSS 마지막 수업으로 반응형 이미지, 배경 이미지 처리, Grid를 이용한 Mobile, DeskTop layout 등을 실습했다. 4월 15일부터 16일까지 이틀간 진행한 내용 또한 Markup Summary에 올릴 예정이다. 느낀 점 김데레사 강사님과 2주 간의 수업을 마쳤다. 짧은 시간 동안 정말 많은 것을 배웠다. 도저히 무슨 의미와 성질을 가지는지 몰랐던 HTML과 CSS에 대해 이해할 수 있게 되었다. 무엇보다 접근성을 고려한 웹 개발을 지향하게 되었다는 점이 가장 뜻깊다. 🌟 FDS12th HTML/CSS Summary 🌟","link":"/2019/04/16/190416-TIL/"},{"title":"190417-TIL","text":"Today I Learned오늘 한 일오전 알고리즘 스터디에서 LeetCode 말고 다른 알고리즘 풀이 사이트를 이용하자는 의견이 나와 오늘부터 CodeWars에서 문제를 풀어보기로 했다. 6급 문제를 풀었는데 생각보다 쉬워서 LeetCode 문제를 하나 더 풀었다. 오후 컴퓨터공학 기초 수업을 8일간 듣는다. 자료구조, 알고리즘과 Python을 배운다고 한다. 오늘은 Memory와 Number type, Binary 연산을 공부했다. 학교 전공 수업을 다시 복습해야겠다. position: sticky는 top, left, right 중 값 한가지를 넣어야 동작한다!!!","link":"/2019/04/17/190417-TIL/"},{"title":"190418-TIL","text":"","link":"/2019/04/18/190418-TIL/"},{"title":"CodeWars 6kyu. Multiples of 3 or 5","text":"CodeWars 6kyu. Multiples of 3 or 5 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Note: If the number is a multiple of both 3 and 5, only count it once. Courtesy of ProjectEuler.net 요구조건어떤 자연수 number 미만의 3 또는 5의 배수를 찾는 문제 해결책 input number가 3 또는 5로 나누어 떨어지면 sum에 더하는 방식이다. 문제가 너무 간단하게 풀려서 새로운 방법으로 생각 해보기로 했다. number를 3, 5로 나누면 그 몫의 개수만큼만 for loop을 돌며 추가한다. 5로 나눈 몫이 항상 3으로 나눈 몫보다 작기 때문에 한 번 더 검사를 해주었다. javaScript Solution 1123456789function solution(number){ var sum = 0; for (var i = 0; i &lt; number; i++) { if (i % 3 === 0 || i % 5 === 0) { sum += i; } } return sum;} javaScript Solution 212345678910function solution(number){ var sum = 0; var threeMultiples = number/3; var fiveMultiples = number/5; for(var i=1; i&lt; threeMultiples; i++){ if(i%5 != 0) sum += i*3; if(i &lt; fiveMultiples) sum += i*5; } return sum;}","link":"/2019/04/17/CodeWars-6kyu-Multiples-of-3-or-5/"},{"title":"CodeWars 6kyu. Dubstep","text":"CodeWars 6kyu. Dubstep Polycarpus works as a DJ in the best Berland nightclub, and he often uses dubstep music in his performance. Recently, he has decided to take a couple of old songs and make dubstep remixes from them. Let’s assume that a song consists of some number of words (that don’t contain WUB). To make the dubstep remix of this song, Polycarpus inserts a certain number of words “WUB” before the first word of the song (the number may be zero), after the last word (the number may be zero), and between words (at least one between any pair of neighbouring words), and then the boy glues together all the words, including “WUB”, in one string and plays the song at the club. For example, a song with words “I AM X” can transform into a dubstep remix as “WUBWUBIWUBAMWUBWUBX” and cannot transform into “WUBWUBIAMWUBX”. Recently, Jonny has heard Polycarpus’s new dubstep track, but since he isn’t into modern music, he decided to find out what was the initial song that Polycarpus remixed. Help Jonny restore the original song. Input The input consists of a single non-empty string, consisting only of uppercase English letters, the string’s length doesn’t exceed 200 characters Output Return the words of the initial song that Polycarpus used to make a dubsteb remix. Separate the words with a space. Examples12songDecoder(\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\") // =&gt; WE ARE THE CHAMPIONS MY FRIEND 요구조건 input으로 200자를 넘지 않고 비어있지 않은 string 하나가 들어오면 WUB가 끼어들어가있지 않은 원래의 song 제목으로 decoding해 return 한다. 각 단어는 space로 나눠져야 한다. 해결책여러가지 방법으로 해결했다. Regular Expression을 활용해 string을 처리했다. replace method와 RegEx를 사용해 song에 존재하는 모든 “WUB”를 “ “(space)로 대체한다. 단어 사이에 space가 여러개 있을 수 있으니 하나 이상의 space(\\s+)로 string을 배열로 조각낸 후, 각 단어를 다시 space를 사이에 넣어 join한다. 1-1. 이렇게 되면 string의 시작과 끝에 존재하는 공백이 처리되지 않는다. 처음 Solution 1을 작성할 때는 trim() method를 몰랐으므로 직접 if문으로 처리했다. filter() method와 새로운 function 문법 =&gt; 를 써보고 싶어 작성한 Suolution 정규 표현식과 trim method를 활용해 코드의 길이를 줄였다. javaScript Solution 1123456789101112function songDecoder(song){ let result = song.replace(/WUB/gi, ' ').split(/\\s+/).join(' '); if(result[0] === ' '){ result = result.slice(1); } if(result[result.length-1] === ' '){ result = result.slice(0, -1); } return result;} javaScript Solution 21234function songDecoder(song){ return song.replace(/WUB/g, ' ').split(' ').filter(word=&gt;word!='').join(' ');;} javaScript Solution 3 123function songDecoder(song){ return song.replace(/(WUB)+/g,\" \").trim();} Regular Expression ^x : 문자열의 시작이 x x$ : 문자열의 끝이 x .x : x로 끝나는 임의의 문자 x+ : x가 1번 이상 반복 x* : x가 0번 이상 반복 x? : x가 존재하거나 존재하지 않음 x{n} : x를 n번 반복한 문자를 찾음 x{n,} : x를 n번 이상 반복한 문자를 찾음 x{n, m} : x를 n번 이상, m번 이하 반복하는 문자를 찾음 Flags g (Global) : 문자열 내에 존재하는 모든 패턴을 찾음 i (Ignore Case) : 대소문자 구분 없이 찾음 m (Multi Line) : 문자열의 행이 바뀌어도 찾음 12// 객체초기화(Object initializer) 방법var regExp = /정규표현식/[Flag];","link":"/2019/04/18/CodeWars-6kyu-Dubstep/"},{"title":"Hello Hexo","text":"Start Hexo❤ 안녕하세요. Sub2n 입니다. 오늘은 hexo를 이용해 블로그를 생성하는 방법에 대해 알아보겠습니다. 🐸 개구리 🐸","link":"/2019/03/13/Hello hexo/"},{"title":"LeetCode 26. Remove Duplicates from Sorted Array","text":"LeetCode 26. Remove Duplicates from Sorted Array Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Example 1:Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the returned length. Example 2:Given nums = [0,0,1,1,1,2,2,3,3,4], Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn’t matter what values are set beyond the returned length. 요구조건 배열 nums에서 중복되지 않는 원소의 수를 return한다. 배열 nums는 중복되지 않는 수로 앞부분이 정렬되어야한다. 문제는 위의 설명과 같이 nums라는 number형 array를 입력받아 중복되는 element 대신 다음 element를 그 자리에 오게 하는 것이다. 나는 처음에 중복된 element를 제거한 새로운 배열을 return해 여러 번 오류가 났었다. 이 문제의 핵심은 nums 배열이 referance로 넘어온다는 것이다. 즉, 새로운 배열을 만들지 않고 원본 nums의 값을 바꿔야한다. 솔루션을 도출하기까지 나를 헷갈리게 한 것은 한 element를 제거하고 나면 nums의 index부터 길이가 매번 변화한다는 것이다. 처음에 그 부분을 캐치하지 못해 여러 번 오류가 났다. 해결책 처음에 문제를 완벽하게 이해하지 못해서, nums 배열의 중복을 완전히 제거하는 것인줄로만 알았다. 그래서 array.splice method를 이용해서 중복되는 부분을 제거했다. 첫번째 Solution을 제출한 후 다른 사람들의 풀이를 보고 문제를 다시 제대로 이해했다. javaScript Solution 1: Runtime 92 ms | Memory Usage 37.3 MB 1234567891011121314151617/** * @param {number[]} nums * @return {number} */var removeDuplicates = function(nums) { var prev= nums[0]; for(var i = 1; i &lt; nums.length; i++){ if(nums[i] == prev){ prev = nums[i]; nums.splice(i, 1); i -= 1; } else{ prev = nums[i]; continue; } }}; javaScript Solution 2: Runtime 72 ms | Memory Usage 37.3 MB 123456789101112131415/** * @param {number[]} nums * @return {number} */var removeDuplicates = function(nums) { if(nums.length == 0) return 0; let prev = 0; for(let i = 1; i &lt; nums.length; i++){ if(nums[i] != nums[prev]){ prev++; nums[prev] = nums[i]; } } return prev+1;} 배운 점영어라고 해서 대충 Example만 보고 바로 문제를 풀려고 하는 습관을 고쳐야겠다. 문제를 제대로 해석하고, 알고리즘을 짜는 것이 훨씬 효율적인 것 같다.","link":"/2019/04/15/LeetCode-26-Remove-Duplicates-from-Sorted-Array/"},{"title":"LeetCode 28. Implement strStr()","text":"LeetCode 28. Implement strStr() Implement strStr(). Return the index of the first occurrence of needle in haystack, or -1 &gt; if needle is not part of haystack. Example 1: Input: haystack = “hello”, needle = “ll”Output: 2Example 2: Input: haystack = “aaaaa”, needle = “bba”Output: -1 요구조건 string haystack에서 needle이 처음으로 등장하는 index를 반환한다. 존재하지 않으면 -1을 반환한다. 해결책 javaScript의 indexOf() method를 이용해 해결했다. method를 쓰지 않고 C로 해결해보려고 했는데 한 1년 C를 쓰지 않았다고 기능이 기억이 나지 않아 여러 번 찾아봐야 했다. 포인터 개념도 다시 한 번 훑어봐야겠다. javaScript Solution 1 : Runtime 56 ms | Memory Usage 33.8 MB 123456789/** * @param {string} haystack * @param {string} needle * @return {number} */var strStr = function(haystack, needle) { if (needle === \"\") return 0; return haystack.indexOf(needle);}; : Runtime 1300 ms | Memory Usage 7 MB 1234567891011121314151617181920int strStr(char* haystack, char* needle) { if(needle[0] == '\\0') return 0; int index = -1; int hayLen = strlen(haystack); int neeLen = strlen(needle); for(int i=0; i&lt; hayLen; i++){ if(haystack[i] == needle[0]){ index = i; for(int j=1; j &lt; neeLen ; j++){ if(i+j &gt;= hayLen || haystack[i+j] != needle[j]){ index = -1; break; } } } if(index &gt; -1) return index; } return -1;}","link":"/2019/04/17/LeetCode-28-Implement-strStr/"},{"title":"LeetCode 27. Remove Element","text":"LeetCode 27. Remove Element Given an array nums and a value val, remove all instances of that value in-place and return the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. The order of elements can be changed. It doesn’t matter what you leave beyond the new length. Example 1: Given nums = [3,2,2,3], val = 3, Your function should return length = 2, with the first two elements of nums being 2. It doesn’t matter what you leave beyond the returned length. Example 2: Given nums = [0,1,2,2,3,0,4,2], val = 2, Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn’t matter what values are set beyond the returned length. 요구조건 배열 nums에서 val의 값을 가진 element를 제거한다. in-place algorithm으로 연산해야 한다. 이번 문제는 LeetCode 26. Remove Duplicates from Sorted Array를 오해해서 풀었을 때와 거의 흡사해서 푸는 데에 시간이 오래 걸리지 않았다. 해결책 혼자 풀었을 때는 for문에서 nums.length를 검사할 때, nums.length가 splice로 인해서 줄어든 길이를 인식하지 못한다고 생각하여 if문의 마지막에 length = nums.length로 재정의를 했다.스터디원들과 대화를 하며 nums를 직접 접근하고 변형하는 것이므로 그럴 필요가 없다는 것을 알았다. 배열 nums의 길이만큼 for문을 돌며 val과 같은 element를 만나면 배열에서 제거한다.i번 째 loop에서 index = i 자리의 원소가 사라져, i+1번째 원소가 앞으로 당겨지므로, splice 연산 뒤에 i에서 1을 빼준다. javaScript Solution : Runtime 60 ms | Memory Usage 34.6 MB 1234567891011121314/** * @param {number[]} nums * @param {number} val * @return {number} */var removeElement = function(nums, val) { for(let i = 0; i &lt; nums.length; i++){ if(val == nums[i]){ nums.splice(i, 1); i =- 1; } } return nums.length;}; 배운 점 array.splice method에 대해서 제대로 알게 되었다. 원소를 제거하는 것 뿐만 아니라 그 자리에 여러 element를 넣을 수도 있는 유용한 method다. 여러 명과 알고리즘에 대해 이야기하면 생각지 못한 풀이가 나오는 것이 재밌다.","link":"/2019/04/16/LeetCode-27-Remove-Element/"},{"title":"LeetCode 35. Search Insert Position","text":"LeetCode 35. Search Insert Position Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array. Example 1: Input: [1,3,5,6], 5 Output: 2 Example 2: Input: [1,3,5,6], 2 Output: 1 Example 3: Input: [1,3,5,6], 7 Output: 4 Example 4: Input: [1,3,5,6], 0 Output: 0 요구조건input으로 들어오는 정렬된 배열 nums와 target으로, target이 nums에 있다면 그 index를 return하고 없다면 순서상 target이 있어야할 자리의 index를 return한다. 해결책처음 문제를 접하고 바로 Binary Search를 사용해야겠다고 생각했다. 원래는 값을 찾으면 return하고 없으면 -1을 return하지만, 이 문제에서는 target이 있어야 할 자리를 return하므로 end + 1을 return했다. C++ Solution : Runtime 8 ms | Memory Usage 8.7 MB 1234567891011121314151617181920class Solution {public: int searchInsert(vector&lt;int&gt;&amp; nums, int target) { if(target &lt;= nums[0]) return 0; int start = 0; int end = nums.size() - 1; int mid; while(start &lt;= end){ mid = (start + end) / 2; if(target == nums[mid]) return mid; else if(target &lt; nums[mid]){ end = mid -1; }else { start = mid+1; } } if(start &gt; end) return end+1; return -1; }};","link":"/2019/04/18/LeetCode-35-Search-Insert-Position/"},{"title":"Python 3.7.3 | Jupyter 설치","text":"Window Python 3.7.3 및 Jupyter 설치파이썬을 공부하기 위해 작업환경을 우선 구축하기로 한다. Python 3.7.3 설치 Python 최신 릴리즈인 3.7.3 다운로드 페이지로 이동한다. Download for Windows의 Python 3.7.3 버튼을 누르면 자동으로 설치 실행 파일이 다운로드 된다. 다운받은 python-3.7.3.exe 파일을 관리자 권한으로 실행 후, 설치를 진행한다. PATH를 자동으로 생성하는 것이 좋다! 다운로드가 완료되면 cmd 창을 열어 python --version 명령어로 설치가 제대로 되었는지 확인한다. Jupyter 설치위의 Python 설치 4단계에서, cmd 명령으로 확인을 정상적으로 마쳤다면 추가적인 명령 한 줄로 Jupyter를 설치할 수 있다. cmd 창에 pip install jupyter를 입력한다. 여기까지 하면 Python 사용을 위한 간단한 작업 환경 구성이 완료된다.","link":"/2019/04/18/Python-3-7-3-Jupyter-설치/"},{"title":"Python Data Type and Data Structure | Jupyter 사용방법","text":"","link":"/2019/04/18/Python-Data-Type-and-Data-Structure-Jupyter-사용방법/"},{"title":"Responsive Web (2)","text":"Responsive Web &lt;picture&gt; element Can I Use &lt;picture&gt;? CanIUse.com &lt;picture&gt; 문법 &lt;img&gt;를 fallback으로 첨부해야한다. &lt;picture&gt; 는 &lt;img&gt; tag가 없으면 인식되지 않는다! 1img {display: block; margin: 0 auto;} 12345&lt;picture&gt; &lt;source media=\"(min-width: 650px)\" srcset=\"images/kitten-stretching.png\"&gt; &lt;source media=\"(min-width: 465px)\" srcset=\"images/kitten-sitting.png\"&gt; &lt;img src=\"images/kitten-curled.png\" alt=\"a cute kitten\"&gt;&lt;/picture&gt; Pixel density descriptor 1x, 1.5x, 2x 그리고 3x와 같은 픽셀 밀도 서술자(Pixel density descriptor)들을 사용하여 고해상도 디스플레이 지원을 추가합니다. 새로 추가된 srcset 속성은 &lt;img&gt;와 &lt;source&gt; 엘리먼트 모두에 적용됩니다. letina부터는 2x 나오고 Android는 1.5x 등 정수가 아니고 소숫점으로 증가 Image 반응형으로 만들기 wrapper를 만들고, 그 안에 &lt;img&gt; max-width: 100%; height: auto; 12345678910111213141516 &lt;style&gt; .rwd-wrapper{ width: 30%; border: 5px solid blueviolet; } .rwd-wrapper img{ max-width: 100%; height: auto; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"rwd-wrapper\"&gt; &lt;img src=\"images/image-src.png\" alt=\"\"&gt; &lt;/div&gt;&lt;/body&gt; srcset 속성을 사용해서 Pixel density 설정 1234567&lt;div class=\"rwd-wrapper\"&gt;&lt;img src=\"images/image-src.png\" alt=\"\" srcset=\"images/image-1x.png 1x, images/image-2x.png 2x, images/image-3x.png 3x, images/image-4x.png 4x\"&gt;&lt;/div&gt; Viewport 별로 Art Direction 설정하기 &lt;picture&gt;의 &lt;source media=&quot;&quot;&gt;로 조건 줌 123456&lt;picture&gt; &lt;source media=\"(max-width: 650px)\" srcset=\"images/small.jpg\"&gt; &lt;source media=\"(min-width: 651px) and (max-width: 999px)\" srcset=\"images/media.jpg\"&gt; &lt;source media=\"(min-width: 1000px)\" srcset=\"images/large.jpg\"&gt; &lt;img class=\"rwd-img\" src=\"images/normal.jpg\" alt=\"\"&gt;&lt;/picture&gt; Background image를 반응형으로 만들기 image 원본 size를 알아내야한다. &gt; 가로, 세로 비율을 계산해야함 height를 0으로 하고, padding을 세로로 원본 image의 비율에 맞게 준다. 12345678.rwd-bg{ width: 100%; height: 0 !important; padding-top: calc(3280 / 4928 * 100%); background: url(\"images/light.jpg\") no-repeat; background-size: 100% 100%;} width 크기를 변경할 때는 새로운 wrapper를 만들어 그 wrapper의 width를 줄인다. 12345678910.wrapper{ width: 50%;}.rwd-bg{ width: 100%; height: 0 !important; padding-top: calc(3280 / 4928 * 100%); background: url(\"images/light.jpg\") no-repeat; background-size: 100% 100%;} 123&lt;div class=\"wrapper\"&gt; &lt;div class=\"rwd-bg\"&gt;&lt;/div&gt;&lt;/div&gt; .rwd-bg는 parent인 wrapper의 width 100%만큼 차지하므로 wrapper의 크기가 줄어들면 같이 줄어든다. Background-size: cover, contain CSS Trick Background-size 참고 사이트 cover : 이미지가 일부 잘리더라도 화면을 꽉 채우게 가장 작은 축을 기준으로 cover함 contain : 가로든, 세로든 가장 긴 축을 기준으로 화면에 잘리지 않게 하는 기법 Media query로 해상도 별 배경 image 다르게 하기 dpi : dot per inch - 1inch 당 들어가는 pixel 수 CSS는 1inch 당 96px이니까 192dpi는 2x임 12345@media all and (min-resolution: 192dpi){ .rwd-bg{ background-image: url(\"images/unsplash.jpg\"); }}","link":"/2019/04/16/Responsive Web (2)/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/03/13/hello-world/"},{"title":"Responsive Web (1)","text":"반응형 웹 | Responsive Web Design 웹 환경의 변화 : Mobile Device의 등장 초기 모바일 환경을 위해 mobile 화면을 별도 구성 &gt; 비용과 유지보수 측면에서 risk 크다. One Source Multi Use : 반응형 웹의 필요성 대두 Contents는 물처럼 어느 그릇에나 담길 수 있어야한다. Contents의 본질을 가지고 Markup 후 CSS로 디자인만 달리 할 수 있어야한다. Flexible vs Adaptive RWD(반응형 웹 디자인) : flexible(latout이 고무줄처럼 유연하게 늘었다 줄었다 하는 것), adaptive(viewport에 따라서 layout이 각각 고정되는 것) &gt; 둘 다Device viewport에 반응하는 design AWD(적응형 웹 디자인) Flexible : 모든 환경에서 유연하게 움직임 Adaptive : Web viewport에서는 고정형, tablet이나 mobile에서는 flexible design 채택 DeskTop First vs Mobile First Mobile First 권장 Desktop CSS 먼저 불러온 후 Mobile로 재적용하면 mobile 환경에서 data 많이 듦 &gt; 성능문제 Flexible Layout Target / Context = Result ( 900px / 960px = 0.9375 * 100% = 93.75%!) Target이 context 안에서 차지하는 영역 고정적인 pixel 단위 사용 최대한 지양 %, viewport, em 등 유연한 단위 사용을 지향 Media Queries123456@charset \"utf-8\"/* All Device *//* Mobile Device */@media all and (min-width: 768px){ /* 사용자 해상도가 768px 이상일 때 실행됨 */} all : 어떤 device든 들어올 수 있다는 뜻 (printer 용 CSS 따로 정의할 수 있음) 코드 중복, 복잡도 증가 &gt; CSS가 복잡해짐! Sass (CSS 전처리기) &gt; build하면 CSS code로 떨어짐 Sass Scss Responsive Image1234img{ max-width: 100%; height: auto;} max-width: 100% &gt; 부모 크기를 기준으로 100%, 원본크기 이상은 늘어나지 않게 함 height: auto &gt; 원본 사이즈 비율을 기준으로 auto (width가 반 줄어들면 얘도 반 줄어들음) • 용량으로 인한 성능, 속도 고려 필요 • Mobile Responsive Web test site: Troy - Responsive web tester • 현재 기기의 Pixel Ratio 알 수 있는 사이트: myDevice.io • 다양한 Image Format 대응 SVG : Vector 형식 이미지 WebP : 구글 제안 • 해결 &lt;img&gt;의 srcset, sizes 속성 &lt;picture&gt; 해상도 따라 조절하는 신규 요소 : &lt;picture&gt; 모를 때를 대비한 fallback image 있어야함 반응형 이미지123456789.rwd-container{ width: 50%; box-sizing: border-box; border: 10px solid #000;}.rwd-container img, .rwd-container video{ width: 100%; height: auto;} &lt;img&gt;가 parent container의 width가 줄어들 때마다 같이 줄어든다. &lt;video&gt;도 가능. 그러나 모두 크기 조절을 위해 wrapping해야한다. &lt;iframe&gt;을 반응형으로 만들기 &lt;iframe&gt; 삽입 123&lt;div class=\"rwd-iframe\"&gt; &lt;iframe src=\"https://www.youtube.com/embed/2S24-y0Ij3Y?controls=0\" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt; 12345678.rwd-iframe{ border: 10px solid #00f; width: 80%;}.rwd-iframe iframe{ width: 100%; height: auto;} &lt;img&gt;나 &lt;video&gt;처럼 하면 안 먹음 &lt;iframe&gt;은 wrapping &lt;div&gt; 2개 필요함 비율별 module화 123456789101112.rwd-iframe{ position: relative; padding-top: calc(9 / 16 * 100%); background: pink; width: 100%;}.rwd-3-4{ padding-top: calc(3 / 4 * 100%);}.rwd-9-16{ padding-top: calc(9 / 16 * 100%);} 12345678910&lt;div class=\"rwd-container\"&gt; &lt;div class=\"rwd-iframe rwd-9-16\"&gt; &lt;iframe src=\"https://www.youtube.com/embed/2S24-y0Ij3Y?controls=0\" allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=\"rwd-container\"&gt; &lt;div class=\"rwd-iframe rwd-3-4\"&gt; &lt;iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2974.021471174445!2d127.05441626516713!3d37.54323347980236!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x357ca49534790c57%3A0xc115101cbaecb40e!2z7JWE7YGs67C466as7ISc67mE7Iqk!5e1!3m2!1sko!2skr!4v1555310320240!5m2!1sko!2skr\" allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt;&lt;/div&gt; GRIDContainer에 display: grid 적용 123.container{ display: grid;} Grid-template 12345.container{ display: grid; grid-template-columns: 50% 50%; grid-template-rows: 50% 50%;} Grid는 FireFox에서 개발자도구로 보는 것이 가장 편하다! Grid fraction 123456.container{ background: yellow; display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 100px 100px;} Grid 배치 1234567.items4{ background: lime; grid-column-start: 2; grid-column-end: 3; grid-row-start: 1; grid-row-end: 2;} Start나 end 중 하나를 지정해주지 않으면 자동으로 한 칸만큼을 차지한다. 단축표기법 123456.items4{ background: lime; /* start / end */ grid-column: 2 / 3; grid-row: 1 / 2;} 여러 track 차지하기 12345.items2{ background: orange; grid-column: 1 / 4; grid-row: 2 / 3;} Grid-area 12345.items2{ background: orange; /* row-start / column-start / row-end / column-end */ grid-area: 2 / 1 / 3 / 4;} Grid template areas Grid item에 name 주고 container에서 grid-template-areas로 위치 잡기 Grid 속성 요약 12345678.container{ background: yellow; display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 100px 100px; grid-template-areas: \"item2 . item1\" \"item4 item4 item3\"} Grid IE 환경 코드로 autoprefix: Auto Prefixer 🌟 Grid calculator: Grid Calculator 🌟 : column 크기 65px, gutter 20px, page width와 column width 소수점 안 나오게 조정 Grid column, gutter(gap) 설정123456.container{ background: yellow; display: grid; grid-template-columns: repeat(12, 65px); grid-column-gap: 20px; } : repeat(반복 횟수, 크기) method 사용 Grid area 잡기 : DeskTop Version 1234567891011121314151617181920212223242526272829303132333435363738394041.container{ max-width: 1000px; margin: 0 auto; background: silver; display: grid; grid-template-columns: repeat(12, 65px); /* grid-template-rows: ; */ grid-column-gap: 20px; }.header{ background: pink; grid-area: 1 / 1 / 2 / 13;}.navigation{ background: skyblue; grid-area: 2 / 1 / 3 / 13;}.book{ background: lime; grid-area: 3 / 1 / 4 / 5;}.news{ background: orange; grid-area: 3 / 5 / 4 / 13;}.board{ background: blanchedalmond; grid-area: 4 / 1 / 5 / 5;}.favorite{ background: gold; grid-area: 4 / 10 / 5 / 13;}.twitter{ background: brown; grid-area: 4 / 5 / 5 / 10;}.footer{ background: teal; grid-area: 5 / 1 / 6 / 13;} Grid area 잡기 : Mobile Device 12345678/* Mobile Device */@media all and (max-width: 999px){ .container{ display: grid; grid-template-columns: repeat(4, 1fr); padding: 0 20px; }} 알파, 오메가 margin 따로 없으니까 좌우 padding으로 줌 Margin 빼고 나머지 부분을 4등분하려고 fr 단위 사용 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/* Mobile Device */@media all and (max-width: 999px){ .container{ display: grid; grid-template-columns: repeat(4, 1fr); grid-column-gap: 20px; padding: 0 20px; grid-template-areas: \"header header header header\" \"nav nav nav nav\" \"book book news news\" \"board board favorite favorite\" \"twitter twitter twitter twitter\" \"footer footer footer footer\" } .header{ background: yellow; grid-area: header; } .navigation{ background: pink; grid-area: nav; } .book{ background: skyblue; grid-area: book; } .news{ background: lime; grid-area: news; } .board{ background: purple; grid-area: board; } .favorite{ background: orange; grid-area: favorite; } .twitter{ background: aqua; grid-area: twitter; } .footer{ background: hotpink; grid-area: footer; }}","link":"/2019/04/16/Responsive Web (1)/"}],"tags":[{"name":"TIL","slug":"TIL","link":"/tags/TIL/"},{"name":"HTML, CSS","slug":"HTML-CSS","link":"/tags/HTML-CSS/"},{"name":"Algorithm","slug":"Algorithm","link":"/tags/Algorithm/"},{"name":"javaScript","slug":"javaScript","link":"/tags/javaScript/"},{"name":"Python","slug":"Python","link":"/tags/Python/"}],"categories":[{"name":"TIL","slug":"TIL","link":"/categories/TIL/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"Algorithm","slug":"Algorithm","link":"/categories/Algorithm/"},{"name":"LeetCode","slug":"Algorithm/LeetCode","link":"/categories/Algorithm/LeetCode/"},{"name":"CodeWars","slug":"Algorithm/CodeWars","link":"/categories/Algorithm/CodeWars/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"HTML/CSS","slug":"HTML-CSS","link":"/categories/HTML-CSS/"},{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"jQuery","slug":"JavaScript/jQuery","link":"/categories/JavaScript/jQuery/"}]}