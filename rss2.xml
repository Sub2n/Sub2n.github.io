<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>수빈 개발블로그</title>
    <link>https://sub2n.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Post what I studied</description>
    <pubDate>Wed, 14 Aug 2019 03:18:12 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Fastflix</title>
      <link>https://sub2n.github.io/2019/08/14/Fastflix/</link>
      <guid>https://sub2n.github.io/2019/08/14/Fastflix/</guid>
      <pubDate>Wed, 14 Aug 2019 02:26:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Fastflix&quot;&gt;&lt;a href=&quot;#Fastflix&quot; class=&quot;headerlink&quot; title=&quot;Fastflix&quot;&gt;&lt;/a&gt;Fastflix&lt;/h1&gt;&lt;p&gt;Web FrontEnd, BackEnd, iOS 세 팀이 협업한 Netflix Cl
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Fastflix"><a href="#Fastflix" class="headerlink" title="Fastflix"></a>Fastflix</h1><p>Web FrontEnd, BackEnd, iOS 세 팀이 협업한 Netflix Clone Project</p><p>패스트캠퍼스 프론트엔드 개발 스쿨의 파이널 프로젝트로 진행했다.</p><h4 id="팀원"><a href="#팀원" class="headerlink" title="팀원"></a>팀원</h4><p><strong>박수빈</strong>, 한현진, 정수영</p><h4 id="역할"><a href="#역할" class="headerlink" title="역할"></a>역할</h4><p>나는 프론트엔드의 팀장을 맡았다.</p><h5 id="팀장으로써의-역할"><a href="#팀장으로써의-역할" class="headerlink" title="팀장으로써의 역할"></a>팀장으로써의 역할</h5><p><img src="https://user-images.githubusercontent.com/48080762/62991049-1befad00-be89-11e9-98be-57a0ea6fd964.png" alt="Fastflix FlowChart"></p><p><img src="https://user-images.githubusercontent.com/48080762/62991052-1c884380-be89-11e9-8e55-79c834a4c913.png" alt="Fastflix WireFrame"></p><p>Netflix를 분석하고 flow chart와 wire frame을 작성했다. 설계 부분에서는 소프트웨어 공학 수업에서 배운 설계 방법이 많은 도움이 됐다. 요구분석을 통해 Requirment List를 도출하고 Requirment List를 바탕으로 팀원 간 역할을 부여했다.</p><p><img src="https://user-images.githubusercontent.com/48080762/62991185-95879b00-be89-11e9-85f7-0aae3e36e318.png" alt="Requirment List"></p><p>한 달 규모의 프로젝트를 리드해본 적이 없었기에 초반에 부담이 컸다. 어떻게 해야 팀원들과 잘 협업해서 좋은 결과물을 낼 수 있을 지가 가장 큰 고민이었다. 고민 끝에 각자의 역량에 맞게 역할을 분담하고 Gantt Chart를 이용해 스케줄을 관리했다.</p><p><img src="https://user-images.githubusercontent.com/48080762/62991782-fd3ee580-be8b-11e9-9d47-d80c7fa315c7.png" alt="Gantt Chart"></p><p>처음에는 4명이 팀이 되어 시작했는데, 그 중 2명은 개발에 자신이 없는 태도를 보여 간단한 Component를 하나씩 맡겼다. 현진이는 핵심 기능이라고 할 수 있는 Netflix의 Slider 구현을 맡았다. Gantt Chart를 이용한 스케줄 관리는 스프린트 미팅 때 강사님께도 칭찬을 들었다.</p><p>남은 내 몫은 팀원들이 맡은 Component를 구현할동안 <strong>다른 모든 것들</strong>을 구현하는 거였다.</p><h5 id="구현에서의-역할"><a href="#구현에서의-역할" class="headerlink" title="구현에서의 역할"></a>구현에서의 역할</h5><p><img src="https://user-images.githubusercontent.com/48080762/62991060-214cf780-be89-11e9-838d-e031083e81d5.png" alt="Components"></p><p>팀원 한 분이 중간에 하차를 해서 Profile에 관련된 구현을 내가 맡았다. 현진이가 모든 Slider를 작업하고, 수영님이 비디오 플레이어의 외관을 꾸몄다. (데이터 바인딩은 내가 했다^^;) </p><p>밑의 작업들을 내가 진행했다.</p><ul><li><p>Component 분리</p></li><li><p>Routing 및 Routing Animation 구현</p></li><li><p>팀원들이 작업할 수 있는 환경을 만들기 위해  Home과 Movie의 HTML/CSS을 우선 작업</p></li><li><p>Authentication Guard로 로그인 하지 않은 유저의 접근 제한</p></li><li><p>로그인을 하지 않은 유저가 보게 될 초기 화면 구현 (초기 페이지에서 회원가입과 로그인이 가능)</p></li><li><p>4단계로 이루어진 회원가입 기능 구현</p></li><li><p>2중 로그인 기능 구현 (1. 계정으로 로그인 2. 프로필로 로그인)</p></li><li><p>Server의 API가 완성됨에 따라 HttpClient 통신을 제공하는 Angular Service 구현</p></li><li><p>검색 기능 구현 (사용자가 검색어를 입력할 때마다 화면에 검색 결과 반영)</p></li><li><p>Slider, Watch Component 등으로의 Data Binding</p></li><li><p>각 유저 별로 영화를 좋아요, 싫어요, 내가 찜 한 목록에 추가하기 기능 구현</p></li><li><p>프로필 생성, 수정, 삭제 기능 구현</p></li></ul><h4 id="역경"><a href="#역경" class="headerlink" title="역경"></a>역경</h4><p>프로젝트는 다사다난했다. 처음에는 구현할 게 많게 느껴져 구현이 어려울 거라고 생각했지만, 모든 문제는 사람이 만들었다. 프로젝트 진행 중반 쯤에 각 팀마다 하차자가 나왔다. FrontEnd에서 한 명, BackEnd에서 한 명이 하차했다. BackEnd에서 하차하는 팀원이 Github Organization 레포지토리를 삭제하는 일이 있었다.</p><p><img src="https://user-images.githubusercontent.com/48080762/62992033-eb117700-be8c-11e9-8206-44dc6e2dafb3.png" alt="충격과공포"></p><p>이 때 2주동안 열심히 심어놓은 잔디들이 날아갔다. 다행히 레포지토리가 복구되어 잔디도 복구했지만 이 경험을 통해서 사람이 가장 무섭고 위험하다는 것을 깨달았다.</p><p>그 외에 힘들었던 것은, 팀원 4명의 역량이 차이가 많이 나서 일의 분배가 균등하지 않았다는 것이다. 나보다 나이가 10살은 많은 팀원을 통제하기도 힘이 들었다. 막바지에 가서는 나와 현진이 2명이서 프로젝트를 완성한 꼴이 되었다. 조별과제 절망편이다. 어쩌면 교수님들은 인생을 배우라는 의미에서 조별과제를 내주시는 걸지도 모른다.</p><h4 id="성과"><a href="#성과" class="headerlink" title="성과"></a>성과</h4><p><img src="https://user-images.githubusercontent.com/48080762/62991472-c1575080-be8a-11e9-8e06-8e93377c4548.png" alt="Home"></p>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/08/14/Fastflix/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190808-TIL 취업클리닉</title>
      <link>https://sub2n.github.io/2019/08/08/190808-TIL-%EC%B7%A8%EC%97%85%ED%81%B4%EB%A6%AC%EB%8B%89/</link>
      <guid>https://sub2n.github.io/2019/08/08/190808-TIL-%EC%B7%A8%EC%97%85%ED%81%B4%EB%A6%AC%EB%8B%89/</guid>
      <pubDate>Thu, 08 Aug 2019 00:48:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;프로젝트를 build 해서 서버에 올렸다. 깔끔한 앱을 보여주기 위해서 테스트 용 log를 제거했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;취업-클리닉&quot;&gt;&lt;a href=&quot;#취업-클리닉&quot; class=&quot;headerlink&quot; title=&quot;취업 클리닉&quot;&gt;&lt;/a&gt;취업 클리닉&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;능력은 개인이 가지고 있는 것, &lt;strong&gt;역량은 그 능력으로 성과를 내는 것&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;자기소개서의 &lt;strong&gt;소제목에 성과가 드러나도록&lt;/strong&gt; 써야 한다.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>프로젝트를 build 해서 서버에 올렸다. 깔끔한 앱을 보여주기 위해서 테스트 용 log를 제거했다.</li></ul><h2 id="취업-클리닉"><a href="#취업-클리닉" class="headerlink" title="취업 클리닉"></a>취업 클리닉</h2><ul><li>능력은 개인이 가지고 있는 것, <strong>역량은 그 능력으로 성과를 내는 것</strong>이다.</li><li>자기소개서의 <strong>소제목에 성과가 드러나도록</strong> 써야 한다.</li></ul><a id="more"></a><h4 id="나의-역량-탐색-amp-취업전략-실습"><a href="#나의-역량-탐색-amp-취업전략-실습" class="headerlink" title="나의 역량 탐색 &amp; 취업전략 실습"></a>나의 역량 탐색 &amp; 취업전략 실습</h4><h4 id="기업-정보-조사"><a href="#기업-정보-조사" class="headerlink" title="기업 정보 조사"></a>기업 정보 조사</h4><ul><li>눈<ul><li>관련 인터넷 블로그, 카페, 사이트</li></ul></li><li>발<ul><li>포럼, 학회, 박람회</li><li>동호회, 커뮤니티</li></ul></li><li>사람<ul><li>현직 근무자</li><li>목표 분야 전문가</li></ul></li></ul><h4 id="기업이-듣고-싶은-역량"><a href="#기업이-듣고-싶은-역량" class="headerlink" title="기업이 듣고 싶은 역량"></a>기업이 듣고 싶은 역량</h4><ul><li><strong>실무진 면접</strong><ul><li>직무를 위한 노력 (지식/기술)</li><li>직무를 위한 <strong>자발적 노력</strong> (누가 안 시켜도 하는 것)</li><li>회사의 비전 달성에 기여하는 인재임을 어필</li></ul></li><li><strong>임원진 면접</strong><ul><li>스토리 중심</li></ul></li></ul><h4 id="문제-해결-능력"><a href="#문제-해결-능력" class="headerlink" title="문제 해결 능력"></a>문제 해결 능력</h4><p>문제를 빠르게 인식하고 해결하는 능력</p><p>산업 분석을 통한 문제해결 및 자기개발 역량 어필</p><p><a href="https://finance.naver.com/research/industry_list.nhn" target="_blank" rel="noopener">네이버 산업 분석리포트</a></p><h4 id="직무-역량-세부-점수"><a href="#직무-역량-세부-점수" class="headerlink" title="직무 역량 세부 점수"></a>직무 역량 세부 점수</h4><ul><li>관련 경험이 지원한 직무와 연관성이 있음</li><li>지원 직무를 수행하는 데 필요한 기초적인 지식, 기술 또는 태도 습득</li><li>직무에 대한 이해가 충분</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/08/08/190808-TIL-%EC%B7%A8%EC%97%85%ED%81%B4%EB%A6%AC%EB%8B%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190807-TIL</title>
      <link>https://sub2n.github.io/2019/08/07/190807-TIL/</link>
      <guid>https://sub2n.github.io/2019/08/07/190807-TIL/</guid>
      <pubDate>Wed, 07 Aug 2019 07:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;트러블 슈팅 시간
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li><p>트러블 슈팅 시간에 상태 관리를 위한 Subject 에 대해서 조언 받았다.</p><p><a href="https://poiemaweb.com/fastcampus-angular/angular-rxjs-observable" target="_blank" rel="noopener">Hot Observable 공부하기</a></p></li><li><p>영화 장르 별로 화면을 보여주는 기능을 추가했다.</p></li><li><p>이제 프로젝트가 거의 마무리 되어 프로젝트를 build 해야 한다.</p></li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/08/07/190807-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190806-TIL | User input event 끝날 때까지 기다리기</title>
      <link>https://sub2n.github.io/2019/08/06/190806-TIL/</link>
      <guid>https://sub2n.github.io/2019/08/06/190806-TIL/</guid>
      <pubDate>Tue, 06 Aug 2019 04:52:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;오늘은 프로젝트의 잔 
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>오늘은 프로젝트의 잔 오류를 수정했다.</li></ul><h4 id="Wait-for-User-to-Stop-Typing"><a href="#Wait-for-User-to-Stop-Typing" class="headerlink" title="Wait for User to Stop Typing"></a>Wait for User to Stop Typing</h4><ul><li>Netflix는 User가 검색창에 한 글자를 입력할 때마다 검색 결과를 화면에 보여주는데,  약간의 텀이 있어 사용자 경험이 부드러웠다.</li><li>나는 처음에 Keyup Event Handler에서 input value를 가져와 조건에 따라서 검색을 시켰는데, Search component에 쿼리를 붙여서 라우팅 하는 방식으로 구현하다 보니까 검색어가 완성되지 않았을 때 오류가 나며 깜빡이는 이슈가 생겼다.</li><li>User가 원하는 검색어를 입력할 때까지 기다리는 일이 필요했다! <a href="https://schier.co/blog/2014/12/08/wait-for-user-to-stop-typing-using-javascript.html" target="_blank" rel="noopener">!wait for user to stop typing</a> ◀ 이 글을 참고해서 훨씬 부드러운 검색 화면을 구현했다.</li><li>setTimeout을 이렇게 쓸 수 있다니 굉장히 유용한 스킬을 배운 것 같아 기분이 좋다.</li></ul><h4 id="Module-분리"><a href="#Module-분리" class="headerlink" title="Module 분리"></a>Module 분리</h4><p>파이널 프로젝트의 구현이 거의 끝나서 모듈을 분리하는 작업을 할 것이다.</p><p>Feature module, Shared module, Core module로 분리한다.</p><ul><li>Feature module : 기능 모듈. 특정 화면을 구성하는 구성 요소</li><li>Shared module : 공유 모듈. App 전역에서 사용하는 Component, Directive, Pipe 등</li><li>Core Module : 핵심 모듈. App 전역에서 사용하는 Data Service, Authentication Service, Authentication Guard 등</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/08/06/190806-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190804-TIL</title>
      <link>https://sub2n.github.io/2019/08/04/190804-TIL/</link>
      <guid>https://sub2n.github.io/2019/08/04/190804-TIL/</guid>
      <pubDate>Sun, 04 Aug 2019 12:49:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;기능 구현이 거의 끝난
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>기능 구현이 거의 끝난 코드를 주석을 정리하고 잔 오류를 고쳤다.</li><li>내일 마무리를 하고 모듈을 나눌 예정이다.</li><li>기능 구현에 급급해서 오랜 시간 코딩만 하다 보니 사람의 언어를 잃었다..</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/08/04/190804-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190730-TIL</title>
      <link>https://sub2n.github.io/2019/07/30/190730-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/30/190730-TIL/</guid>
      <pubDate>Tue, 30 Jul 2019 12:17:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p><img src="https://user-images.githubusercontent.com/48080762/62128561-a4117680-b30f-11e9-819f-3a72cf7c5952.png" alt="commits"></p><ul><li>오늘 정말 열일을 했다.</li><li>어제 백엔드 팀에서 프로젝트를 하차하는 팀원이 우리가 작업하던 Github Organization Repository를 삭제하는 일이 있었다. 덕분에 어제 하루 종일 복구를 하느라 고생했다. 나중에 정리하기 위해 기록한다.</li><li>삭제된 Github Organization Repository 복구하기<ul><li>Github 측에 복구 요청 메일을 보낸다.</li><li>Repository 주소, Owner의 계정 email을 함께 보내면 처리가 빠를 것 같다.</li></ul></li><li>오늘은 Fastflix의 Home Component의 Data를 싹 가져오고, Watch Component 등 잡다한 API 통신을 구현했다.</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/30/190730-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190723-TIL</title>
      <link>https://sub2n.github.io/2019/07/23/190723-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/23/190723-TIL/</guid>
      <pubDate>Tue, 23 Jul 2019 11:08:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h4 id=&quot;오전&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h4 id="오전"><a href="#오전" class="headerlink" title="오전"></a>오전</h4><p>유니티 수업을 들었다. 안드로이드 환경에서 테스트했다.</p><h4 id="오후"><a href="#오후" class="headerlink" title="오후"></a>오후</h4><p>백엔드에서 제공한 API를 이용해서 영화 정보를 가져와 Movie Component에 영화 정보를 표시햇다. </p><p>Movie의 Child Component인 Slider Component에 데이터를 전달하는 방식에 대해서 고민을 많이 했지만 굳이 데이터를 저장하고 있을 필요가 없을 것 같아서 우선은 영화 id를 포함한 정보를 전달하기로 했다. 각 Component에서 상세 정보를 요청할 수 있는 메소드를 만들었다. 아직 동작은 불안정하다.</p>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/23/190723-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C# Basic</title>
      <link>https://sub2n.github.io/2019/07/22/C-Basic/</link>
      <guid>https://sub2n.github.io/2019/07/22/C-Basic/</guid>
      <pubDate>Mon, 22 Jul 2019 05:34:59 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C&lt;/h1&gt;&lt;h4 id=&quot;Object-oriented-Language&quot;&gt;&lt;a href=&quot;#Object-oriented-Language&quot; class=&quot;headerlink&quot; title=&quot;Object-oriented Language&quot;&gt;&lt;/a&gt;Object-oriented Language&lt;/h4&gt;&lt;p&gt;다른 객체 지향 언어와 마찬가지로 Class와 Instance Attribute, Method 등의 개념이 존재한다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h4 id="Object-oriented-Language"><a href="#Object-oriented-Language" class="headerlink" title="Object-oriented Language"></a>Object-oriented Language</h4><p>다른 객체 지향 언어와 마찬가지로 Class와 Instance Attribute, Method 등의 개념이 존재한다.</p><a id="more"></a><h4 id="C-Script-생성시-초기-화면"><a href="#C-Script-생성시-초기-화면" class="headerlink" title="C# Script 생성시 초기 화면"></a>C# Script 생성시 초기 화면</h4><figure class="highlight c# hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">using</span> System.Collections;</span><br><span class="line"><span class="hljs-keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="hljs-keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> : <span class="hljs-title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Update is called once per frame</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MonoBehaviour : Unity의 기본 Class 😪 <a href="https://docs.unity3d.com/kr/530/ScriptReference/MonoBehaviour.html" target="_blank" rel="noopener">docs.unity</a></li><li>Update method : frame마다 매번 실행됨</li></ul><h4 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h4><figure class="highlight c# hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">using</span> System.Collections;</span><br><span class="line"><span class="hljs-keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="hljs-keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> : <span class="hljs-title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> iValue;</span><br><span class="line">    <span class="hljs-keyword">double</span> dValue;</span><br><span class="line">    <span class="hljs-keyword">float</span> fValue;</span><br><span class="line">    <span class="hljs-keyword">bool</span> bValue;</span><br><span class="line">    <span class="hljs-keyword">string</span> sValue;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        iValue = <span class="hljs-number">50</span>;</span><br><span class="line">        dValue = <span class="hljs-number">100.123</span>;</span><br><span class="line">        fValue = <span class="hljs-number">100.23f</span>;</span><br><span class="line">        bValue = <span class="hljs-literal">true</span>;</span><br><span class="line">        sValue = <span class="hljs-string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Update is called once per frame</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        print(<span class="hljs-string">"Integer Value: "</span> + iValue);</span><br><span class="line">        print(<span class="hljs-string">"Double Value: "</span> + dValue);</span><br><span class="line">        print(<span class="hljs-string">"Float Value: "</span> + fValue);</span><br><span class="line">        print(<span class="hljs-string">"Boolean Value: "</span> + bValue);</span><br><span class="line">        print(<span class="hljs-string">"String Value: "</span> + sValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>float type은 number + f로 써야함</li></ul><h4 id="Moving-Object"><a href="#Moving-Object" class="headerlink" title="Moving Object"></a>Moving Object</h4><figure class="highlight c# hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">using</span> System.Collections;</span><br><span class="line"><span class="hljs-keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="hljs-keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> : <span class="hljs-title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">float</span> speed = <span class="hljs-number">20.0f</span>;</span><br><span class="line">    Rigidbody rb;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> isGrounded;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        rb = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionStay</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        isGrounded = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Update is called once per frame</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"></span>)</span></span><br><span class="line"><span class="hljs-function"></span>    &#123;</span><br><span class="line">        <span class="hljs-keyword">float</span> position1 = Input.GetAxis(<span class="hljs-string">"Vertical"</span>);</span><br><span class="line">        <span class="hljs-keyword">float</span> position2 = Input.GetAxis(<span class="hljs-string">"Horizontal"</span>);</span><br><span class="line"></span><br><span class="line">        position1 = position1 * speed * Time.deltaTime;</span><br><span class="line">        position2 = position2 * speed * Time.deltaTime;</span><br><span class="line">    </span><br><span class="line">        transform.Translate(Vector3.forward * position1);</span><br><span class="line">        transform.Translate(Vector3.right * position2);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Space) &amp;&amp; isGrounded == <span class="hljs-literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rb.AddForce(<span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>), ForceMode.Impulse);</span><br><span class="line">            isGrounded = <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어설프게 키보드로 움직이는 코드</p>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/22/C-Basic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190722-TIL</title>
      <link>https://sub2n.github.io/2019/07/22/190722-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/22/190722-TIL/</guid>
      <pubDate>Mon, 22 Jul 2019 00:58:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h4 id=&quot;오전&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h4 id="오전"><a href="#오전" class="headerlink" title="오전"></a>오전</h4><ul><li>학교에서 유니티를 활용한 VR 콘텐츠 교육을 7월 22일부터 7월 25일까지 수강한다.</li></ul><h4 id="AR-VR"><a href="#AR-VR" class="headerlink" title="AR/VR"></a>AR/VR</h4><ul><li><p>Virtual Reality (VR)</p><p>현실 세계가 전혀 없는 완전 가상 환경</p><p>현실을 차단할 수 있는 장치 필요 (HMD : Head Mounted Display) + Controller</p></li><li><p>Augmented Reality (AR)</p><p>증강현실</p><p>현실 + 가상 환경 (현실 &gt; 가상)</p><p>포켓몬고나 스냅챕 필터 등</p></li><li><p>Mixed Reality (MR)</p><p>현실과 가상이 합쳐져 둘을 구분하기 어려움</p></li><li><p>HMD(Head Mouted Display)</p><ul><li>FOV (Field of View): 시야각, 보통 인간은 120도 봄</li><li>Refresh Rate : frame 수 같은..</li></ul></li></ul><h4 id="필요-Skill-Set"><a href="#필요-Skill-Set" class="headerlink" title="필요 Skill Set"></a>필요 Skill Set</h4><ul><li>Unity</li><li>C#</li><li>Android</li><li>Vuforia</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/22/190722-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190720-TIL</title>
      <link>https://sub2n.github.io/2019/07/20/190720-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/20/190720-TIL/</guid>
      <pubDate>Sat, 20 Jul 2019 04:20:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;백엔드에서 API가 하
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>백엔드에서 API가 하나씩 완성이 되어 협업을 하다보니까 생각지 못한 변수가 생겼다. 하나를 고치면 새로운 수정 사항이 생기기를 반복하는 식이다.</li><li>step이 4개가 되는 회원가입, 로그인과 관련된 Http 통신을 구현했다. 현재 로그인을 한 후 프로필을 등록하는 단계를 진행 중이다.</li><li>토요일 오늘은 React 특강을 들었다. Angular와는 다른 느낌으로 더 배워보면 재미있을 것 같다.</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/20/190720-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190716-TIL</title>
      <link>https://sub2n.github.io/2019/07/16/190716-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/16/190716-TIL/</guid>
      <pubDate>Tue, 16 Jul 2019 10:26:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Home과 Mov
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li><p>Home과 Movie, My List 뷰의 Header와 Footer를 통일하고 Header의 sub menu와 hover transition 등을 마무리 했다.</p></li><li><p>bootstrap 모듈을 하나 가져다 썼다고 내가 적용했던 CSS가 먹통이 되는 일이 있었다.. 개고생 했다.</p></li><li><p>Server에서 받아온 Data를 어떻게 다룰 것인지 고민해봐야한다.</p></li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/16/190716-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190715-TIL</title>
      <link>https://sub2n.github.io/2019/07/15/190715-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/15/190715-TIL/</guid>
      <pubDate>Mon, 15 Jul 2019 04:18:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h4 id=&quot;오전&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h4 id="오전"><a href="#오전" class="headerlink" title="오전"></a>오전</h4><ul><li>프로젝트 구현을 시작하기 위해서 팀원들과 개발 환경을 세팅했다.</li></ul><h4 id="오후"><a href="#오후" class="headerlink" title="오후"></a>오후</h4><ul><li>모일 시간 등 회의</li><li>Header Component의 Secondary Navigation과 Directive를 이용한 window scroll Fixed header를 구현</li></ul><h2 id="오늘-회의"><a href="#오늘-회의" class="headerlink" title="오늘 회의"></a>오늘 회의</h2><h3 id="1-출퇴근-시간-정하기"><a href="#1-출퇴근-시간-정하기" class="headerlink" title="1. 출퇴근 시간 정하기"></a>1. 출퇴근 시간 정하기</h3><ul><li><p>업무 시간 : 6 ~ 7 시간 (평일: 월 ~ 금 / 주말: 토요일)</p></li><li><p>오전 : 오전 10시 출근 오후 6시 퇴근</p></li><li><p>오후 :  오후 1시 출근 오후 10시 퇴근 (저녁 시간 1 시간 30분)</p></li></ul><h3 id="2-오늘부터-구현할-내용-발표하기"><a href="#2-오늘부터-구현할-내용-발표하기" class="headerlink" title="2. 오늘부터 구현할 내용 발표하기"></a>2. 오늘부터 구현할 내용 발표하기</h3><ul><li>매일 오후 5시 반</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/15/190715-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React Basic</title>
      <link>https://sub2n.github.io/2019/07/13/React-Basic/</link>
      <guid>https://sub2n.github.io/2019/07/13/React-Basic/</guid>
      <pubDate>Sat, 13 Jul 2019 01:17:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;React-amp-Angular-비교&quot;&gt;&lt;a href=&quot;#React-amp-Angular-비교&quot; class=&quot;headerlink&quot; title=&quot;React &amp;amp; Angular 비교&quot;&gt;&lt;/a&gt;React &amp;amp; Angular 비교&lt;/h2&gt;&lt;h4 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Facebook이 만든 Frontend Framework&lt;/li&gt;
&lt;li&gt;오로지 View만 관리&lt;/li&gt;
&lt;li&gt;Facebook, Netflix, Airbnb 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Angular&quot;&gt;&lt;a href=&quot;#Angular&quot; class=&quot;headerlink&quot; title=&quot;Angular&quot;&gt;&lt;/a&gt;Angular&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;구글이 만든 Frontend Framework&lt;/li&gt;
&lt;li&gt;Framework로서 많은 기능 내장 (Router, Auth, animation 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;필요-Skill&quot;&gt;&lt;a href=&quot;#필요-Skill&quot; class=&quot;headerlink&quot; title=&quot;필요  Skill&quot;&gt;&lt;/a&gt;필요  Skill&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;React&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Angular&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;선택&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;필수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;RxJS&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;선택&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;필수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;상태관리&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Redux / Mobx&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Angular Service&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="React-amp-Angular-비교"><a href="#React-amp-Angular-비교" class="headerlink" title="React &amp; Angular 비교"></a>React &amp; Angular 비교</h2><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul><li>Facebook이 만든 Frontend Framework</li><li>오로지 View만 관리</li><li>Facebook, Netflix, Airbnb 등</li></ul><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h4><ul><li>구글이 만든 Frontend Framework</li><li>Framework로서 많은 기능 내장 (Router, Auth, animation 등)</li></ul><h4 id="필요-Skill"><a href="#필요-Skill" class="headerlink" title="필요  Skill"></a>필요  Skill</h4><table><thead><tr><th align="center"></th><th align="center">React</th><th align="center">Angular</th></tr></thead><tbody><tr><td align="center"><strong>TypeScript</strong></td><td align="center">선택</td><td align="center">필수</td></tr><tr><td align="center"><strong>RxJS</strong></td><td align="center">선택</td><td align="center">필수</td></tr><tr><td align="center"><strong>상태관리</strong></td><td align="center">Redux / Mobx</td><td align="center">Angular Service</td></tr></tbody></table><a id="more"></a><h2 id="Framework-쓰는-이유"><a href="#Framework-쓰는-이유" class="headerlink" title="Framework 쓰는 이유"></a>Framework 쓰는 이유</h2><h4 id="생산성과-효율성-↑"><a href="#생산성과-효율성-↑" class="headerlink" title="생산성과 효율성 ↑"></a>생산성과 효율성 ↑</h4><h2 id="Start-React"><a href="#Start-React" class="headerlink" title="Start React"></a>Start React</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><ul><li><code>serviceWorker.js</code>와 <code>menifest.js</code>로 Progressive Web App</li></ul><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><ul><li>index.html</li><li>menifest.js</li></ul><h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><ul><li><p>App.js</p></li><li><p>index.js</p></li><li><p>serviceWorker.js</p></li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><h2 id="JSX-amp-가상-DOM"><a href="#JSX-amp-가상-DOM" class="headerlink" title="JSX &amp; 가상 DOM"></a>JSX &amp; 가상 DOM</h2><h3 id="JSX-JavaScript-Like-XML"><a href="#JSX-JavaScript-Like-XML" class="headerlink" title="JSX(JavaScript Like XML)"></a>JSX(JavaScript Like XML)</h3><ul><li>React의 Element를 생성하는 방법</li><li><code>{ }</code>로 감싸고 JavaScript Code 작성</li><li>CSS class 적용 위해서 class =” “ 대신 className=” “ 사용</li><li>function 은 render 내장되어 return하면 되지만 class에서는 JSX를 return하는 render함수를 사용해야함</li></ul><h3 id="Functional-Component"><a href="#Functional-Component" class="headerlink" title="Functional Component"></a>Functional Component</h3><p>Life Cycle이 없음</p><p>Parent Component로부터 Props를 받기만 함</p><h3 id="Class-Component"><a href="#Class-Component" class="headerlink" title="Class Component"></a>Class Component</h3><p>자체 Life Cycle이 있음</p><h3 id="가상-돔-Virtual-DOM"><a href="#가상-돔-Virtual-DOM" class="headerlink" title="가상 돔 (Virtual DOM)"></a>가상 돔 (Virtual DOM)</h3><p>Real DOM의 상태를 Memory에 저장해서 ReactDOM 등의 Library를 이용해 Real DOM과 동기화 하는 방법</p><h2 id="props-amp-state"><a href="#props-amp-state" class="headerlink" title="props &amp; state"></a>props &amp; state</h2><p>Parent Component에서 Child로 data 전송시</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// parent.js</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">    text: <span class="hljs-string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setText = <span class="hljs-function">(<span class="hljs-params">content = <span class="hljs-string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-comment">// Child가 전달한 content를 state에 반영</span></span><br><span class="line">  <span class="hljs-keyword">this</span>.setState(&#123;</span><br><span class="line">    test: content</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> (</span><br><span class="line">  &lt;Child title=<span class="hljs-string">"Hi"</span> text=&#123;<span class="hljs-keyword">this</span>.setText&#125;&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// child.js</span></span><br><span class="line"><span class="hljs-keyword">export</span> defualt <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123; props.title &#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.props.text(<span class="hljs-string">'test'</span>)&#125;&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>React는 화살표 함수 써야 this 전달 용이</li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/13/React-Basic/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular JWT</title>
      <link>https://sub2n.github.io/2019/07/12/Angular-JWT/</link>
      <guid>https://sub2n.github.io/2019/07/12/Angular-JWT/</guid>
      <pubDate>Fri, 12 Jul 2019 08:00:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Angular-Guard&quot;&gt;&lt;a href=&quot;#Angular-Guard&quot; class=&quot;headerlink&quot; title=&quot;Angular Guard&quot;&gt;&lt;/a&gt;Angular Guard&lt;/h2&gt;&lt;p&gt;로그인에 성공한 사용자만 접속할 수 있는 페이지를 구현해야할 때가 있다. 이런 때에는 Angular Guard를 이용한 Authentication을 한다.&lt;/p&gt;
&lt;p&gt;Guard는 Service의 일종이다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Angular-Guard"><a href="#Angular-Guard" class="headerlink" title="Angular Guard"></a>Angular Guard</h2><p>로그인에 성공한 사용자만 접속할 수 있는 페이지를 구현해야할 때가 있다. 이런 때에는 Angular Guard를 이용한 Authentication을 한다.</p><p>Guard는 Service의 일종이다.</p><a id="more"></a><h3 id="Generate-Guard"><a href="#Generate-Guard" class="headerlink" title="Generate Guard"></a>Generate Guard</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g g Auth</span><br></pre></td></tr></table></figure><ul><li>CanActivate</li></ul><h3 id="AuthGuard"><a href="#AuthGuard" class="headerlink" title="AuthGuard"></a>AuthGuard</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// auth.guard.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Injectable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, CanActivate</span><br><span class="line">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Observable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="hljs-string">'root'</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AuthGuard <span class="hljs-keyword">implements</span> CanActivate &#123;</span><br><span class="line">  <span class="hljs-comment">// canActivate: boolean을 implements 해야함</span></span><br><span class="line">  canActivate() &#123;</span><br><span class="line">    <span class="hljs-comment">// 일단 token 있으면 진입 가능하게 함</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (localStorage.getItem(<span class="hljs-string">'my-token'</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 없으면 login으로 이동하고 return false</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.router.navigate([<span class="hljs-string">'login'</span>]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Guard-적용할-Component"><a href="#Guard-적용할-Component" class="headerlink" title="Guard 적용할 Component"></a>Guard 적용할 Component</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// community-routing.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; NgModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Routes, RouterModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; CommunityComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/community.component'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; PhotoComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/photo.component'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; KnowhowComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/knowhow.component'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; AuthGuard &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../auth.guard'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="hljs-string">'community'</span>, component: CommunityComponent, canActivate: [AuthGuard] &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'community/photo'</span>, component: PhotoComponent &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'community/knowhow'</span>, component: KnowhowComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forChild(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> CommunityRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Angular-JWT-JSON-Web-Authentication"><a href="#Angular-JWT-JSON-Web-Authentication" class="headerlink" title="Angular JWT (JSON Web Authentication)"></a>Angular JWT (JSON Web Authentication)</h2><p>http Protocol은 stateless로, Server는 Client의 상태(state)를 기억하지 않는다. 로그인 유지를 위해서 Client 측에서 Session과 Cookie를 이용했다.</p><p>요즘은 보안을 위해 JWT(JSON Web Token)을 이용한다.</p><ol><li>Browser가 id와 pw로 Server에 login 함</li><li>Server가 Browser로 JWT 전송</li><li>Browser가 Server로 JWT을 Authorization Header에 담아 전송</li><li>Server가 JWT의 signature 확인하고 JWT를 Decoding해서 User Information을 얻는다.</li></ol><p>JWON Web Token은 <code>header.payload.signature</code>로 이루어진다.</p><p>SIgnature는 Header의 encoding 값과 Palyload의 encoding 값을 합쳐 주어진 Private Key로 Hash 해서 생성한다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>SHA256은 네트워크 보안 수업 시간에 공부했던 건데 이렇게 실제로 사용되고 있는 것을 보니 감회가 새롭다.</p>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/12/Angular-JWT/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular Routing</title>
      <link>https://sub2n.github.io/2019/07/10/Angular-Routing/</link>
      <guid>https://sub2n.github.io/2019/07/10/Angular-Routing/</guid>
      <pubDate>Wed, 10 Jul 2019 02:27:49 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;SEO-Search-Engine-Optimization&quot;&gt;&lt;a href=&quot;#SEO-Search-Engine-Optimization&quot; class=&quot;headerlink&quot; title=&quot;SEO(Search Engine Optimization)&quot;&gt;&lt;/a&gt;SEO(Search Engine Optimization)&lt;/h2&gt;&lt;p&gt;SPA(Single Page Application)의 단점으로 부각되는 SEO 문제를 해결하기 위해서 각 page마다 고유한 URL을 부여하는 Routing 기능이 Angular Framework에도 제공한다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Angular-Universal&quot;&gt;&lt;a href=&quot;#Angular-Universal&quot; class=&quot;headerlink&quot; title=&quot;Angular Universal&quot;&gt;&lt;/a&gt;Angular Universal&lt;/h3&gt;&lt;p&gt;SSR(Server Side Rendering)을 할 수 있도록 하는 Angular Module&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Angular-Routing&quot;&gt;&lt;a href=&quot;#Angular-Routing&quot; class=&quot;headerlink&quot; title=&quot;Angular Routing&quot;&gt;&lt;/a&gt;Angular Routing&lt;/h2&gt;&lt;p&gt;Routing은 Source에서 Destination까지의 경로를 결정하는 기능이다.&lt;/p&gt;
&lt;p&gt;Application에서 Routing이란 어떤 View에서 다른 View로 View를 전환하는 Navigation을 관리하는 기능을 의미한다.&lt;/p&gt;
&lt;p&gt;a Element의 &lt;code&gt;href&lt;/code&gt; attribute를 이용하면 브라우저의 주소창 URL이 바뀌며 새로운 html 페이지를 렌더링한다. 이 과정에서 화면 깜빡임이 발생한다. 이를 보완하기 위한 AJAX는 브라우저 주소창의 주소가 변경되지 않아 브라우저의 뒤로가기, 앞으로가기 등의 history 관리가 되지 않는다. 하나의 주소로 동작하는 AJAX 방식은 SEO도 되지 않는다.&lt;/p&gt;
&lt;p&gt;Angular는 위의 문제점을 보완한 2가지의 Location strategy를 제공한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PathLocationStrategy : HTML5 History pushState 기반 Navigation Strategy&lt;/li&gt;
&lt;li&gt;HashLocationStrategy : Hasy 기반 Navigation Strategy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Angular의 Default Location Strategy는 Path Location Strategy이다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="SEO-Search-Engine-Optimization"><a href="#SEO-Search-Engine-Optimization" class="headerlink" title="SEO(Search Engine Optimization)"></a>SEO(Search Engine Optimization)</h2><p>SPA(Single Page Application)의 단점으로 부각되는 SEO 문제를 해결하기 위해서 각 page마다 고유한 URL을 부여하는 Routing 기능이 Angular Framework에도 제공한다. </p><blockquote><h3 id="Angular-Universal"><a href="#Angular-Universal" class="headerlink" title="Angular Universal"></a>Angular Universal</h3><p>SSR(Server Side Rendering)을 할 수 있도록 하는 Angular Module</p></blockquote><h2 id="Angular-Routing"><a href="#Angular-Routing" class="headerlink" title="Angular Routing"></a>Angular Routing</h2><p>Routing은 Source에서 Destination까지의 경로를 결정하는 기능이다.</p><p>Application에서 Routing이란 어떤 View에서 다른 View로 View를 전환하는 Navigation을 관리하는 기능을 의미한다.</p><p>a Element의 <code>href</code> attribute를 이용하면 브라우저의 주소창 URL이 바뀌며 새로운 html 페이지를 렌더링한다. 이 과정에서 화면 깜빡임이 발생한다. 이를 보완하기 위한 AJAX는 브라우저 주소창의 주소가 변경되지 않아 브라우저의 뒤로가기, 앞으로가기 등의 history 관리가 되지 않는다. 하나의 주소로 동작하는 AJAX 방식은 SEO도 되지 않는다.</p><p>Angular는 위의 문제점을 보완한 2가지의 Location strategy를 제공한다.</p><ul><li>PathLocationStrategy : HTML5 History pushState 기반 Navigation Strategy</li><li>HashLocationStrategy : Hasy 기반 Navigation Strategy</li></ul><p>Angular의 Default Location Strategy는 Path Location Strategy이다.</p><a id="more"></a><blockquote><h4 id="Type-Alias"><a href="#Type-Alias" class="headerlink" title="Type Alias"></a>Type Alias</h4><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> Routes = Route[];</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Route type 배열을 Routes type으로 선언하는 것처럼 type 이름 짓는 방식</p></blockquote><h3 id="Routing-Module"><a href="#Routing-Module" class="headerlink" title="Routing Module"></a>Routing Module</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app-routing.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; NgModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Routes, RouterModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  IndexComponent,</span><br><span class="line">  HomeComponent,</span><br><span class="line">  ServiceComponent,</span><br><span class="line">  AboutComponent,</span><br><span class="line">  NotFoundComponent</span><br><span class="line">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./pages'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="hljs-string">''</span>, redirectTo: <span class="hljs-string">'home'</span>, pathMatch: <span class="hljs-string">'full'</span> &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'home'</span>, component: IndexComponent &#125;</span><br><span class="line">  &#123; path: <span class="hljs-string">'service'</span>, component: ServiceComponent &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'about'</span>, component: AboutComponent &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'**'</span>, component: NotFoundComponent &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Routes type의 routes에 <code>path</code>와 <code>component</code> 프로퍼티를 가진 객체를 배열의 원소로 넣어주면 path가 바뀔 때마다 해당 path에 맞는 component를 보여준다.</p><p>path에 <code>/</code> 는 생략한다.</p><p>path <code>**</code>는 wild card로, 위에 설정된 경로가 아닌 모든 경로로 접근할 경우 이동하는 페이지다. 꼭 맨 마지막에 작성해야한다.</p><p><code>redirectTo</code>와 <code>pathMatch: &#39;full&#39;</code>은 path가 정확히 일치할 때 해당 경로로 redirect한다. pathMatch를 설정해주지 않으면 일부만 일치해도 이동하므로 둘을 같이 써주는 것이 좋다.</p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/"</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/home"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/service"</span>&gt;</span>Service<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/about"</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a tag의 <code>href</code> attribute 대신 Angular에서 제공하는 Directive <code>routerLink</code>를 사용해서 path를 지정한다. </p><h3 id="routerLinkActive"><a href="#routerLinkActive" class="headerlink" title="routerLinkActive"></a>routerLinkActive</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/home"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/service"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>Service<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/about"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>정확히 일치하는 routerLink가 Active일 때 설정된 active class가 적용된다.</p><ul><li><p>[routerLinkActiveOptions]=”{ exact: true }”</p><p>path가 정확히 일치할 때만 Active 적용</p></li><li><p>routerLinkActive=”className”</p><p>routerLink가 active되면 설정한 class 활성화</p></li></ul><h3 id="Module-만들기-Tip"><a href="#Module-만들기-Tip" class="headerlink" title="Module 만들기 Tip"></a>Module 만들기 Tip</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g m module-name --routing</span><br></pre></td></tr></table></figure><p>Routing module을 포함한 module을 만들어준다.</p><ul><li><p>모듈 분리시 app.module.ts에서</p><p>import에 AppModule이 가장 밑으로 가게 Module import</p></li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/10/Angular-Routing/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190709-TIL</title>
      <link>https://sub2n.github.io/2019/07/09/190709-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/09/190709-TIL/</guid>
      <pubDate>Tue, 09 Jul 2019 04:05:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;오전에 프로젝트 기능 분석, 컴포넌트 분리에 대해 회의를 진행했다.&lt;/li&gt;
&lt;li&gt;오후에 이력서 특강을 들었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✨&lt;a href=&quot;[https://sub2n.github.io/2019/07/09/190709-TIL/#%EC%9D%B4%EB%A0%A5%EC%84%9C-%ED%8A%B9%EA%B0%95](https://sub2n.github.io/2019/07/09/190709-TIL/#이력서-특강)&quot;&gt;이력서 특강 요약&lt;/a&gt;✨&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>오전에 프로젝트 기능 분석, 컴포넌트 분리에 대해 회의를 진행했다.</li><li>오후에 이력서 특강을 들었다.</li></ul><p>✨<a href="[https://sub2n.github.io/2019/07/09/190709-TIL/#%EC%9D%B4%EB%A0%A5%EC%84%9C-%ED%8A%B9%EA%B0%95](https://sub2n.github.io/2019/07/09/190709-TIL/#이력서-특강)">이력서 특강 요약</a>✨</p><a id="more"></a><h2 id="이력서-특강"><a href="#이력서-특강" class="headerlink" title="이력서 특강"></a>이력서 특강</h2><h3 id="이력서에-담을-내용"><a href="#이력서에-담을-내용" class="headerlink" title="이력서에 담을 내용"></a>이력서에 담을 내용</h3><ul><li>개인 정보 (이름, Contact)</li><li>업무적 강점</li><li>Technology Set</li><li>경력사항</li><li><strong>프로젝트경험</strong><ul><li><strong>주제를 명</strong>확히 작성 (프로젝트 목적 명시)</li><li>완벽한 대규모 프로젝트가 아니라도 괜찮음</li></ul></li><li>자격증, 수상 경력</li><li>학력 및 교육 (온오프라인 단기 교육 포함)<ul><li>교육 <strong>수료증</strong> 첨부 !!</li></ul></li><li>기타활동 (컨퍼런스, 해커톤 등)<ul><li>컨퍼런스나 해커톤 인상적이었던 거 적어놓기</li></ul></li><li>취미<ul><li>영화, 책읽기, 운동 등으로 자기 관리 어필</li></ul></li></ul><h3 id="기본"><a href="#기본" class="headerlink" title="기본"></a>기본</h3><ul><li>맞춤법</li><li>전공이나 개발교육 과정 최근순 작성</li><li>일관성 있는 문장</li></ul><h3 id="꼭-적어야-하는-개인-정보"><a href="#꼭-적어야-하는-개인-정보" class="headerlink" title="꼭 적어야 하는 개인 정보"></a>꼭 적어야 하는 개인 정보</h3><ul><li>연락에 필요한 이메일 주소와 전화번호</li><li>GitHub 계정</li><li>기술 블로그</li></ul><h3 id="쓰지-않는-개인-정보"><a href="#쓰지-않는-개인-정보" class="headerlink" title="쓰지 않는 개인 정보"></a>쓰지 않는 개인 정보</h3><ul><li>사진 필수 아님</li><li>생년월일 주민번호 요구할 때만</li><li>주소는 동까지</li><li>사생활 노출되는 개인 SNS</li><li>가족사항 등 업무와 관련되어 있는 정보</li></ul><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>채용 공고의 키워드 === 내 이력서의 키워드</li><li>지원서에 해당 회사의 에 대한 관심을 표현하고 있는지</li><li>내 강점</li><li>내가 기여할 수 있는 것</li></ul><h2 id="강점"><a href="#강점" class="headerlink" title="강점"></a>강점</h2><ul><li><p>JD에 맞는 인재인가?</p></li><li><p>기여할 수 있는 부분 강조하기</p></li><li><p>업무적 강점을 충분히 설명하고 있나?</p></li><li><p>간략하고 알기 쉽게 표현했나?</p></li><li><p>자신의 개발 성향을 언급했나?</p><ul><li>러닝커브가 짧은 개발자</li><li>테스트코드를 꼼꼼하게 작성하는 개발자</li><li>문서화를 잘하는 개발자</li><li>커뮤니케이션을 잘 하는 개발자</li><li>일정관리를 잘 하는 개발자</li><li>해당 도메인 지식이 많은 개발자</li></ul></li><li><p>개발경력 외의 경력이 있다면 어떻게 활용하면 좋을지?</p></li><li><p><strong>버전 관리의 중요성 이해, GitHub 꼮쓰기</strong></p></li></ul><h4 id="Ex"><a href="#Ex" class="headerlink" title="Ex"></a>Ex</h4><p><img src="https://lh4.googleusercontent.com/uHry1B4BVgOBrU_-v-YUhtCy06MmoOVkjd5d_RjRJBvONo05ocUV9BmJ7skGvH_bwcF5jHQT8gFhChrW8oxRV5i3nlDj_9E1yYeE42_M7dKQDzy8rMKxSlaiRnbD9WbddxQrOfKG6PQ" alt="강점 1"></p><p><img src="https://lh6.googleusercontent.com/4sGOVqM-ANKo66X0_pWsK5JEtp5tnbjHC0TlA6RJVkKY-98XFZstjU9FfU7VtUrfNn7PFh9SISPBPs3eMqFqreD87J-RDeZ-LEqJVhz6lyLAT_RlOUTSDrNSERO5ZxIqihZcZ3Ic9Gw" alt="강점 2"></p><h3 id="SKILL-SET"><a href="#SKILL-SET" class="headerlink" title="SKILL SET"></a>SKILL SET</h3><p><img src="https://lh5.googleusercontent.com/X3bL1Y2337XMcwL4w9BqBG-oSv141sKJT7VF-nll7ttgZNsbsSOftB6IfYi72lAIPQ9zRgK5MzTpjFB9iWTLjqom4Ue8Y19nU-g2q_4wzlze7hkwY90jK199AxIDAgsg-B3bgQBrxLw" alt="Skill Set"></p><p><img src="https://lh4.googleusercontent.com/ETOWulWkEVtRZnvRxs1LoF-NF43n3UlbhS9F4VZr-Um8NiUfmIEq5U1kg7Z3a6j-AJGVboNSFii4UgD6k42iQl6rht5yEjpj6Ux09LcX6jKh2ZaX3I0Wy82-n2ZY-eFCUlEEAkb_d5Y" alt="Visualization"></p><p><img src="https://lh4.googleusercontent.com/UHqlLXdl5QKWZ0R5AyDC29QB8DfCUnGUP1W_AT3bUEZaWfLw7Tn_ZfgpDcJ0QyhUIUVLaXGEOAEOw-k7uD_-d1sc8sdm_gEEM_-dgqNk1IvzBebm2XkQKavm5kVK3TzeG4utkOJzAxM" alt="Description"></p><p><img src="https://lh4.googleusercontent.com/NXAIIceb3tR3U3EqI0NoenY85mgxvRymPGDuzrx2FlB7yQm7yvdxa7NtOTRk8oOt6hb5nqKfJLDPVdLebS9i0mukyz1pJGfuTs99Vh9hB_BE7NK_wfV30hGFyjIohvGHBDrWp_MUJX4" alt="Good Example"></p><ul><li>실력이 부족한 것도 다뤄봤다는 것을 알리면 좋음</li></ul><h3 id="영문-이력서-작성"><a href="#영문-이력서-작성" class="headerlink" title="영문 이력서 작성"></a>영문 이력서 작성</h3><ul><li>front-end junior resume 등으로 검색</li></ul><h2 id="취업-플랫폼"><a href="#취업-플랫폼" class="headerlink" title="취업 플랫폼"></a>취업 플랫폼</h2><ul><li>잡플래닛</li><li>원티드</li><li>잡코리아</li><li>크레딧잡 - 연봉</li></ul><hr><p>✨<a href="bit.ly/fast_resume">이력서 특강 자료</a>✨</p>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/09/190709-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular NgModule</title>
      <link>https://sub2n.github.io/2019/07/08/Angular-NgModule/</link>
      <guid>https://sub2n.github.io/2019/07/08/Angular-NgModule/</guid>
      <pubDate>Mon, 08 Jul 2019 05:10:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Angular의 모듈&lt;/strong&gt;은 &lt;strong&gt;관련이 있는 구성 요소(Com
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><strong>Angular의 모듈</strong>은 <strong>관련이 있는 구성 요소(Component, Directive, Pipe, Service)를 하나의 단위로 묶는 메커니즘</strong></p><p>모듈은 관련이 있는 구성 요소들로 구성된 integrated functional block으로 Application을 구성하는 하나의 단위를 말함</p><p>모듈은 다른 모듈과 결합할 수 있으며 Angular는 여러 모듈을 조합해서 Application을 구성한다.</p><p>초기 속도가 느린 SPA의 단점을 해결하기 위해서 모듈을 분리하고 Lazy Loading하는 방법이 있다.</p><p> Angular는 최소한 하나의 모듈, root Module인 app.module.ts를 갖는다.</p><p>NgModule은 <code>@NgModule</code> Decorator로 장식된 class이다.</p><p><img src="https://poiemaweb.com/img/shared-module.png" alt="Shared module"></p><ul><li><p>Feature Module</p><p>하나의 View 가 하나의 Feature Module</p></li><li><p>Shared Module</p><p>여러 Feature Module에서 import되어 사용되는 Shared Module</p></li><li><p>Core Module</p><p>Application 전체에서 사용하거나 하나의 Feature Module에서 사용하는 Service</p></li></ul><p>Component 하나로만 이루어진 단순한 view여도 view 단위로 모듈을 나누기로 했으면 나눠야함</p><h2 id="NgModule-Decorator"><a href="#NgModule-Decorator" class="headerlink" title="@NgModule Decorator"></a>@NgModule Decorator</h2><h4 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h4><p>Decorator에 전달하는 Metadata는 Angular에 Module code를 어떻게 compile하고 실행할지를 설명한다.</p><h4 id="declarations"><a href="#declarations" class="headerlink" title="declarations"></a>declarations</h4><p>Component, Direcive, Pipe를 선언하면 선언된 구성요소는 Module에서 사용할 수 있다.</p><h4 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h4><p>Module에서 사용하는 다른 Module을 선언한다. Module은 다른 Module를 사용할 수 있다.</p><h4 id="providers"><a href="#providers" class="headerlink" title="providers"></a>providers</h4><p>Injectable object, 즉 Service를 선언한다. Root Module에 선언된 Service는 Application 전역에서 사용할 수 있다.</p><p>최신 버전 Angular에서는 ng generate service로 생성한 service는 @Injectable Decorator의 Metadata에 proviededIn: ‘root’로 들어감</p><h4 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h4><p>CSS Bootstrap 아님</p><p><strong>Root Module에서 사용하는 Property</strong>로 Application의 entry point인 Root Component(AppComponent) 선언</p><h2 id="Shared-Module"><a href="#Shared-Module" class="headerlink" title="Shared Module"></a>Shared Module</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng generate module shared</span><br><span class="line">// ng g m shared</span><br></pre></td></tr></table></figure><p>Shared Module은 Application 전역에서 사용되는 Component, Directive, Pipe 등으로 구성된다.</p><h2 id="Core-Module"><a href="#Core-Module" class="headerlink" title="Core Module"></a>Core Module</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate module core</span><br></pre></td></tr></table></figure><p>Core Module은 Application 전역에서 사용되는 Data Service, Authentication Service, Authentication Guard 등으로 구성된다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; CoreModule&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../core.module.ts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: CoreModule</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/08/Angular-NgModule/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190708-TIL</title>
      <link>https://sub2n.github.io/2019/07/08/190708-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/08/190708-TIL/</guid>
      <pubDate>Mon, 08 Jul 2019 02:37:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h4 id=&quot;TEST&quot;&gt;&lt;a href
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h4><ul><li><p>Wrapper Object</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'string'</span>.length; <span class="hljs-comment">// 6</span></span><br><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-string">'super'</span></span><br><span class="line"><span class="hljs-built_in">String</span>.prototype.sayHi() = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hi'</span>) &#125;;</span><br><span class="line">s.sayHi(); <span class="hljs-comment">// 'Hi</span></span><br></pre></td></tr></table></figure><p>문자열을 객체처럼 사용할 경우 JavaScript 엔진이 순간 String 생성자 함수로 wrapping 한다.</p></li><li><p>Property Key</p><ul><li>Property Key 동적 생성</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> key = <span class="hljs-string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ES5: 프로퍼티 키 동적 생성</span></span><br><span class="line">obj[key] = <span class="hljs-string">'world'</span>;</span><br><span class="line"><span class="hljs-comment">// ES6: 프로퍼티 키 동적 생성</span></span><br><span class="line"><span class="hljs-comment">// var obj = &#123; [key]: 'world' &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;hello: "world"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Property Key는 문자열이나 symbol 값 이외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이 된다. 예를 들어, 프로퍼티 키로 숫자 리터럴을 사용하면 따옴표는 붙지 않지만 내부적으로는 문자열로 변환된다.</li><li>Property Key로 객체를 사용해도 error가 나지 않고 들어감. 배열도 마찬가지<br><img src="https://user-images.githubusercontent.com/48080762/60779497-f8dd2980-a175-11e9-81d6-81dcf643e3f1.png" alt="Property Key"></li><li>객체는 <code>[object Object]</code>라는 String으로 변환된다. obj[string]이 되어야하기 때문에 <code>[]</code> 내부는 문자열로 <strong>강제 형변환</strong>된다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> b = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'b'</span> &#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> c = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'c'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 두 객체 모두 Property key로 쓰일 때 문자열 [object Object]로 변환되어 같은 key가 된다.</span></span><br><span class="line">a[b] = <span class="hljs-number">123</span>;</span><br><span class="line">a[c] = <span class="hljs-number">456</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/60782561-229c4d80-a182-11e9-8ecf-fb17ce339739.png" alt="Object property key"></p><ul><li>Property Key를 중복 선언하면 나중에 선언한 Property가 이전 것을 덮어씀</li></ul></li><li><p>call, apply method는 함수에 this를 전달하고 <strong>호출</strong>하지만 bind는 this를 전달한 <strong>함수를 return</strong>한다.</p></li><li><p>Function literal과 Function declaration statement의 차이</p><ul><li>함수 이름이 있는 함수 선언문은 자바스크립트 엔진이 함수명과 동일한 식별자를 생성하고 생성한 함수 객체를 할당한다.</li><li>함수 이름이 필수가 아닌 함수 리터럴은 그저 평가되어 함수 객체를 생성한다. 이를 괄호로 감싸면 에러 없이 함수 객체가 된다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 즉시 실행 함수로 함수 리터럴을 사용하는 경우</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/08/190708-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>190706-TIL</title>
      <link>https://sub2n.github.io/2019/07/06/190706-TIL/</link>
      <guid>https://sub2n.github.io/2019/07/06/190706-TIL/</guid>
      <pubDate>Sat, 06 Jul 2019 09:15:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Anguler Reac
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>Anguler Reactive Form을 이용해서 Netflix 회원가입과 로그인 Form을 Validation까지 구현했다.</li><li>FastCampus Final Project로 Netflix를 클론하기로 했다.</li><li>CSS 작업은 늘 어렵다. 그래도 transition과 box size를 잘 이용하면 뭐가 되긴 된다..</li></ul><hr><p><a href="https://github.com/Sub2n/Netflix-Signup-exam/tree/develop/src/app/subin" target="_blank" rel="noopener">🎆 Subin Angular Netflix Form</a></p>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/06/190706-TIL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular Form</title>
      <link>https://sub2n.github.io/2019/07/03/Angular-Form/</link>
      <guid>https://sub2n.github.io/2019/07/03/Angular-Form/</guid>
      <pubDate>Wed, 03 Jul 2019 02:11:08 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Angular-Form&quot;&gt;&lt;a href=&quot;#Angular-Form&quot; class=&quot;headerlink&quot; title=&quot;Angular Form&quot;&gt;&lt;/a&gt;Angular Form&lt;/h2&gt;&lt;p&gt;Angular Form은 Template-driven Forms와 Ractive Forms를 제공한다.&lt;/p&gt;
&lt;h4 id=&quot;Template-driven-Forms&quot;&gt;&lt;a href=&quot;#Template-driven-Forms&quot; class=&quot;headerlink&quot; title=&quot;Template-driven Forms&quot;&gt;&lt;/a&gt;Template-driven Forms&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;간단한 form (Form Control 한두개)을 구성할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Reactive-Forms&quot;&gt;&lt;a href=&quot;#Reactive-Forms&quot; class=&quot;headerlink&quot; title=&quot;Reactive Forms&quot;&gt;&lt;/a&gt;Reactive Forms&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;복잡한 form을 구성할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Form은 Client side에서 중요한 역할을 한다. 사용자의 입력을 서버로 전송하고 페이지를 전환할 수 있는 element이다. Server는 많은 Client 요청을 처리하므로 form을 통해서 받은 사용자 입력의 유효성 검사(validation)를 Client side에서 하는 것이 기본이다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Angular-Form"><a href="#Angular-Form" class="headerlink" title="Angular Form"></a>Angular Form</h2><p>Angular Form은 Template-driven Forms와 Ractive Forms를 제공한다.</p><h4 id="Template-driven-Forms"><a href="#Template-driven-Forms" class="headerlink" title="Template-driven Forms"></a>Template-driven Forms</h4><ul><li>간단한 form (Form Control 한두개)을 구성할 때 사용</li></ul><h4 id="Reactive-Forms"><a href="#Reactive-Forms" class="headerlink" title="Reactive Forms"></a>Reactive Forms</h4><ul><li>복잡한 form을 구성할 때 사용</li></ul><p>Form은 Client side에서 중요한 역할을 한다. 사용자의 입력을 서버로 전송하고 페이지를 전환할 수 있는 element이다. Server는 많은 Client 요청을 처리하므로 form을 통해서 받은 사용자 입력의 유효성 검사(validation)를 Client side에서 하는 것이 기본이다.</p><a id="more"></a><h2 id="Template-driven-Forms-1"><a href="#Template-driven-Forms-1" class="headerlink" title="Template-driven Forms"></a>Template-driven Forms</h2><ul><li>Template-driven Form은 Component template에서 Directive를 사용해서 Form을 구성하는 방식</li><li>각 field의 형식이나 validation 검증 규칙을 모두 template에서 정의</li><li>Template-driven Form은 NgForm, NgModel, NgModelGroup Directive 중심으로 동작<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.module.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; FormsModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [FormsModule],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="NgForm-Directive"><a href="#NgForm-Directive" class="headerlink" title="NgForm Directive"></a>NgForm Directive</h3><ul><li><p>Template-driven Form 전체를 관리하는 Directive</p></li><li><p>root module에 FormsModule 추가하면 NgForm Directive 선언하지 않아도 모든 form element에 자동으로 적용되어 Template-driven Form으로 동작</p></li><li><p>HTML standard form의 validation을 사용하지 않고 Template-driven Form의 validation을 사용하려면 아래와 같이 form element에 <code>novalidate</code> Attribute를 추가한다. <strong>최신 Angular는 FormsModule을 import하면 <code>novalidate</code>가 자동으로 추가된다.</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">novalidate</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>반대로 NgForm Directive를 사용하지 않고 HTML standard form을 사용하려면 <code>ngNoForm</code>을 추가한다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">ngNoForm</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h4 id="HTML-Standard-Form과-Template-driven-Form의-차이"><a href="#HTML-Standard-Form과-Template-driven-Form의-차이" class="headerlink" title="HTML Standard Form과 Template-driven Form의 차이"></a>HTML Standard Form과 Template-driven Form의 차이</h4><ul><li><p>HTML Standard Form은 submit button 클릭시 form data를 서버로 전송하고 페이지를 전환</p></li><li><p>NgForm Directive가 적용된 Template-driven Form은 submit event를 Intercept해서 submit의 기본 동작을 막음</p><ul><li>대신 submit시 ngSubmit event를 사용해서 onSubmit event handler 사용</li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-tag">&lt;<span class="hljs-name">form</span> #<span class="hljs-attr">f</span>=<span class="hljs-string">"ngForm"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"onNgSubmit(f)"</span> <span class="hljs-attr">novalidate</span>&gt;</span></span><br><span class="line">&gt; <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><code>#f=&quot;ngForm&quot;</code>으로 Native DOM 대신 NgForm Instance를 Template 참조 변수에 할당한다.</li><li>Native DOM 요소와 다르게 ngForm Instance는 ng-valid, ng-touched 등 유용한 프로퍼티를 제공한다.</li><li>NgForm Directive는 NgForm Instance 생성시 자신이 적용된 Form 요소의 값이나 validation 검증 산태를 추적할 수 있는 FormGroup Instance를 생성한 후 NgForm Instance의  property로 할당한다.</li></ul></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> #<span class="hljs-attr">f</span>=<span class="hljs-string">"ngForm"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"onSubmit(f)"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"email"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">pattern</span>=<span class="hljs-string">"^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">ngModel</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">required</span></span></span><br><span class="line"><span class="hljs-tag">         #<span class="hljs-attr">email</span>=<span class="hljs-string">"ngModel"</span></span></span><br><span class="line"><span class="hljs-tag">         /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"password"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">pattern</span>=<span class="hljs-string">"^[a-zA-Z0-9]&#123;4,10&#125;$"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">ngModel</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">required</span></span></span><br><span class="line"><span class="hljs-tag">         #<span class="hljs-attr">password</span>=<span class="hljs-string">"ngModel"</span></span></span><br><span class="line"><span class="hljs-tag">         /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"f.invalid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Form의 Input 요소들에 <code>ngModel</code>을 추가해야 Form의 Form Control로 등록된다.</p><h2 id="Reactive-Forms-1"><a href="#Reactive-Forms-1" class="headerlink" title="Reactive Forms"></a>Reactive Forms</h2><ul><li>Template이 아닌 Component class에서 form element의 상태를 관리하는 객체인 Form Model을 구성하는 방식</li><li>Template-driven Form 보다 복잡한 form을 구성할 때 사용</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.module.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; ReactiveFormsModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [ReactiveFormsModule],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>Reactive Form은 FormGroup, FormControl, FormArray를 중심으로 동작</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; FormGroup, FormControl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'app-root'</span>,</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;form [formGroup]="userForm"&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="text" placeholder="userid" formControlName="userid" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="password" placeholder="userpw" formControlName="userpw" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;button&gt;Login&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/form&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  styles: []</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent <span class="hljs-keyword">implements</span> OnInit &#123;</span><br><span class="line">  userForm: FormGroup;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">new</span> FormGroup(&#123;</span><br><span class="line">      userid: <span class="hljs-keyword">new</span> FormControl(),</span><br><span class="line">      userpw: <span class="hljs-keyword">new</span> FormControl()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>FormGroup Instance가 template의 form을 관리하도록 mapping</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"userForm"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>FormGroup의 FormControl을 생성해서 input element와 mapping</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"userid"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"userid"</span> /&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"userpw"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"userpw"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>FormControl</p><p><img src="https://user-images.githubusercontent.com/48080762/60700010-2e450580-9f31-11e9-8607-eb9497584ce9.png" alt="FormControl"></p></li><li><p>FormControl 이름으로  getter 만들기</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; FormGroup, FormControl, Validators &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'app-root'</span>,</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;form [formGroup]="userForm"&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="text" placeholder="userid" formControlName="userid" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;em *ngIf="userid.errors?.required &amp;&amp; userid.touched"&gt;아이디를 입력해주세요&lt;/em&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;em *ngIf="userid.errors?.pattern &amp;&amp; userid.touched"&gt;아이디를 형식에 맞게 입력해주세요&lt;/em&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="password" placeholder="userpw" formControlName="userpw" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;button&gt;Login&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/form&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;pre&gt;userForm.value: &#123;&#123; userForm.value | json &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;pre&gt;userForm.valid: &#123;&#123; userForm.valid &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  styles: []</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent <span class="hljs-keyword">implements</span> OnInit &#123;</span><br><span class="line">  userForm: FormGroup;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">new</span> FormGroup(&#123;</span><br><span class="line">      userid: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]),</span><br><span class="line">      userpw: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)])</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.dir(<span class="hljs-keyword">this</span>.userForm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">get</span> userid() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.userForm.get(<span class="hljs-string">'userid'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>비밀번호 확인을 위한 Custom Validation method</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">--!</span> <span class="hljs-attr">template</span> <span class="hljs-attr">--</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">formGroupName</span>=<span class="hljs-string">"passwordGroup"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"password"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"confirm password"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"confirmPassword"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// component.ts</span></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">new</span> FormGroup(&#123;</span><br><span class="line">      userid: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]),</span><br><span class="line">      passwordGroup: <span class="hljs-keyword">new</span> FormGroup(</span><br><span class="line">        &#123;</span><br><span class="line">          password: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [</span><br><span class="line">            Validators.required,</span><br><span class="line">            Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)</span><br><span class="line">          ]),</span><br><span class="line">          confirmPassword: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [</span><br><span class="line">            Validators.required,</span><br><span class="line">            Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)</span><br><span class="line">          ])</span><br><span class="line">        &#125;,</span><br><span class="line">        PasswordValidator.match</span><br><span class="line">      )</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// password-validator.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; AbstractControl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PasswordValidator &#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> match(passwordGroup: AbstractControl) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> password = passwordGroup.get(<span class="hljs-string">'password'</span>).value;</span><br><span class="line">    <span class="hljs-keyword">const</span> confirmPassword = passwordGroup.get(<span class="hljs-string">'confirmPassword'</span>).value;</span><br><span class="line">    <span class="hljs-keyword">return</span> password === confirmPassword ? <span class="hljs-literal">null</span> : &#123; match: &#123; password, confirmPassword &#125; &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>AbstractControl</code> 모든 Control의 조상</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// new FormGroup 대신 FormBuilder 사용 시</span></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">this</span>.fb.group(&#123;</span><br><span class="line">      userid: [<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]],</span><br><span class="line">      passwordGroup: <span class="hljs-keyword">this</span>.fb.group(</span><br><span class="line">        &#123;</span><br><span class="line">          password: [<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]],</span><br><span class="line">          comfirmPassword: [<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; validator: PasswordValidator.match &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://sub2n.github.io/2019/07/03/Angular-Form/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
