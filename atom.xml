<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>수빈 개발블로그</title>
  
  <subtitle>Sub2n Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sub2n.github.io/"/>
  <updated>2019-07-12T08:25:39.592Z</updated>
  <id>https://sub2n.github.io/</id>
  
  <author>
    <name>Subin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular JWT</title>
    <link href="https://sub2n.github.io/2019/07/12/Angular-JWT/"/>
    <id>https://sub2n.github.io/2019/07/12/Angular-JWT/</id>
    <published>2019-07-12T08:00:20.000Z</published>
    <updated>2019-07-12T08:25:39.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Angular-Guard"><a href="#Angular-Guard" class="headerlink" title="Angular Guard"></a>Angular Guard</h2><p>로그인에 성공한 사용자만 접속할 수 있는 페이지를 구현해야할 때가 있다. 이런 때에는 Angular Guard를 이용한 Authentication을 한다.</p><p>Guard는 Service의 일종이다.</p><a id="more"></a><h3 id="Generate-Guard"><a href="#Generate-Guard" class="headerlink" title="Generate Guard"></a>Generate Guard</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g g Auth</span><br></pre></td></tr></table></figure><ul><li>CanActivate</li></ul><h3 id="AuthGuard"><a href="#AuthGuard" class="headerlink" title="AuthGuard"></a>AuthGuard</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// auth.guard.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Injectable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, CanActivate</span><br><span class="line">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Observable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="hljs-string">'root'</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AuthGuard <span class="hljs-keyword">implements</span> CanActivate &#123;</span><br><span class="line">  <span class="hljs-comment">// canActivate: boolean을 implements 해야함</span></span><br><span class="line">  canActivate() &#123;</span><br><span class="line">    <span class="hljs-comment">// 일단 token 있으면 진입 가능하게 함</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (localStorage.getItem(<span class="hljs-string">'my-token'</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 없으면 login으로 이동하고 return false</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.router.navigate([<span class="hljs-string">'login'</span>]);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Guard-적용할-Component"><a href="#Guard-적용할-Component" class="headerlink" title="Guard 적용할 Component"></a>Guard 적용할 Component</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// community-routing.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; NgModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Routes, RouterModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; CommunityComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/community.component'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; PhotoComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/photo.component'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; KnowhowComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/knowhow.component'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; AuthGuard &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../auth.guard'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="hljs-string">'community'</span>, component: CommunityComponent, canActivate: [AuthGuard] &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'community/photo'</span>, component: PhotoComponent &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'community/knowhow'</span>, component: KnowhowComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forChild(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> CommunityRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Angular-JWT-JSON-Web-Authentication"><a href="#Angular-JWT-JSON-Web-Authentication" class="headerlink" title="Angular JWT (JSON Web Authentication)"></a>Angular JWT (JSON Web Authentication)</h2><p>http Protocol은 stateless로, Server는 Client의 상태(state)를 기억하지 않는다. 로그인 유지를 위해서 Client 측에서 Session과 Cookie를 이용했다.</p><p>요즘은 보안을 위해 JWT(JSON Web Token)을 이용한다.</p><ol><li>Browser가 id와 pw로 Server에 login 함</li><li>Server가 Browser로 JWT 전송</li><li>Browser가 Server로 JWT을 Authorization Header에 담아 전송</li><li>Server가 JWT의 signature 확인하고 JWT를 Decoding해서 User Information을 얻는다.</li></ol><p>JWON Web Token은 <code>header.payload.signature</code>로 이루어진다.</p><p>SIgnature는 Header의 encoding 값과 Palyload의 encoding 값을 합쳐 주어진 Private Key로 Hash 해서 생성한다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>SHA256은 네트워크 보안 수업 시간에 공부했던 건데 이렇게 실제로 사용되고 있는 것을 보니 감회가 새롭다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Angular-Guard&quot;&gt;&lt;a href=&quot;#Angular-Guard&quot; class=&quot;headerlink&quot; title=&quot;Angular Guard&quot;&gt;&lt;/a&gt;Angular Guard&lt;/h2&gt;&lt;p&gt;로그인에 성공한 사용자만 접속할 수 있는 페이지를 구현해야할 때가 있다. 이런 때에는 Angular Guard를 이용한 Authentication을 한다.&lt;/p&gt;
&lt;p&gt;Guard는 Service의 일종이다.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular Routing</title>
    <link href="https://sub2n.github.io/2019/07/10/Angular-Routing/"/>
    <id>https://sub2n.github.io/2019/07/10/Angular-Routing/</id>
    <published>2019-07-10T02:27:49.000Z</published>
    <updated>2019-07-12T06:34:47.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SEO-Search-Engine-Optimization"><a href="#SEO-Search-Engine-Optimization" class="headerlink" title="SEO(Search Engine Optimization)"></a>SEO(Search Engine Optimization)</h2><p>SPA(Single Page Application)의 단점으로 부각되는 SEO 문제를 해결하기 위해서 각 page마다 고유한 URL을 부여하는 Routing 기능이 Angular Framework에도 제공한다. </p><blockquote><h3 id="Angular-Universal"><a href="#Angular-Universal" class="headerlink" title="Angular Universal"></a>Angular Universal</h3><p>SSR(Server Side Rendering)을 할 수 있도록 하는 Angular Module</p></blockquote><h2 id="Angular-Routing"><a href="#Angular-Routing" class="headerlink" title="Angular Routing"></a>Angular Routing</h2><p>Routing은 Source에서 Destination까지의 경로를 결정하는 기능이다.</p><p>Application에서 Routing이란 어떤 View에서 다른 View로 View를 전환하는 Navigation을 관리하는 기능을 의미한다.</p><p>a Element의 <code>href</code> attribute를 이용하면 브라우저의 주소창 URL이 바뀌며 새로운 html 페이지를 렌더링한다. 이 과정에서 화면 깜빡임이 발생한다. 이를 보완하기 위한 AJAX는 브라우저 주소창의 주소가 변경되지 않아 브라우저의 뒤로가기, 앞으로가기 등의 history 관리가 되지 않는다. 하나의 주소로 동작하는 AJAX 방식은 SEO도 되지 않는다.</p><p>Angular는 위의 문제점을 보완한 2가지의 Location strategy를 제공한다.</p><ul><li>PathLocationStrategy : HTML5 History pushState 기반 Navigation Strategy</li><li>HashLocationStrategy : Hasy 기반 Navigation Strategy</li></ul><p>Angular의 Default Location Strategy는 Path Location Strategy이다.</p><a id="more"></a><blockquote><h4 id="Type-Alias"><a href="#Type-Alias" class="headerlink" title="Type Alias"></a>Type Alias</h4><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> Routes = Route[];</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Route type 배열을 Routes type으로 선언하는 것처럼 type 이름 짓는 방식</p></blockquote><h3 id="Routing-Module"><a href="#Routing-Module" class="headerlink" title="Routing Module"></a>Routing Module</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app-routing.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; NgModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Routes, RouterModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  IndexComponent,</span><br><span class="line">  HomeComponent,</span><br><span class="line">  ServiceComponent,</span><br><span class="line">  AboutComponent,</span><br><span class="line">  NotFoundComponent</span><br><span class="line">&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./pages'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="hljs-string">''</span>, redirectTo: <span class="hljs-string">'home'</span>, pathMatch: <span class="hljs-string">'full'</span> &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'home'</span>, component: IndexComponent &#125;</span><br><span class="line">  &#123; path: <span class="hljs-string">'service'</span>, component: ServiceComponent &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'about'</span>, component: AboutComponent &#125;,</span><br><span class="line">  &#123; path: <span class="hljs-string">'**'</span>, component: NotFoundComponent &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>Routes type의 routes에 <code>path</code>와 <code>component</code> 프로퍼티를 가진 객체를 배열의 원소로 넣어주면 path가 바뀔 때마다 해당 path에 맞는 component를 보여준다.</p><p>path에 <code>/</code> 는 생략한다.</p><p>path <code>**</code>는 wild card로, 위에 설정된 경로가 아닌 모든 경로로 접근할 경우 이동하는 페이지다. 꼭 맨 마지막에 작성해야한다.</p><p><code>redirectTo</code>와 <code>pathMatch: &#39;full&#39;</code>은 path가 정확히 일치할 때 해당 경로로 redirect한다. pathMatch를 설정해주지 않으면 일부만 일치해도 이동하므로 둘을 같이 써주는 것이 좋다.</p><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/"</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/home"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/service"</span>&gt;</span>Service<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/about"</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a tag의 <code>href</code> attribute 대신 Angular에서 제공하는 Directive <code>routerLink</code>를 사용해서 path를 지정한다. </p><h3 id="routerLinkActive"><a href="#routerLinkActive" class="headerlink" title="routerLinkActive"></a>routerLinkActive</h3><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/home"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/service"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>Service<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span> = <span class="hljs-string">"/about"</span> <span class="hljs-attr">routerLinkActive</span>=<span class="hljs-string">"active"</span> [<span class="hljs-attr">routerLinkActiveOptions</span>]=<span class="hljs-string">"&#123; exact: true &#125;"</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>정확히 일치하는 routerLink가 Active일 때 설정된 active class가 적용된다.</p><ul><li><p>[routerLinkActiveOptions]=”{ exact: true }”</p><p>path가 정확히 일치할 때만 Active 적용</p></li><li><p>routerLinkActive=”className”</p><p>routerLink가 active되면 설정한 class 활성화</p></li></ul><h3 id="Module-만들기-Tip"><a href="#Module-만들기-Tip" class="headerlink" title="Module 만들기 Tip"></a>Module 만들기 Tip</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g m module-name --routing</span><br></pre></td></tr></table></figure><p>Routing module을 포함한 module을 만들어준다.</p><ul><li><p>모듈 분리시 app.module.ts에서</p><p>import에 AppModule이 가장 밑으로 가게 Module import</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SEO-Search-Engine-Optimization&quot;&gt;&lt;a href=&quot;#SEO-Search-Engine-Optimization&quot; class=&quot;headerlink&quot; title=&quot;SEO(Search Engine Optimization)&quot;&gt;&lt;/a&gt;SEO(Search Engine Optimization)&lt;/h2&gt;&lt;p&gt;SPA(Single Page Application)의 단점으로 부각되는 SEO 문제를 해결하기 위해서 각 page마다 고유한 URL을 부여하는 Routing 기능이 Angular Framework에도 제공한다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;Angular-Universal&quot;&gt;&lt;a href=&quot;#Angular-Universal&quot; class=&quot;headerlink&quot; title=&quot;Angular Universal&quot;&gt;&lt;/a&gt;Angular Universal&lt;/h3&gt;&lt;p&gt;SSR(Server Side Rendering)을 할 수 있도록 하는 Angular Module&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Angular-Routing&quot;&gt;&lt;a href=&quot;#Angular-Routing&quot; class=&quot;headerlink&quot; title=&quot;Angular Routing&quot;&gt;&lt;/a&gt;Angular Routing&lt;/h2&gt;&lt;p&gt;Routing은 Source에서 Destination까지의 경로를 결정하는 기능이다.&lt;/p&gt;
&lt;p&gt;Application에서 Routing이란 어떤 View에서 다른 View로 View를 전환하는 Navigation을 관리하는 기능을 의미한다.&lt;/p&gt;
&lt;p&gt;a Element의 &lt;code&gt;href&lt;/code&gt; attribute를 이용하면 브라우저의 주소창 URL이 바뀌며 새로운 html 페이지를 렌더링한다. 이 과정에서 화면 깜빡임이 발생한다. 이를 보완하기 위한 AJAX는 브라우저 주소창의 주소가 변경되지 않아 브라우저의 뒤로가기, 앞으로가기 등의 history 관리가 되지 않는다. 하나의 주소로 동작하는 AJAX 방식은 SEO도 되지 않는다.&lt;/p&gt;
&lt;p&gt;Angular는 위의 문제점을 보완한 2가지의 Location strategy를 제공한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PathLocationStrategy : HTML5 History pushState 기반 Navigation Strategy&lt;/li&gt;
&lt;li&gt;HashLocationStrategy : Hasy 기반 Navigation Strategy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Angular의 Default Location Strategy는 Path Location Strategy이다.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
      <category term="Routing" scheme="https://sub2n.github.io/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>190709-TIL</title>
    <link href="https://sub2n.github.io/2019/07/09/190709-TIL/"/>
    <id>https://sub2n.github.io/2019/07/09/190709-TIL/</id>
    <published>2019-07-09T04:05:20.000Z</published>
    <updated>2019-07-09T09:26:08.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>오전에 프로젝트 기능 분석, 컴포넌트 분리에 대해 회의를 진행했다.</li><li>오후에 이력서 특강을 들었다.</li></ul><p>✨<a href="[https://sub2n.github.io/2019/07/09/190709-TIL/#%EC%9D%B4%EB%A0%A5%EC%84%9C-%ED%8A%B9%EA%B0%95](https://sub2n.github.io/2019/07/09/190709-TIL/#이력서-특강)">이력서 특강 요약</a>✨</p><a id="more"></a><h2 id="이력서-특강"><a href="#이력서-특강" class="headerlink" title="이력서 특강"></a>이력서 특강</h2><h3 id="이력서에-담을-내용"><a href="#이력서에-담을-내용" class="headerlink" title="이력서에 담을 내용"></a>이력서에 담을 내용</h3><ul><li>개인 정보 (이름, Contact)</li><li>업무적 강점</li><li>Technology Set</li><li>경력사항</li><li><strong>프로젝트경험</strong><ul><li><strong>주제를 명</strong>확히 작성 (프로젝트 목적 명시)</li><li>완벽한 대규모 프로젝트가 아니라도 괜찮음</li></ul></li><li>자격증, 수상 경력</li><li>학력 및 교육 (온오프라인 단기 교육 포함)<ul><li>교육 <strong>수료증</strong> 첨부 !!</li></ul></li><li>기타활동 (컨퍼런스, 해커톤 등)<ul><li>컨퍼런스나 해커톤 인상적이었던 거 적어놓기</li></ul></li><li>취미<ul><li>영화, 책읽기, 운동 등으로 자기 관리 어필</li></ul></li></ul><h3 id="기본"><a href="#기본" class="headerlink" title="기본"></a>기본</h3><ul><li>맞춤법</li><li>전공이나 개발교육 과정 최근순 작성</li><li>일관성 있는 문장</li></ul><h3 id="꼭-적어야-하는-개인-정보"><a href="#꼭-적어야-하는-개인-정보" class="headerlink" title="꼭 적어야 하는 개인 정보"></a>꼭 적어야 하는 개인 정보</h3><ul><li>연락에 필요한 이메일 주소와 전화번호</li><li>GitHub 계정</li><li>기술 블로그</li></ul><h3 id="쓰지-않는-개인-정보"><a href="#쓰지-않는-개인-정보" class="headerlink" title="쓰지 않는 개인 정보"></a>쓰지 않는 개인 정보</h3><ul><li>사진 필수 아님</li><li>생년월일 주민번호 요구할 때만</li><li>주소는 동까지</li><li>사생활 노출되는 개인 SNS</li><li>가족사항 등 업무와 관련되어 있는 정보</li></ul><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>채용 공고의 키워드 === 내 이력서의 키워드</li><li>지원서에 해당 회사의 에 대한 관심을 표현하고 있는지</li><li>내 강점</li><li>내가 기여할 수 있는 것</li></ul><h2 id="강점"><a href="#강점" class="headerlink" title="강점"></a>강점</h2><ul><li><p>JD에 맞는 인재인가?</p></li><li><p>기여할 수 있는 부분 강조하기</p></li><li><p>업무적 강점을 충분히 설명하고 있나?</p></li><li><p>간략하고 알기 쉽게 표현했나?</p></li><li><p>자신의 개발 성향을 언급했나?</p><ul><li>러닝커브가 짧은 개발자</li><li>테스트코드를 꼼꼼하게 작성하는 개발자</li><li>문서화를 잘하는 개발자</li><li>커뮤니케이션을 잘 하는 개발자</li><li>일정관리를 잘 하는 개발자</li><li>해당 도메인 지식이 많은 개발자</li></ul></li><li><p>개발경력 외의 경력이 있다면 어떻게 활용하면 좋을지?</p></li><li><p><strong>버전 관리의 중요성 이해, GitHub 꼮쓰기</strong></p></li></ul><h4 id="Ex"><a href="#Ex" class="headerlink" title="Ex"></a>Ex</h4><p><img src="https://lh4.googleusercontent.com/uHry1B4BVgOBrU_-v-YUhtCy06MmoOVkjd5d_RjRJBvONo05ocUV9BmJ7skGvH_bwcF5jHQT8gFhChrW8oxRV5i3nlDj_9E1yYeE42_M7dKQDzy8rMKxSlaiRnbD9WbddxQrOfKG6PQ" alt="강점 1"></p><p><img src="https://lh6.googleusercontent.com/4sGOVqM-ANKo66X0_pWsK5JEtp5tnbjHC0TlA6RJVkKY-98XFZstjU9FfU7VtUrfNn7PFh9SISPBPs3eMqFqreD87J-RDeZ-LEqJVhz6lyLAT_RlOUTSDrNSERO5ZxIqihZcZ3Ic9Gw" alt="강점 2"></p><h3 id="SKILL-SET"><a href="#SKILL-SET" class="headerlink" title="SKILL SET"></a>SKILL SET</h3><p><img src="https://lh5.googleusercontent.com/X3bL1Y2337XMcwL4w9BqBG-oSv141sKJT7VF-nll7ttgZNsbsSOftB6IfYi72lAIPQ9zRgK5MzTpjFB9iWTLjqom4Ue8Y19nU-g2q_4wzlze7hkwY90jK199AxIDAgsg-B3bgQBrxLw" alt="Skill Set"></p><p><img src="https://lh4.googleusercontent.com/ETOWulWkEVtRZnvRxs1LoF-NF43n3UlbhS9F4VZr-Um8NiUfmIEq5U1kg7Z3a6j-AJGVboNSFii4UgD6k42iQl6rht5yEjpj6Ux09LcX6jKh2ZaX3I0Wy82-n2ZY-eFCUlEEAkb_d5Y" alt="Visualization"></p><p><img src="https://lh4.googleusercontent.com/UHqlLXdl5QKWZ0R5AyDC29QB8DfCUnGUP1W_AT3bUEZaWfLw7Tn_ZfgpDcJ0QyhUIUVLaXGEOAEOw-k7uD_-d1sc8sdm_gEEM_-dgqNk1IvzBebm2XkQKavm5kVK3TzeG4utkOJzAxM" alt="Description"></p><p><img src="https://lh4.googleusercontent.com/NXAIIceb3tR3U3EqI0NoenY85mgxvRymPGDuzrx2FlB7yQm7yvdxa7NtOTRk8oOt6hb5nqKfJLDPVdLebS9i0mukyz1pJGfuTs99Vh9hB_BE7NK_wfV30hGFyjIohvGHBDrWp_MUJX4" alt="Good Example"></p><ul><li>실력이 부족한 것도 다뤄봤다는 것을 알리면 좋음</li></ul><h3 id="영문-이력서-작성"><a href="#영문-이력서-작성" class="headerlink" title="영문 이력서 작성"></a>영문 이력서 작성</h3><ul><li>front-end junior resume 등으로 검색</li></ul><h2 id="취업-플랫폼"><a href="#취업-플랫폼" class="headerlink" title="취업 플랫폼"></a>취업 플랫폼</h2><ul><li>잡플래닛</li><li>원티드</li><li>잡코리아</li><li>크레딧잡 - 연봉</li></ul><hr><p>✨<a href="bit.ly/fast_resume">이력서 특강 자료</a>✨</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;오전에 프로젝트 기능 분석, 컴포넌트 분리에 대해 회의를 진행했다.&lt;/li&gt;
&lt;li&gt;오후에 이력서 특강을 들었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;✨&lt;a href=&quot;[https://sub2n.github.io/2019/07/09/190709-TIL/#%EC%9D%B4%EB%A0%A5%EC%84%9C-%ED%8A%B9%EA%B0%95](https://sub2n.github.io/2019/07/09/190709-TIL/#이력서-특강)&quot;&gt;이력서 특강 요약&lt;/a&gt;✨&lt;/p&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Angular NgModule</title>
    <link href="https://sub2n.github.io/2019/07/08/Angular-NgModule/"/>
    <id>https://sub2n.github.io/2019/07/08/Angular-NgModule/</id>
    <published>2019-07-08T05:10:02.000Z</published>
    <updated>2019-07-08T06:17:53.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><strong>Angular의 모듈</strong>은 <strong>관련이 있는 구성 요소(Component, Directive, Pipe, Service)를 하나의 단위로 묶는 메커니즘</strong></p><p>모듈은 관련이 있는 구성 요소들로 구성된 integrated functional block으로 Application을 구성하는 하나의 단위를 말함</p><p>모듈은 다른 모듈과 결합할 수 있으며 Angular는 여러 모듈을 조합해서 Application을 구성한다.</p><p>초기 속도가 느린 SPA의 단점을 해결하기 위해서 모듈을 분리하고 Lazy Loading하는 방법이 있다.</p><p> Angular는 최소한 하나의 모듈, root Module인 app.module.ts를 갖는다.</p><p>NgModule은 <code>@NgModule</code> Decorator로 장식된 class이다.</p><p><img src="https://poiemaweb.com/img/shared-module.png" alt="Shared module"></p><ul><li><p>Feature Module</p><p>하나의 View 가 하나의 Feature Module</p></li><li><p>Shared Module</p><p>여러 Feature Module에서 import되어 사용되는 Shared Module</p></li><li><p>Core Module</p><p>Application 전체에서 사용하거나 하나의 Feature Module에서 사용하는 Service</p></li></ul><p>Component 하나로만 이루어진 단순한 view여도 view 단위로 모듈을 나누기로 했으면 나눠야함</p><h2 id="NgModule-Decorator"><a href="#NgModule-Decorator" class="headerlink" title="@NgModule Decorator"></a>@NgModule Decorator</h2><h4 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h4><p>Decorator에 전달하는 Metadata는 Angular에 Module code를 어떻게 compile하고 실행할지를 설명한다.</p><h4 id="declarations"><a href="#declarations" class="headerlink" title="declarations"></a>declarations</h4><p>Component, Direcive, Pipe를 선언하면 선언된 구성요소는 Module에서 사용할 수 있다.</p><h4 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h4><p>Module에서 사용하는 다른 Module을 선언한다. Module은 다른 Module를 사용할 수 있다.</p><h4 id="providers"><a href="#providers" class="headerlink" title="providers"></a>providers</h4><p>Injectable object, 즉 Service를 선언한다. Root Module에 선언된 Service는 Application 전역에서 사용할 수 있다.</p><p>최신 버전 Angular에서는 ng generate service로 생성한 service는 @Injectable Decorator의 Metadata에 proviededIn: ‘root’로 들어감</p><h4 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h4><p>CSS Bootstrap 아님</p><p><strong>Root Module에서 사용하는 Property</strong>로 Application의 entry point인 Root Component(AppComponent) 선언</p><h2 id="Shared-Module"><a href="#Shared-Module" class="headerlink" title="Shared Module"></a>Shared Module</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng generate module shared</span><br><span class="line">// ng g m shared</span><br></pre></td></tr></table></figure><p>Shared Module은 Application 전역에서 사용되는 Component, Directive, Pipe 등으로 구성된다.</p><h2 id="Core-Module"><a href="#Core-Module" class="headerlink" title="Core Module"></a>Core Module</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate module core</span><br></pre></td></tr></table></figure><p>Core Module은 Application 전역에서 사용되는 Data Service, Authentication Service, Authentication Guard 등으로 구성된다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; CoreModule&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'../core.module.ts'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: CoreModule</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Module&quot;&gt;&lt;a href=&quot;#Module&quot; class=&quot;headerlink&quot; title=&quot;Module&quot;&gt;&lt;/a&gt;Module&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Angular의 모듈&lt;/strong&gt;은 &lt;strong&gt;관련이 있는 구성 요소(Com
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angluar" scheme="https://sub2n.github.io/tags/Angluar/"/>
    
  </entry>
  
  <entry>
    <title>190708-TIL</title>
    <link href="https://sub2n.github.io/2019/07/08/190708-TIL/"/>
    <id>https://sub2n.github.io/2019/07/08/190708-TIL/</id>
    <published>2019-07-08T02:37:45.000Z</published>
    <updated>2019-07-08T04:39:07.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h4><ul><li><p>Wrapper Object</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'string'</span>.length; <span class="hljs-comment">// 6</span></span><br><span class="line"><span class="hljs-keyword">const</span> s = <span class="hljs-string">'super'</span></span><br><span class="line"><span class="hljs-built_in">String</span>.prototype.sayHi() = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hi'</span>) &#125;;</span><br><span class="line">s.sayHi(); <span class="hljs-comment">// 'Hi</span></span><br></pre></td></tr></table></figure><p>문자열을 객체처럼 사용할 경우 JavaScript 엔진이 순간 String 생성자 함수로 wrapping 한다.</p></li><li><p>Property Key</p><ul><li>Property Key 동적 생성</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> key = <span class="hljs-string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ES5: 프로퍼티 키 동적 생성</span></span><br><span class="line">obj[key] = <span class="hljs-string">'world'</span>;</span><br><span class="line"><span class="hljs-comment">// ES6: 프로퍼티 키 동적 생성</span></span><br><span class="line"><span class="hljs-comment">// var obj = &#123; [key]: 'world' &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;hello: "world"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Property Key는 문자열이나 symbol 값 이외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이 된다. 예를 들어, 프로퍼티 키로 숫자 리터럴을 사용하면 따옴표는 붙지 않지만 내부적으로는 문자열로 변환된다.</li><li>Property Key로 객체를 사용해도 error가 나지 않고 들어감. 배열도 마찬가지<br><img src="https://user-images.githubusercontent.com/48080762/60779497-f8dd2980-a175-11e9-81d6-81dcf643e3f1.png" alt="Property Key"></li><li>객체는 <code>[object Object]</code>라는 String으로 변환된다. obj[string]이 되어야하기 때문에 <code>[]</code> 내부는 문자열로 <strong>강제 형변환</strong>된다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> b = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'b'</span> &#125;;</span><br><span class="line"><span class="hljs-keyword">const</span> c = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'c'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 두 객체 모두 Property key로 쓰일 때 문자열 [object Object]로 변환되어 같은 key가 된다.</span></span><br><span class="line">a[b] = <span class="hljs-number">123</span>;</span><br><span class="line">a[c] = <span class="hljs-number">456</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/60782561-229c4d80-a182-11e9-8ecf-fb17ce339739.png" alt="Object property key"></p><ul><li>Property Key를 중복 선언하면 나중에 선언한 Property가 이전 것을 덮어씀</li></ul></li><li><p>call, apply method는 함수에 this를 전달하고 <strong>호출</strong>하지만 bind는 this를 전달한 <strong>함수를 return</strong>한다.</p></li><li><p>Function literal과 Function declaration statement의 차이</p><ul><li>함수 이름이 있는 함수 선언문은 자바스크립트 엔진이 함수명과 동일한 식별자를 생성하고 생성한 함수 객체를 할당한다.</li><li>함수 이름이 필수가 아닌 함수 리터럴은 그저 평가되어 함수 객체를 생성한다. 이를 괄호로 감싸면 에러 없이 함수 객체가 된다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 즉시 실행 함수로 함수 리터럴을 사용하는 경우</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h4 id=&quot;TEST&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190706-TIL</title>
    <link href="https://sub2n.github.io/2019/07/06/190706-TIL/"/>
    <id>https://sub2n.github.io/2019/07/06/190706-TIL/</id>
    <published>2019-07-06T09:15:10.000Z</published>
    <updated>2019-07-06T09:18:17.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>Anguler Reactive Form을 이용해서 Netflix 회원가입과 로그인 Form을 Validation까지 구현했다.</li><li>FastCampus Final Project로 Netflix를 클론하기로 했다.</li><li>CSS 작업은 늘 어렵다. 그래도 transition과 box size를 잘 이용하면 뭐가 되긴 된다..</li></ul><hr><p><a href="https://github.com/Sub2n/Netflix-Signup-exam/tree/develop/src/app/subin" target="_blank" rel="noopener">🎆 Subin Angular Netflix Form</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Anguler Reac
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Angular Form</title>
    <link href="https://sub2n.github.io/2019/07/03/Angular-Form/"/>
    <id>https://sub2n.github.io/2019/07/03/Angular-Form/</id>
    <published>2019-07-03T02:11:08.000Z</published>
    <updated>2019-07-05T10:49:44.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Angular-Form"><a href="#Angular-Form" class="headerlink" title="Angular Form"></a>Angular Form</h2><p>Angular Form은 Template-driven Forms와 Ractive Forms를 제공한다.</p><h4 id="Template-driven-Forms"><a href="#Template-driven-Forms" class="headerlink" title="Template-driven Forms"></a>Template-driven Forms</h4><ul><li>간단한 form (Form Control 한두개)을 구성할 때 사용</li></ul><h4 id="Reactive-Forms"><a href="#Reactive-Forms" class="headerlink" title="Reactive Forms"></a>Reactive Forms</h4><ul><li>복잡한 form을 구성할 때 사용</li></ul><p>Form은 Client side에서 중요한 역할을 한다. 사용자의 입력을 서버로 전송하고 페이지를 전환할 수 있는 element이다. Server는 많은 Client 요청을 처리하므로 form을 통해서 받은 사용자 입력의 유효성 검사(validation)를 Client side에서 하는 것이 기본이다.</p><a id="more"></a><h2 id="Template-driven-Forms-1"><a href="#Template-driven-Forms-1" class="headerlink" title="Template-driven Forms"></a>Template-driven Forms</h2><ul><li>Template-driven Form은 Component template에서 Directive를 사용해서 Form을 구성하는 방식</li><li>각 field의 형식이나 validation 검증 규칙을 모두 template에서 정의</li><li>Template-driven Form은 NgForm, NgModel, NgModelGroup Directive 중심으로 동작<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.module.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; FormsModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [FormsModule],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="NgForm-Directive"><a href="#NgForm-Directive" class="headerlink" title="NgForm Directive"></a>NgForm Directive</h3><ul><li><p>Template-driven Form 전체를 관리하는 Directive</p></li><li><p>root module에 FormsModule 추가하면 NgForm Directive 선언하지 않아도 모든 form element에 자동으로 적용되어 Template-driven Form으로 동작</p></li><li><p>HTML standard form의 validation을 사용하지 않고 Template-driven Form의 validation을 사용하려면 아래와 같이 form element에 <code>novalidate</code> Attribute를 추가한다. <strong>최신 Angular는 FormsModule을 import하면 <code>novalidate</code>가 자동으로 추가된다.</strong></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">novalidate</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>반대로 NgForm Directive를 사용하지 않고 HTML standard form을 사용하려면 <code>ngNoForm</code>을 추가한다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">ngNoForm</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h4 id="HTML-Standard-Form과-Template-driven-Form의-차이"><a href="#HTML-Standard-Form과-Template-driven-Form의-차이" class="headerlink" title="HTML Standard Form과 Template-driven Form의 차이"></a>HTML Standard Form과 Template-driven Form의 차이</h4><ul><li><p>HTML Standard Form은 submit button 클릭시 form data를 서버로 전송하고 페이지를 전환</p></li><li><p>NgForm Directive가 적용된 Template-driven Form은 submit event를 Intercept해서 submit의 기본 동작을 막음</p><ul><li>대신 submit시 ngSubmit event를 사용해서 onSubmit event handler 사용</li></ul></li></ul><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-tag">&lt;<span class="hljs-name">form</span> #<span class="hljs-attr">f</span>=<span class="hljs-string">"ngForm"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"onNgSubmit(f)"</span> <span class="hljs-attr">novalidate</span>&gt;</span></span><br><span class="line">&gt; <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><code>#f=&quot;ngForm&quot;</code>으로 Native DOM 대신 NgForm Instance를 Template 참조 변수에 할당한다.</li><li>Native DOM 요소와 다르게 ngForm Instance는 ng-valid, ng-touched 등 유용한 프로퍼티를 제공한다.</li><li>NgForm Directive는 NgForm Instance 생성시 자신이 적용된 Form 요소의 값이나 validation 검증 산태를 추적할 수 있는 FormGroup Instance를 생성한 후 NgForm Instance의  property로 할당한다.</li></ul></blockquote><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> #<span class="hljs-attr">f</span>=<span class="hljs-string">"ngForm"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"onSubmit(f)"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"email"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">pattern</span>=<span class="hljs-string">"^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">ngModel</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">required</span></span></span><br><span class="line"><span class="hljs-tag">         #<span class="hljs-attr">email</span>=<span class="hljs-string">"ngModel"</span></span></span><br><span class="line"><span class="hljs-tag">         /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"password"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">pattern</span>=<span class="hljs-string">"^[a-zA-Z0-9]&#123;4,10&#125;$"</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">ngModel</span></span></span><br><span class="line"><span class="hljs-tag">         <span class="hljs-attr">required</span></span></span><br><span class="line"><span class="hljs-tag">         #<span class="hljs-attr">password</span>=<span class="hljs-string">"ngModel"</span></span></span><br><span class="line"><span class="hljs-tag">         /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"f.invalid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Form의 Input 요소들에 <code>ngModel</code>을 추가해야 Form의 Form Control로 등록된다.</p><h2 id="Reactive-Forms-1"><a href="#Reactive-Forms-1" class="headerlink" title="Reactive Forms"></a>Reactive Forms</h2><ul><li>Template이 아닌 Component class에서 form element의 상태를 관리하는 객체인 Form Model을 구성하는 방식</li><li>Template-driven Form 보다 복잡한 form을 구성할 때 사용</li></ul><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.module.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; ReactiveFormsModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [ReactiveFormsModule],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>Reactive Form은 FormGroup, FormControl, FormArray를 중심으로 동작</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; FormGroup, FormControl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'app-root'</span>,</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;form [formGroup]="userForm"&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="text" placeholder="userid" formControlName="userid" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="password" placeholder="userpw" formControlName="userpw" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;button&gt;Login&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/form&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  styles: []</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent <span class="hljs-keyword">implements</span> OnInit &#123;</span><br><span class="line">  userForm: FormGroup;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">new</span> FormGroup(&#123;</span><br><span class="line">      userid: <span class="hljs-keyword">new</span> FormControl(),</span><br><span class="line">      userpw: <span class="hljs-keyword">new</span> FormControl()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>FormGroup Instance가 template의 form을 관리하도록 mapping</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"userForm"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>FormGroup의 FormControl을 생성해서 input element와 mapping</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"userid"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"userid"</span> /&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"userpw"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"userpw"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>FormControl</p><p><img src="https://user-images.githubusercontent.com/48080762/60700010-2e450580-9f31-11e9-8607-eb9497584ce9.png" alt="FormControl"></p></li><li><p>FormControl 이름으로  getter 만들기</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; Component, OnInit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; FormGroup, FormControl, Validators &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'app-root'</span>,</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;form [formGroup]="userForm"&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="text" placeholder="userid" formControlName="userid" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;em *ngIf="userid.errors?.required &amp;&amp; userid.touched"&gt;아이디를 입력해주세요&lt;/em&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;em *ngIf="userid.errors?.pattern &amp;&amp; userid.touched"&gt;아이디를 형식에 맞게 입력해주세요&lt;/em&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;input type="password" placeholder="userpw" formControlName="userpw" /&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;button&gt;Login&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/form&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;pre&gt;userForm.value: &#123;&#123; userForm.value | json &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;pre&gt;userForm.valid: &#123;&#123; userForm.valid &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  styles: []</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent <span class="hljs-keyword">implements</span> OnInit &#123;</span><br><span class="line">  userForm: FormGroup;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">new</span> FormGroup(&#123;</span><br><span class="line">      userid: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]),</span><br><span class="line">      userpw: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)])</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">console</span>.dir(<span class="hljs-keyword">this</span>.userForm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">get</span> userid() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.userForm.get(<span class="hljs-string">'userid'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>비밀번호 확인을 위한 Custom Validation method</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">--!</span> <span class="hljs-attr">template</span> <span class="hljs-attr">--</span>&gt;</span>  </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">formGroupName</span>=<span class="hljs-string">"passwordGroup"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"password"</span> /&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"confirm password"</span> <span class="hljs-attr">formControlName</span>=<span class="hljs-string">"confirmPassword"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// component.ts</span></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">new</span> FormGroup(&#123;</span><br><span class="line">      userid: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]),</span><br><span class="line">      passwordGroup: <span class="hljs-keyword">new</span> FormGroup(</span><br><span class="line">        &#123;</span><br><span class="line">          password: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [</span><br><span class="line">            Validators.required,</span><br><span class="line">            Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)</span><br><span class="line">          ]),</span><br><span class="line">          confirmPassword: <span class="hljs-keyword">new</span> FormControl(<span class="hljs-string">''</span>, [</span><br><span class="line">            Validators.required,</span><br><span class="line">            Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)</span><br><span class="line">          ])</span><br><span class="line">        &#125;,</span><br><span class="line">        PasswordValidator.match</span><br><span class="line">      )</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// password-validator.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; AbstractControl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> PasswordValidator &#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> match(passwordGroup: AbstractControl) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> password = passwordGroup.get(<span class="hljs-string">'password'</span>).value;</span><br><span class="line">    <span class="hljs-keyword">const</span> confirmPassword = passwordGroup.get(<span class="hljs-string">'confirmPassword'</span>).value;</span><br><span class="line">    <span class="hljs-keyword">return</span> password === confirmPassword ? <span class="hljs-literal">null</span> : &#123; match: &#123; password, confirmPassword &#125; &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>AbstractControl</code> 모든 Control의 조상</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// new FormGroup 대신 FormBuilder 사용 시</span></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.userForm = <span class="hljs-keyword">this</span>.fb.group(&#123;</span><br><span class="line">      userid: [<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]],</span><br><span class="line">      passwordGroup: <span class="hljs-keyword">this</span>.fb.group(</span><br><span class="line">        &#123;</span><br><span class="line">          password: [<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]],</span><br><span class="line">          comfirmPassword: [<span class="hljs-string">''</span>, [Validators.required, Validators.pattern(<span class="hljs-string">'[a-zA-Z]&#123;4,10&#125;'</span>)]]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; validator: PasswordValidator.match &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Angular-Form&quot;&gt;&lt;a href=&quot;#Angular-Form&quot; class=&quot;headerlink&quot; title=&quot;Angular Form&quot;&gt;&lt;/a&gt;Angular Form&lt;/h2&gt;&lt;p&gt;Angular Form은 Template-driven Forms와 Ractive Forms를 제공한다.&lt;/p&gt;
&lt;h4 id=&quot;Template-driven-Forms&quot;&gt;&lt;a href=&quot;#Template-driven-Forms&quot; class=&quot;headerlink&quot; title=&quot;Template-driven Forms&quot;&gt;&lt;/a&gt;Template-driven Forms&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;간단한 form (Form Control 한두개)을 구성할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Reactive-Forms&quot;&gt;&lt;a href=&quot;#Reactive-Forms&quot; class=&quot;headerlink&quot; title=&quot;Reactive Forms&quot;&gt;&lt;/a&gt;Reactive Forms&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;복잡한 form을 구성할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Form은 Client side에서 중요한 역할을 한다. 사용자의 입력을 서버로 전송하고 페이지를 전환할 수 있는 element이다. Server는 많은 Client 요청을 처리하므로 form을 통해서 받은 사용자 입력의 유효성 검사(validation)를 Client side에서 하는 것이 기본이다.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>190701-TIL</title>
    <link href="https://sub2n.github.io/2019/07/01/190701-TIL/"/>
    <id>https://sub2n.github.io/2019/07/01/190701-TIL/</id>
    <published>2019-07-01T04:08:01.000Z</published>
    <updated>2019-07-01T06:03:37.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-Test"><a href="#Today-Test" class="headerlink" title="Today Test"></a>Today Test</h2><p>[오답]</p><ul><li><p>식별자를 검색했을 때 없으면 ReferenceError지만 <strong>Property를 검색했을 때 없으면</strong> error가 아니고 <strong>undefined를 리턴</strong></p></li><li><p>함수가 아닌 것에 () 붙여 실행하면 TypeError (SyntaxError 아님!!!!!!)</p></li><li><p>undefined 값에 method 실행해도 TypeError</p></li><li><p>typeof 배열은 object</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> args);</span><br><span class="line">&#125;</span><br><span class="line">getAge(<span class="hljs-number">20</span>);</span><br></pre></td></tr></table></figure><ul><li><p><strong>Spread operator …</strong>가 argument에서 사용되면 Object나 Array를 풀어서 함수의 argument로 전달</p></li><li><p><strong>Rest parameter …</strong> 를 사용하면 풀어진 argument를 하나의 배열로 받음</p></li></ul></li><li><p>‘use strict’</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-meta">  'use strict'</span>;</span><br><span class="line">  age = <span class="hljs-number">20</span>;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‘use strict’ mode가 아닐 때는 키워드 없이 선언한 변수를 암묵적 전역 변수로 등록하지만, ‘use strict’ mode에서는 식별자를 찾고 없으면 ReferenceError 발생</p></li></ul><h2 id="Angular-HttpClient"><a href="#Angular-HttpClient" class="headerlink" title="Angular HttpClient"></a>Angular HttpClient</h2><ul><li>어떤 element의 값으로 일을 하고 그 값을 수정해야할 때 ngModel 양방향 바인딩 사용</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-Test&quot;&gt;&lt;a href=&quot;#Today-Test&quot; class=&quot;headerlink&quot; title=&quot;Today Test&quot;&gt;&lt;/a&gt;Today Test&lt;/h2&gt;&lt;p&gt;[오답]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;식별자를 검색했을 때 없으면 R
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190628-TIL</title>
    <link href="https://sub2n.github.io/2019/06/28/190628-TIL/"/>
    <id>https://sub2n.github.io/2019/06/28/190628-TIL/</id>
    <published>2019-06-28T14:07:46.000Z</published>
    <updated>2019-07-01T04:41:20.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FDS12-School-Hackaton"><a href="#FDS12-School-Hackaton" class="headerlink" title="FDS12 School Hackaton"></a>FDS12 School Hackaton</h2><p>패스트캠퍼스에 들어오고 두 번째 해커톤을 마쳤다. 총 10개 팀 중 3개 팀을 수상했는데 우리 팀이 <code>인생을 바꾸는 작은 유용함 상</code>을 수상했다. 각 스쿨의 매니저분들이 엑셀 파일로 학생 관리를 하는 불편함을 해소하고자 학생 관리 툴을 웹으로 옮겼다. 페어 해커톤이 아닌, 전체 스쿨 해커톤으로 백엔드와의 협업을 하고 싶었으나 전날 백엔드 팀이 빠지게 되어 프론트엔드 세명으로만 프로젝트를 진행했다. Angular Form을 사용해서 login 기능을 구현하고 싶었는데 아쉬웠다. 기대가 별로 없었는데 입상을 해서 기분이 좋았다. 앞으로 Final 프로젝트가 하나 남았다.</p><p>✨<a href="https://devpost.com/software/iwam" target="_blank" rel="noopener">IWAM on Devpost</a></p><p>✨<a href="https://github.com/Sub2n/Fastcampus-Student-Managing/tree/develop" target="_blank" rel="noopener">IWAM Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FDS12-School-Hackaton&quot;&gt;&lt;a href=&quot;#FDS12-School-Hackaton&quot; class=&quot;headerlink&quot; title=&quot;FDS12 School Hackaton&quot;&gt;&lt;/a&gt;FDS12 School Hackaton&lt;/
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
      <category term="FDS12" scheme="https://sub2n.github.io/tags/FDS12/"/>
    
      <category term="Hackaton" scheme="https://sub2n.github.io/tags/Hackaton/"/>
    
  </entry>
  
  <entry>
    <title>Angular RxJS</title>
    <link href="https://sub2n.github.io/2019/06/25/Angular-RxJS/"/>
    <id>https://sub2n.github.io/2019/06/25/Angular-RxJS/</id>
    <published>2019-06-25T04:12:23.000Z</published>
    <updated>2019-07-01T07:36:48.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h2><blockquote><p><strong>Reactive Programming is programming with asynchronous data streams.</strong> <strong>You can listen to that stream and react accordingly.</strong></p></blockquote><p><strong>Reactive Programming은 비동기적 데이터 스트림을 처리하는 프로그래밍 패러다임</strong>이다. Data stream이란 연속적인 데이터의 흐름을 말한다. Reactive Programming은 모든 것을 stream으로 본다. Event, AJAX 요청 등 모든 data stream을 시간 순서에 의해 전달되는 stream으로 처리한다.</p><p>최근 참여한 FrontEndgame 컨퍼런스에서 Functional Programming과 Reactive Programming을 융합한 FRP에 대한 발표가 있었는데 이제 Reactive Programming을 공부해본다.</p><a id="more"></a><p>여태까지는 입력받는 Data가 synchronous한지 asynchronous한지에 따라서 처리하는 방법이 달라진다. 입력이 string일 때와 Promise/event 등일 때는 코딩하는 방법이 달라진다. Reactive Programming은 data를 async, sync로 구분하지 않고 data를 stream으로 보는 것이다. Data consumer는 Data producer가 연속적으로 생성하고 방출하는 data stream의 상태 변화에 반응하는 방식으로 동작한다.</p><h2 id="Observable-amp-Observer"><a href="#Observable-amp-Observer" class="headerlink" title="Observable &amp; Observer"></a>Observable &amp; Observer</h2><blockquote><p><strong>An observer subscribes to an Observable. An Observable emits items or sends notifications to its observers by calling the observers’ methods.</strong></p></blockquote><p>Data producer와 Data consumer 사이에 data stream을 전송하는 방법에는 두가지가 있다.</p><ol><li>Pull-scenario: Data consumer가 producer에게 data를 연속적으로 요청해서 획득한다. 이는 애플리케이션이 외부 환경에서 데이터를 끌어오는 방식이다.</li><li>Push-scenario: Data producer가 일정 시간 단위로 계속해서 data를 내보내면(emit) Data consumer가 producer를 관찰하고 있다가 data를 획득한다. 이는 외부 환경에서 애플리케이션으로 데이터를 밀어넣는 방식이다.</li></ol><p><strong>Observable</strong>: 외부 환경에서 애플리케이션 내부로 data stream을 생성하고 emit(방출)하는 객체</p><p><strong>Observer</strong>: Observable이 emit한 Notification(Observable이 emit할 수 있는 push 기반 event 값)을 획득해서 사용하는 객체</p><p>즉 Observer는 Data consumer이고 Observable은 Data producer이다. <strong>Observer는 Observable을 구독(subscribe)한다.</strong> 보통 Observable과 Observer는 일대다 관계를 가진다.</p><p>Observable은 ES7에 제안되어있는 비동기 데이터 처리를 위한 표준으로, Reactive Programming은 Observer pattern을 더 심화한 패턴이다.</p><blockquote><h4 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h4><p><img src="https://poiemaweb.com/img/observer-pattern.png" alt="observer-pattern"></p><p>Subject는 data member로 자신을 관찰하고 있는 Observer의 모음인 ObserverCollection을 유지한다. register/unregister로 Observer를 관리한다. 상태가 변화하면 자신의 ObserverCollection에 등록된 Observer들에게 noftify(status)로 상태 변화를 알린다. 상태 변화를 알리는 notify 메소드 내부에서 Observer의 Update(status)로 상태를 갱신한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span> </span>&#123;</span><br><span class="line">&gt; ObserverCollection = [];</span><br><span class="line">&gt; </span><br><span class="line">&gt; register(Observer) &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>.ObserverCollection = [Observer, ...this.ObserverCollection];</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; unregister(Observer) &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>.ObserverCollection = <span class="hljs-keyword">this</span>.ObserverCollection.filter(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> o !== Observer);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; notify(status) &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>.ObserverCollection.forEach(<span class="hljs-function"><span class="hljs-params">o</span> =&gt;</span> o.update(status));</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySubject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Subject</span> </span>&#123;</span><br><span class="line">&gt;     <span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">super</span>();</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>._state;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;     <span class="hljs-keyword">set</span> state(status) &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>._state = status;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>.notify(<span class="hljs-keyword">this</span>.state);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span> </span>&#123;</span><br><span class="line">&gt;     <span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>.state = <span class="hljs-string">''</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     update(status) &#123;</span><br><span class="line">&gt;       <span class="hljs-keyword">this</span>.state = status;</span><br><span class="line">&gt;       <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.state);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><p>HttpClient의 method를 호출하고 subscribe하지 않으면, 즉 Observable에 대한 Observer가 없으면 아무 일도 일어나지 않는다. subscribe method를 통해서 Observer가 Observable을 바라보게 해야 get Request 등이 동작하기 시작한다.</p><h4 id="json-server-query"><a href="#json-server-query" class="headerlink" title="json server query"></a>json server query</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ?_sort=id&amp;_order=desc</span></span><br><span class="line"><span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> HttpParams()</span><br><span class="line">.set(<span class="hljs-string">'_sort'</span>, <span class="hljs-string">'id'</span>)</span><br><span class="line">.set(<span class="hljs-string">'_order'</span>, <span class="hljs-string">'desc'</span>);</span><br><span class="line"><span class="hljs-keyword">this</span>.http.get&lt;Todo[]&gt;(apiUrl, &#123; params &#125;)</span><br><span class="line">.subscribe(<span class="hljs-function"><span class="hljs-params">todos</span> =&gt;</span> <span class="hljs-keyword">this</span>.todos = todos);</span><br></pre></td></tr></table></figure><h4 id="Cold-Observable-amp-Hot-Observable"><a href="#Cold-Observable-amp-Hot-Observable" class="headerlink" title="Cold Observable &amp; Hot Observable"></a>Cold Observable &amp; Hot Observable</h4><p>subscribe하기 전에는 동작하지 않는 Observable을 Cold Observable이라고 하며  Observer와 일 대 일 unicast 관계를 가진다.</p><p>Hot Observable은 생성과 동시에 subscribe 여부와 상관 없이 바로 data stream을 emit한다. 구독하는 모든 Observer에게 data를 emit하는 multicast이다. RxJS의 Observable은 기본적으로 Cold Observable이다.</p><p>요청이 중복 발생되는 것을 방지하기 위해서 shareReplay()를 사용해 Cold Observable을 Hot Observable로 만들 수 있다.</p><h4 id="HttpIntercepter"><a href="#HttpIntercepter" class="headerlink" title="HttpIntercepter"></a>HttpIntercepter</h4><p>Login이 성공하면 main page로 이동하고, 성공하지 않으면 login page에 머무르는 Application을 생각해보자. 이 때 사용자가 /main으로 main page에 바로 접근할 경우 해당 사용자가 login 완료된 상태인지는 Token으로 검사해야 한다.</p><blockquote><h4 id="JWT-JSON-Wen-Token"><a href="#JWT-JSON-Wen-Token" class="headerlink" title="JWT (JSON Wen Token)"></a>JWT (JSON Wen Token)</h4><p>Authentication에 Token의 유효 기간을 이용하는 방식. Server가 JSON Token을 보내주면 Client 측에서 localStorage 또는 cookie에 담는다.</p></blockquote><p>Login 완료 후 main page로 이동할 때, Routing이 발생할 때마다 Token을 header에 담아서 보내는 처리가 필요하다. 그러나 매번 header를 setting하기가 번거로우므로  HttpIntercepter를 사용하면 HTTP Request 전후에 특정 기능을 실행할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reactive-Programming&quot;&gt;&lt;a href=&quot;#Reactive-Programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive Programming&quot;&gt;&lt;/a&gt;Reactive Programming&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reactive Programming is programming with asynchronous data streams.&lt;/strong&gt; &lt;strong&gt;You can listen to that stream and react accordingly.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reactive Programming은 비동기적 데이터 스트림을 처리하는 프로그래밍 패러다임&lt;/strong&gt;이다. Data stream이란 연속적인 데이터의 흐름을 말한다. Reactive Programming은 모든 것을 stream으로 본다. Event, AJAX 요청 등 모든 data stream을 시간 순서에 의해 전달되는 stream으로 처리한다.&lt;/p&gt;
&lt;p&gt;최근 참여한 FrontEndgame 컨퍼런스에서 Functional Programming과 Reactive Programming을 융합한 FRP에 대한 발표가 있었는데 이제 Reactive Programming을 공부해본다.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Reactive Programming" scheme="https://sub2n.github.io/tags/Reactive-Programming/"/>
    
      <category term="Observable" scheme="https://sub2n.github.io/tags/Observable/"/>
    
  </entry>
  
  <entry>
    <title>Angular Service &amp; Dependency Injection</title>
    <link href="https://sub2n.github.io/2019/06/25/Angular-Service-Dependency-Injection/"/>
    <id>https://sub2n.github.io/2019/06/25/Angular-Service-Dependency-Injection/</id>
    <published>2019-06-25T04:12:04.000Z</published>
    <updated>2019-06-25T06:17:25.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>Component는 View를 구성하고 관리하는 역할을 해야한다. 그러나 View를 구성하다보면 필요한 데이터를 가져오기 위해서 서버와 통신을 하는 등의 부가 기능이 필요하게 된다. 이런 기능을 Component에서 하지 않고 Service로 분리한다.</p><p>Component의 관심사와 Application 전역의 관심사를 분리하는 것이다. 이렇게 기능을 분리하면 Application의 복잡도가 낮아지고 서비스를 재사용할 수 있다. 또한 의존도가 낮아져 유지보수성이 좋아진다.</p><a id="more"></a><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>Service는 Dependency Injection이 가능한 class이다. @Injectable 데코레이터로 정의한다.</p><p>Dependency Injection이란 말 그대로 의존성(dependency)을 주입(inject)한다는 것이다.</p><p>어떤 Component에서 Service의 method를 사용하는 경우 둘은 <strong>의존 관계(Dependency relationship)</strong>에 있다고 한다. Component 내부에서 Service class의 instance를 생성하는 경우 둘은 <strong>강한 결합(Tight Coupling)</strong>을 하고 있는 것이다. 반면 Component에서 직접 Service를 생성하는 것이 아니라 constructor의 parameter로 선언하여 Angular가 생성한 Service instance를 주입받는 것은 <strong>느슨한 결합(Loose Coupling)</strong>이다.</p><p> Tight Coupling은 많은 문제를 일으킨다. 하나의 Service의 생성 방법 등에 변동이 있을 경우 해당 Service와 의존 관계에 있는 모든 Component가 영향을 받는다. </p><p>재사용과 유지보수가 효율적인 프로그램을 만들기 위해서는 객체 사이의 <strong>의존 관계를 최소화</strong>해야 한다. 필요에 의해 의존 관계가 있을 경우 Tight Coupling은 지양해야 한다.</p><p>Dependency Injection은 Design pattern 중 하나로, tight coupling에서 loose coupling으로 전환하는 방법이다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">class</span> A &#123;</span><br><span class="line">  <span class="hljs-comment">// dependency의 instance를 직접 생성하지 않고 외부 환경에 요구</span></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> dependency: B</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  foo() &#123; <span class="hljs-keyword">this</span>.dependency.bar(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">class</span> B &#123;</span><br><span class="line">  bar() &#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar'</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A class처럼 constructor에서 instance를 parameter로 받는 경우, A class에서는 해당 instance의 생성 방법을 알 필요가 없다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// greeting.service.ts</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Injectable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Injectable</span>(&#123;</span><br><span class="line">  providedIn: <span class="hljs-string">'root'</span> <span class="hljs-comment">/* @Injectable 프로바이더 */</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> GreetingService &#123;</span><br><span class="line">  sayHi() &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">'Hi!'</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Angular에서 Dependency Injection을 받기 위해서는 @Injectable 데코레이터에 meta data로 <code>providedIn: &#39;root&#39;</code>를 설정해야 한다. 해당 선언이 된 Service는 전역에서 Injectable하다.</p><p>또는 해당 Service를 주입받을 Component에서 @Compinent 데코레이터에 meta data로 <code>providers: [GreetingService]</code>를 설정해주면 된다. 이 Component를 포함한 Child component 들에서만 Injectable하다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Service&quot;&gt;&lt;a href=&quot;#Service&quot; class=&quot;headerlink&quot; title=&quot;Service&quot;&gt;&lt;/a&gt;Service&lt;/h2&gt;&lt;p&gt;Component는 View를 구성하고 관리하는 역할을 해야한다. 그러나 View를 구성하다보면 필요한 데이터를 가져오기 위해서 서버와 통신을 하는 등의 부가 기능이 필요하게 된다. 이런 기능을 Component에서 하지 않고 Service로 분리한다.&lt;/p&gt;
&lt;p&gt;Component의 관심사와 Application 전역의 관심사를 분리하는 것이다. 이렇게 기능을 분리하면 Application의 복잡도가 낮아지고 서비스를 재사용할 수 있다. 또한 의존도가 낮아져 유지보수성이 좋아진다.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
      <category term="Service" scheme="https://sub2n.github.io/tags/Service/"/>
    
      <category term="Dependency Injection" scheme="https://sub2n.github.io/tags/Dependency-Injection/"/>
    
  </entry>
  
  <entry>
    <title>190624-TIL</title>
    <link href="https://sub2n.github.io/2019/06/25/190624-TIL/"/>
    <id>https://sub2n.github.io/2019/06/25/190624-TIL/</id>
    <published>2019-06-25T04:06:03.000Z</published>
    <updated>2019-06-25T04:07:28.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>ToastUI를 JavaScript와 Angular로 구현했다.</li><li>window.pageYOffset은 wiondow.scrollY보다 cross browsing에 적합(IE 9 지원)하므로 pageYOffset을 사용하는 게 좋다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ToastUI를 Jav
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Angular Directive</title>
    <link href="https://sub2n.github.io/2019/06/24/Angular-Directive/"/>
    <id>https://sub2n.github.io/2019/06/24/Angular-Directive/</id>
    <published>2019-06-24T06:28:00.000Z</published>
    <updated>2019-06-25T04:13:52.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Directive"><a href="#Directive" class="headerlink" title="Directive"></a>Directive</h2><p>Directive는 DOM의 모양이나 동작 등을 관리하기 위한 명령이다. HTML Element 또는 Attribute 형태로 사용한다.</p><p>Directive를 사용하는 HTML Element를 Directive 내에서 Host element라고 부르며, Directive 내부에서 host element의 event를 처리하거나 style 등을 변경할 수 있다.</p><a id="more"></a><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'[textBlue]'</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> TextBlueDirective &#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> el: ElementRef, <span class="hljs-keyword">public</span> renderer: Renderer2</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-meta">@HostListener</span>(<span class="hljs-string">'mouseenter'</span>) onMouse() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setColor(<span class="hljs-string">'blue'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-meta">@HostListener</span>(<span class="hljs-string">'mouseleave'</span>) offMouse() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setColor(<span class="hljs-literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.renderer.setStyle(<span class="hljs-keyword">this</span>.el.nativeElement, <span class="hljs-string">'color'</span>, color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Directive class의 constructor에서 주입된 parameter는 class의 class field가 되어 class 전역에서 사용할 수 있다. 이를 constructor에 ElementRef instance가 Dependency Intect(의존성 주입)되었다고 한다.</p><ul><li><p>@Directive : meta data 객체에 Directive에 필요한 정보(selector등)를 입력한다.</p><table><thead><tr><th align="left">selector property</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left">selector: ‘foo’</td><td align="left">foo element에 Directive가 적용된다.</td></tr><tr><td align="left">selector: ‘.foo’</td><td align="left">.foo class가 선언된 element에 Directive가 적용된다.</td></tr><tr><td align="left">selector: [foo]</td><td align="left">foo attribute가 선언된 element에 Directive가 적용된다.</td></tr><tr><td align="left">selector: [foo=bar]</td><td align="left">foo attribute의 값이 bar로 선언된 element에 Directive가 적용된다.</td></tr><tr><td align="left">selector: :not(foo)</td><td align="left">foo element를 제외한 모든 element에 Directive가 적용된다.</td></tr><tr><td align="left">selector: ‘foo, bar’</td><td align="left">foo 또는 bar element에 Directive가 적용된다.</td></tr></tbody></table><p>Directive의 selector는 attribute로 이용하는 것이 일반적이다. Component는 Directive를 상속받은 것으로 selector 규칙이 동일하게 적용된다.</p></li><li><p>ElementRef: host element를 감싼 wrapper object</p></li><li><p>el.nativeElement: host element</p></li><li><p>Renderer2: Angular에서는 el.nativeElement의 style 프로퍼티를 직접 변경하는 것이 아니라 Renderer2를 이용하는 것이 권장된다.</p></li><li><p>@HostListener : host element에서 발생한 event에 대한 event listener를 정의할 때 사용하는 데코레이터.</p></li></ul><h3 id="Directive로-data-보내기-property-binding"><a href="#Directive로-data-보내기-property-binding" class="headerlink" title="Directive로 data 보내기 | property binding"></a>Directive로 data 보내기 | property binding</h3><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'app-root'</span>,</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;!--The content below is only a placeholder and can be replaced.--&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p [color]="color" textColor&gt;Hello&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  styles: []</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent &#123;</span><br><span class="line">  color = <span class="hljs-string">'red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// text-color.directive.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="hljs-string">'[textColor]'</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> TextColorDirective &#123;</span><br><span class="line">  <span class="hljs-meta">@Input</span>() color: <span class="hljs-built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> el: ElementRef, <span class="hljs-keyword">public</span> renderer: Renderer2</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-meta">@HostListener</span>(<span class="hljs-string">'mouseenter'</span>) onMouse() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setColor(<span class="hljs-keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-meta">@HostListener</span>(<span class="hljs-string">'mouseleave'</span>) offMouse() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.setColor(<span class="hljs-literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.renderer.setStyle(<span class="hljs-keyword">this</span>.el.nativeElement, <span class="hljs-string">'color'</span>, color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Directive&quot;&gt;&lt;a href=&quot;#Directive&quot; class=&quot;headerlink&quot; title=&quot;Directive&quot;&gt;&lt;/a&gt;Directive&lt;/h2&gt;&lt;p&gt;Directive는 DOM의 모양이나 동작 등을 관리하기 위한 명령이다. HTML Element 또는 Attribute 형태로 사용한다.&lt;/p&gt;
&lt;p&gt;Directive를 사용하는 HTML Element를 Directive 내에서 Host element라고 부르며, Directive 내부에서 host element의 event를 처리하거나 style 등을 변경할 수 있다.&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>190622-TIL</title>
    <link href="https://sub2n.github.io/2019/06/22/190622-TIL/"/>
    <id>https://sub2n.github.io/2019/06/22/190622-TIL/</id>
    <published>2019-06-22T10:13:26.000Z</published>
    <updated>2019-06-25T06:41:33.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>Front Endgame 컨퍼런스에 갔다왔다.</li><li>Angular와 React에 대한 정보를 많이 얻었다.</li><li>현직 프론트엔드 개발자들이 어떤 식으로 일 하는지 들을 수 있어 좋았다.</li></ul><hr><ul><li>앵귤러 공부 위해서</li></ul><ol><li>디렉티브 등 템플릿 문법 숙지해야함</li><li>RxJS 공부해야함</li></ol><ul><li><p>RxJS 는 비동기적 데이터 흐름을 한 곳에서 조작할 수 있음</p></li><li><p>Dependency Injection으로 다형성</p></li><li><p>UX</p><ol><li>예상 가능한 동작</li></ol><ul><li>뒤로가기시 스크롤 복원</li><li>모바일 Thumbs zone</li></ul><ol start="2"><li>SEO/SMO</li></ol></li><li><p>Observable 공부하기</p></li><li><p>도서</p><ul><li>하스켈로 배우는 함수형 프로그래밍</li><li>클린 코드</li><li>실용주의 프로그래머</li><li>프로그래밍 심리학</li></ul></li><li><p>함수형 프로그래밍이 왜 CPU보다 메모리를 많이 쓰는지 알기</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Front Endgam
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Angular Pipe</title>
    <link href="https://sub2n.github.io/2019/06/21/Angular-Pipe/"/>
    <id>https://sub2n.github.io/2019/06/21/Angular-Pipe/</id>
    <published>2019-06-21T05:16:51.000Z</published>
    <updated>2019-06-21T07:34:36.071Z</updated>
    
    <content type="html"><![CDATA[<p>AngularJS에는 60여개의 built-in Pipe가 있었으나 Angular는 9개의 built-in pipe를 지원한다. 나머지 기능은 pipe를 직접 구현하여 사용할 수 있다.</p><table><thead><tr><th align="left">pipe</th><th align="left">meaning</th></tr></thead><tbody><tr><td align="left"><a href="https://angular.io/api/common/DatePipe" target="_blank" rel="noopener">date</a></td><td align="left">날짜 형식 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/JsonPipe" target="_blank" rel="noopener">json</a></td><td align="left">JSON 형식 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/UpperCasePipe" target="_blank" rel="noopener">uppercase</a></td><td align="left">대문자 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/LowerCasePipe" target="_blank" rel="noopener">lowercase</a></td><td align="left">소문자 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/CurrencyPipe" target="_blank" rel="noopener">currency</a></td><td align="left">통화 형식 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/PercentPipe" target="_blank" rel="noopener">percent</a></td><td align="left">퍼센트 형식 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/DecimalPipe" target="_blank" rel="noopener">decimal</a></td><td align="left">자리수 형식 변환</td></tr><tr><td align="left"><a href="https://angular.io/api/common/SlicePipe" target="_blank" rel="noopener">slice</a></td><td align="left">문자열 추출</td></tr><tr><td align="left"><a href="https://angular.io/api/common/AsyncPipe" target="_blank" rel="noopener">async</a></td><td align="left">비동기 객체 출력</td></tr></tbody></table><a id="more"></a><p>new Date() 등으로 생성한 객체에 pipe를 사용하면 깔끔한 형식으로 출력할 수 있다.</p><p>객체 배열 형식으로 된 data를 확인하며 코딩할 때 <code>&lt;pre&gt;{ data | json }&lt;/pre&gt;</code>로 data를 확인할 수 있다.</p><p>Category가 있는 경우 category 별로 filtering해서 데이터를 보여줄 수도 있다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// filter.pipe.ts</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Pipe</span>(&#123;</span><br><span class="line">  name: <span class="hljs-string">'filter'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> FilterPipe <span class="hljs-keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  transform(todos: Todo[], active: NavItem): <span class="hljs-built_in">any</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (active === <span class="hljs-string">'All'</span>) <span class="hljs-keyword">return</span> todos;</span><br><span class="line">    <span class="hljs-keyword">return</span> active === <span class="hljs-string">'Active'</span></span><br><span class="line">      ? todos.filter(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> !todo.completed)</span><br><span class="line">      : todos.filter(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.completed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- todos.component.html --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let todo of (todos | filter: navState)"</span>&gt;</span></span><br><span class="line">  ....</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Angular는 template을 렌더링할 때 사용하는 data의 Reference value가 바뀌어야 상태 감지를 해서 재렌더링을 하며 pipe를 실행한다. 따라서 상태가 변경될 때는 명시적으로 재할당을 해주는 게 좋다. 재할당을 하지 않고 일부분만을 변경할 경우 pipe에 option을 주어야 한다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ Pipe(&#123;</span><br><span class="line">  name: <span class="hljs-string">'filter'</span>,</span><br><span class="line">  pure: <span class="hljs-literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>pure: false</code> option을 주면 Reference value가 바뀌지 않더라도 상태를 감지하지만 퍼포먼스가 안 좋아진다. 재할당을 하자.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AngularJS에는 60여개의 built-in Pipe가 있었으나 Angular는 9개의 built-in pipe를 지원한다. 나머지 기능은 pipe를 직접 구현하여 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;pipe&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/DatePipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;date&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;날짜 형식 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/JsonPipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;json&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;JSON 형식 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/UpperCasePipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uppercase&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;대문자 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/LowerCasePipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lowercase&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;소문자 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/CurrencyPipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;currency&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;통화 형식 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/PercentPipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;percent&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;퍼센트 형식 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/DecimalPipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;decimal&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;자리수 형식 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/SlicePipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;slice&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;문자열 추출&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://angular.io/api/common/AsyncPipe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;async&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;비동기 객체 출력&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
      <category term="Pipe" scheme="https://sub2n.github.io/tags/Pipe/"/>
    
  </entry>
  
  <entry>
    <title>190619-TIL</title>
    <link href="https://sub2n.github.io/2019/06/19/190619-TIL/"/>
    <id>https://sub2n.github.io/2019/06/19/190619-TIL/</id>
    <published>2019-06-19T07:34:38.000Z</published>
    <updated>2019-06-19T07:37:20.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>Angular 계층적 구조를 가진 Component 간의 Data 통신을 Service로 한다는 것을 알았다.</li><li>Angular의 Service는 전체 프로그램에서 하나의 Instance만을 가지는 Singleton이기 때문에 상태 관리가 가능하다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Angular 계층적 
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190618-TIL</title>
    <link href="https://sub2n.github.io/2019/06/18/190618-TIL/"/>
    <id>https://sub2n.github.io/2019/06/18/190618-TIL/</id>
    <published>2019-06-18T08:47:42.000Z</published>
    <updated>2019-06-18T08:51:01.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>Angular로 AnalogClock과 StopWatch를 구현했다.</li><li>Angular Built-in Directive에 대해서 배웠다.</li><li>부모-자식 Component간 통신을 이용해서 simpleTodo를 구현했다.</li><li>자식 &gt; 부모 Component로 Data를 보낼 때는 @Output() 에 EventEmmitter의 instance로 event를 발생시킨다. emit()을 호출해야 event가 발생한다.</li><li>부모 &gt; 자식 Compinent로 Data를 보낼 때는 부모 Component에서 자식 Component로 Property binding을 하는 방식으로 Data를 보낸다. 자식 Compinent는 해당 프로퍼티를 @Input()으로 정의하고 값을 받는다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Angular로 Ana
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Angular Built-in Directive</title>
    <link href="https://sub2n.github.io/2019/06/18/Angular-Built-in-Directive/"/>
    <id>https://sub2n.github.io/2019/06/18/Angular-Built-in-Directive/</id>
    <published>2019-06-18T04:24:13.000Z</published>
    <updated>2019-06-21T06:42:11.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Directive"><a href="#What-is-Directive" class="headerlink" title="What is Directive?"></a>What is Directive?</h2><p>지시, 명령. View에 관련한 명령을 내리는 모든 것을 directive라고 한다.</p><p>Component의 공통된 기능을 외부로 내보낸다.</p><blockquote><h4 id="Dependency-Injective"><a href="#Dependency-Injective" class="headerlink" title="Dependency Injective"></a>Dependency Injective</h4><p>type 지정하면 Angular가 class Instance를 생성한다.</p></blockquote><a id="more"></a><h3 id="Component-Directive"><a href="#Component-Directive" class="headerlink" title="Component Directive"></a>Component Directive</h3><p>Component의 템플릿 표시를 위한 Directive.  @Component</p><h3 id="Attribute-Directive"><a href="#Attribute-Directive" class="headerlink" title="Attribute Directive"></a>Attribute Directive</h3><p>ngClass, ngStyle 등</p><h4 id="ngClass"><a href="#ngClass" class="headerlink" title="ngClass"></a>ngClass</h4><p>여러 개의 Class를 추가하고 제거할 때 간편하다. String, Array, Object 형태로 바인딩할 수 있다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">ngClass</span>] = <span class="hljs-string">"'active red'"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- string --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">ngClass</span>] = <span class="hljs-string">""</span>['<span class="hljs-attr">active</span>', '<span class="hljs-attr">red</span>']"&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- array --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">ngClass</span>] = <span class="hljs-string">"&#123;'active': true, 'red': false&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- object --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ngStyle"><a href="#ngStyle" class="headerlink" title="ngStyle"></a>ngStyle</h4><p>여러 개의 Inline Style을 추가하고 제거한다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">ngStyle</span>]=<span class="hljs-string">"&#123; color: 'red', 'width.px': 100 &#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="Host-Element"><a href="#Host-Element" class="headerlink" title="Host Element"></a>Host Element</h4><p>Attribute가 사용된 Element</p></blockquote><h3 id="Structural-Directives"><a href="#Structural-Directives" class="headerlink" title="Structural Directives"></a>Structural Directives</h3><p>구조 디렉티브는 DOM 요소를 조건에 따라서 추가/삭제(ngIf, ngSwitch)하거나 반복 생성(ngFor)할 때 사용한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-Directive&quot;&gt;&lt;a href=&quot;#What-is-Directive&quot; class=&quot;headerlink&quot; title=&quot;What is Directive?&quot;&gt;&lt;/a&gt;What is Directive?&lt;/h2&gt;&lt;p&gt;지시, 명령. View에 관련한 명령을 내리는 모든 것을 directive라고 한다.&lt;/p&gt;
&lt;p&gt;Component의 공통된 기능을 외부로 내보낸다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;Dependency-Injective&quot;&gt;&lt;a href=&quot;#Dependency-Injective&quot; class=&quot;headerlink&quot; title=&quot;Dependency Injective&quot;&gt;&lt;/a&gt;Dependency Injective&lt;/h4&gt;&lt;p&gt;type 지정하면 Angular가 class Instance를 생성한다.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>190617-TIL</title>
    <link href="https://sub2n.github.io/2019/06/17/190617-TIL/"/>
    <id>https://sub2n.github.io/2019/06/17/190617-TIL/</id>
    <published>2019-06-17T08:46:05.000Z</published>
    <updated>2019-06-17T08:47:36.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li>Angular Component의 Data Binding에 대해서 배웠다.</li><li>Angular의 ngFor와 ngIf Directive를 적용해서 TabsUI를 구현해봤다.</li><li>Angular 문법이 아직 익숙하지는 않은데 재미있다. 생각을 전환하기가 쉽지 않다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Angular Comp
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Angular Data Binding</title>
    <link href="https://sub2n.github.io/2019/06/17/Angular-Data-Binding/"/>
    <id>https://sub2n.github.io/2019/06/17/Angular-Data-Binding/</id>
    <published>2019-06-17T05:35:22.000Z</published>
    <updated>2019-06-21T06:42:28.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h2><p><code></code></p><h2 id="Property-Binding"><a href="#Property-Binding" class="headerlink" title="Property Binding"></a>Property Binding</h2><p><code>[propertyName] = &quot;expression&quot;</code></p><p><code>&quot; &quot;</code> 내부에는 string이 아니라 expression(표현식)이 오는 곳이므로 주의하자.</p><blockquote><h4 id="Attribute-and-Property"><a href="#Attribute-and-Property" class="headerlink" title="Attribute and Property"></a>Attribute and Property</h4><p>Attribute는 HTML Element의 attribute이고 Property는 DOM node object인 HTML Element 객체의 property이다. 초기에 HTML Attribute가 초기값으로 그려지고 Property는 실시간으로 변경되는 DOM 최신값을 반영한다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Initial Value"</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"Property Value"</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>앞의 value는 attribute이고 [value]는 property이다. Property는 최신값이므로 실행시 “Property Value”가 view에 보여지게 된다.</p></blockquote><a id="more"></a><h2 id="Attribute-Binding"><a href="#Attribute-Binding" class="headerlink" title="Attribute Binding"></a>Attribute Binding</h2><p><code>[attr.attName] = &quot;expression&quot;</code></p><p>Property와 달리 <code>attr.</code>를 붙여줘야 한다.</p><p>HTML Element의 Property와 Attribute는 항상 1 대 1로 대응하지 않는다. HTML Element 별로 어떤 Attribute와 Property가 있는지 알고 있어야 한다.</p><h2 id="Class-Binding"><a href="#Class-Binding" class="headerlink" title="Class Binding"></a>Class Binding</h2><p>Class binding은 2가지 방법으로 사용할 수 있다. </p><h5 id="class-className-quot-expression-quot"><a href="#class-className-quot-expression-quot" class="headerlink" title="[class.className] = &quot;expression&quot;"></a><code>[class.className] = &quot;expression&quot;</code></h5><p>expression의 평가 결과가 true일 때는 class를 적용하고, false일 때는 class를 적용하지 않는다. classList.add와 remove를 간단하게 할 수 있다.</p><h5 id="class-quot-className-List-quot"><a href="#class-quot-className-List-quot" class="headerlink" title="[class]=&quot;className List&quot;"></a><code>[class]=&quot;className List&quot;</code></h5><p>class에 className List를 적용한다.</p><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classNames = <span class="hljs-string">'active red block'</span>;</span><br></pre></td></tr></table></figure><p>여러 Class를 조건 별로 다룰 때에는 Angular의 built-in ngClass Directive를 사용하는 것이 좋다.</p><h2 id="Style-Binding"><a href="#Style-Binding" class="headerlink" title="Style Binding"></a>Style Binding</h2><p><code>[style.styleProp]=&quot;expression&quot;</code></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// style property 이름은 camelExpression과 kebab-expression 모두 사용</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">style.fontSize.px</span>] = <span class="hljs-string">"'64'"</span>&gt;</span>..<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">style.font-size.px</span>]=<span class="hljs-string">"'64'"</span>&gt;</span>..<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Event-Binding"><a href="#Event-Binding" class="headerlink" title="Event Binding"></a>Event Binding</h2><p><code>(event)=&quot;event handler()&quot;</code></p><p>함수 <strong>호출문</strong>을 써야 한다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"onClick()"</span>&gt;</span>..<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Two-way-Data-Binding"><a href="#Two-way-Data-Binding" class="headerlink" title="Two-way Data Binding"></a>Two-way Data Binding</h2><p>Property와 event binding을 한 번에</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> (<span class="hljs-attr">input</span>)=<span class="hljs-string">"changeVal($event.target.value)"</span></span></span><br><span class="line"><span class="hljs-tag">       [<span class="hljs-attr">value</span>]=<span class="hljs-string">"value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"remove()"</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent &#123;</span><br><span class="line">  value= <span class="hljs-string">''</span>;</span><br><span class="line">  </span><br><span class="line">  changeVal(value: <span class="hljs-built_in">string</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  remove() &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.value = <span class="hljs-string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input event로 인해서 AppComponent class의 value가 바뀌면 그 바뀐 value에 의해서 또 HTMLInputElement의  value도 영향을 받는다.</p><p>이런 상황을 양방향 데이터 바인딩으로 작성할 수 있다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">"value"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위  와 같이 고치면 input tag에 대해서 input event 발생시 AppCoㅊㅌ      mponent의 value도 변경되고, AppComponent의 value가 변경되면 view에;ㅀ 반영된다.</p><p>ngModel을 사용하기 위해서는 FormsModule을 모듈에 등록해야 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Interpolation&quot;&gt;&lt;a href=&quot;#Interpolation&quot; class=&quot;headerlink&quot; title=&quot;Interpolation&quot;&gt;&lt;/a&gt;Interpolation&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Property-Binding&quot;&gt;&lt;a href=&quot;#Property-Binding&quot; class=&quot;headerlink&quot; title=&quot;Property Binding&quot;&gt;&lt;/a&gt;Property Binding&lt;/h2&gt;&lt;p&gt;&lt;code&gt;[propertyName] = &amp;quot;expression&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; 내부에는 string이 아니라 expression(표현식)이 오는 곳이므로 주의하자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;Attribute-and-Property&quot;&gt;&lt;a href=&quot;#Attribute-and-Property&quot; class=&quot;headerlink&quot; title=&quot;Attribute and Property&quot;&gt;&lt;/a&gt;Attribute and Property&lt;/h4&gt;&lt;p&gt;Attribute는 HTML Element의 attribute이고 Property는 DOM node object인 HTML Element 객체의 property이다. 초기에 HTML Attribute가 초기값으로 그려지고 Property는 실시간으로 변경되는 DOM 최신값을 반영한다.&lt;/p&gt;
&lt;figure class=&quot;highlight html hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Initial Value&quot;&lt;/span&gt; [&lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;]=&lt;span class=&quot;hljs-string&quot;&gt;&quot;Property Value&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;앞의 value는 attribute이고 [value]는 property이다. Property는 최신값이므로 실행시 “Property Value”가 view에 보여지게 된다.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
      <category term="Angular" scheme="https://sub2n.github.io/categories/JavaScript/Angular/"/>
    
    
      <category term="Angular" scheme="https://sub2n.github.io/tags/Angular/"/>
    
  </entry>
  
</feed>
