<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>수빈 개발블로그</title>
  
  <subtitle>Sub2n Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sub2n.github.io/"/>
  <updated>2019-04-29T12:46:21.043Z</updated>
  <id>https://sub2n.github.io/</id>
  
  <author>
    <name>Subin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>190429-TIL</title>
    <link href="https://sub2n.github.io/2019/04/29/190429-TIL/"/>
    <id>https://sub2n.github.io/2019/04/29/190429-TIL/</id>
    <published>2019-04-29T12:45:46.000Z</published>
    <updated>2019-04-29T12:46:21.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>1. OOP and ADT</title>
    <link href="https://sub2n.github.io/2019/04/29/1-OOP-and-ADT/"/>
    <id>https://sub2n.github.io/2019/04/29/1-OOP-and-ADT/</id>
    <published>2019-04-29T11:51:41.000Z</published>
    <updated>2019-04-29T12:45:27.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-oriented-Design"><a href="#Object-oriented-Design" class="headerlink" title="Object-oriented Design"></a>Object-oriented Design</h1><p>Object-oriented design has fundamnental defferences from structured programming design methods. The two methods are similar in that they develop complex systems with divide and conquer, but differ in how to divide a given task.</p><h2 id="Algorithmic-Decomposition-vs-Object-oriented-Decomposition"><a href="#Algorithmic-Decomposition-vs-Object-oriented-Decomposition" class="headerlink" title="Algorithmic Decomposition vs Object-oriented Decomposition"></a>Algorithmic Decomposition vs Object-oriented Decomposition</h2><p>Traditional programming techniques used to algoritmicc decomposition. Algorithmic or functional decomposition treats software as a process and breaks it down into modules that represent the steps of the process. These modules are implemented in language syntax such as procedure of Pascal, subprogram of FORTRAN, function in C. Data Structure to implement the program is of secondary concern and should be considered only after the project has been divided into functional modules.</p><p>Object-oriented decomposition views software as set of Well-defined objects that model software well for entity in applications. These objects form software sysyem by interaction. Functional decomposition should be considered after system decomposied to objects.</p><p>The majot positive of object-oriented design is reuse of software. This enables flexible software systems that can change and evolve as the requirements of the system change.</p><h2 id="Basic-concept-of-Object-oriented-Programming"><a href="#Basic-concept-of-Object-oriented-Programming" class="headerlink" title="Basic concept of Object-oriented Programming"></a>Basic concept of Object-oriented Programming</h2><p>Definition : An object is an entity that performs calculations and has states. So object can be considered compination of data and operations.</p><p>Definition : OOP has methods such as ..</p><ol><li>An object is basic building block.</li><li>Each object is instance of some type(class).</li><li>Classes are connected each other by inheritance. (Programming not using inheritance does not considered as object-oriented programming)</li></ol><p>Definition : Called object-oriented language if some language has a function like ..</p><ol><li>Support object</li><li>All objects are involved in class</li><li>Support inheritance</li></ol><p>A language support 1, 2 not 3 called “object-based language”. (JavaScript)</p><h1 id="Data-Abstraction-and-Encapsulation"><a href="#Data-Abstraction-and-Encapsulation" class="headerlink" title="Data Abstraction and Encapsulation"></a>Data Abstraction and Encapsulation</h1><p>The concept of abstraction and encapsulation is used to human-machine interaction.</p><p>Definition : Data encapsulation(or Information Hiding) hides the detailed implementation of data objects from the outside world.</p><p>Definition : Data abstraction is the separation of specification and implementation of data objects.</p><p>C++ has <code>char</code>, <code>int</code>, <code>float</code>, <code>double</code> as a default data type. These data types are modified if <code>short</code>, <code>long</code>, <code>signed</code>, <code>unsigned</code> keywords are used. All programming languages provide at least a minimum of predefined data types, plus the ability to create new user-defined types.</p><p>Definition : Data type is set of objects and operations of that objects.</p><p>Whatever program addresses default data type or user-defined data type, object and operation must be considered.</p><p>Definition : ADT(Abstraction Data Type) is a data type in which the specifications of objects and the specifications of operations on these objects are separated from the representation of the objects and the implementation of the operations.</p><p>To emphasize the separation of specification and implementation, the ADT definition of the object will begin first. In this way, people can understand the essential elements of an object without a complex description of the representation of the object and the actual implementation of the operation.</p><hr><p>ADT NaturalNumber is<br>  Object : from 0 to MAXINT<br>  Functions :<br>    All x, y in NaturalNumber</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object-oriented-Design&quot;&gt;&lt;a href=&quot;#Object-oriented-Design&quot; class=&quot;headerlink&quot; title=&quot;Object-oriented Design&quot;&gt;&lt;/a&gt;Object-oriented Desi
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Data Structure" scheme="https://sub2n.github.io/categories/Computer-Engineering/Data-Structure/"/>
    
    
      <category term="OOP" scheme="https://sub2n.github.io/tags/OOP/"/>
    
      <category term="ADT" scheme="https://sub2n.github.io/tags/ADT/"/>
    
      <category term="Encapsulation" scheme="https://sub2n.github.io/tags/Encapsulation/"/>
    
      <category term="Abstraction" scheme="https://sub2n.github.io/tags/Abstraction/"/>
    
  </entry>
  
  <entry>
    <title>2. What is JavaScript?</title>
    <link href="https://sub2n.github.io/2019/04/29/2-What-is-JavaScript/"/>
    <id>https://sub2n.github.io/2019/04/29/2-What-is-JavaScript/</id>
    <published>2019-04-29T09:10:43.000Z</published>
    <updated>2019-04-29T11:55:42.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Creation-of-JavaScript"><a href="#1-Creation-of-JavaScript" class="headerlink" title="1. Creation of JavaScript"></a>1. Creation of JavaScript</h1><p>In 1995, the Netscape Communications decided to introduce a lightweight programming language to dynamically express static HTML. So JavaScript developed by Brendan Eich.</p><p>JavaScript was mounted on Netscape Navigator 2 which is web browser of Netscape Communications, named “Mocha” in March, 1996. In September, renamed to “LiveScript” and finally named as “JavaScript” in December.</p><p>So JavaScript is now the standard programming language for all browsers. But JavaScript has not grown smoothly</p><h1 id="2-Fragmentation-and-Standardization-of-JavaScript"><a href="#2-Fragmentation-and-Standardization-of-JavaScript" class="headerlink" title="2. Fragmentation and Standardization of JavaScript"></a>2. Fragmentation and Standardization of JavaScript</h1><p>In August 1996, Microsoft added a derived version of JavaScript, “JScript”, to Internet Explorer 3.0. But the problem is that JScript and JavaScript are not standardized and are moderately compatible. In other words, they have competitively begun adding features that only work with their browsers to gain market share in their browsers.</p><p>This has led to cross-browsing issues where webpages are not working properly, and it has become extremely difficult to develop webpages that work across all browsers.</p><p>Thus, the need for stadard of JavaScript which works same in all browser has begun to be raised. For this, Netscape Communications requested standardization of JavaScript to ECMA International in November 1996.</p><h1 id="3-History-of-JavaScript"><a href="#3-History-of-JavaScript" class="headerlink" title="3. History of JavaScript"></a>3. History of JavaScript</h1><h1 id="4-JavaScript-and-ECMAScript"><a href="#4-JavaScript-and-ECMAScript" class="headerlink" title="4. JavaScript and ECMAScript"></a>4. JavaScript and ECMAScript</h1><h1 id="5-Characteristics-of-JavaScript"><a href="#5-Characteristics-of-JavaScript" class="headerlink" title="5. Characteristics of JavaScript"></a>5. Characteristics of JavaScript</h1><hr><p>Reference</p><p><a href="https://poiemaweb.com/js-introduction" target="_blank" rel="noopener">자바스크립트란?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Creation-of-JavaScript&quot;&gt;&lt;a href=&quot;#1-Creation-of-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;1. Creation of JavaScript&quot;&gt;&lt;/a&gt;1. Creation o
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="ECMA" scheme="https://sub2n.github.io/tags/ECMA/"/>
    
  </entry>
  
  <entry>
    <title>1. What is Programming?</title>
    <link href="https://sub2n.github.io/2019/04/29/1-What-is-Programming/"/>
    <id>https://sub2n.github.io/2019/04/29/1-What-is-Programming/</id>
    <published>2019-04-29T09:10:24.000Z</published>
    <updated>2019-04-29T11:55:29.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Computational-Thinking"><a href="#1-Computational-Thinking" class="headerlink" title="1. Computational Thinking"></a>1. Computational Thinking</h1><p>Programming is communication that sends commands to be performed to the computer. In order to define the “command to be performed,” the resolution task (problem/requirements) must be clearly understood, the complexity must be simply deconstructed, the data organized and sorted by modeling, and the actions arranged in sequence.</p><p>In other words, clear understanding of reguirements and proper definitaion of solution are needed before programming. What is required at this time is the problem-solving skill. Some people tend to equate problem-solving abilities with algorithms, but it does not. Of course studying algorithm is very helpful to get problem-solving skill, but problem-solving skill is more higher level of ability.</p><p>Programming is just a means of expression to produce the final result of solving a problem. Programming itself doesn’t solve the problem. Considering the solution of the problem, you should look at preoblem from a computer’s point of view. Computational thinking is required this kind of time. You should do computational thinking with solving problems.</p><p>This requires logical and mathematical thinking, and all concepts that will be used within the programming should be defined as assessable, breaking down and patterning the resolution tasks into smaller units.</p><h1 id="2-Programming-Language"><a href="#2-Programming-Language" class="headerlink" title="2. Programming Language"></a>2. Programming Language</h1><p>As above, solution defined based on problem-solving skill should be communicated to computer. At this point, computer do perform the commands. So the command should be communicated by machine code, not a natural language. But it is very difficult that human to understand machine code. It is even described in bits.</p><p>The most useful alternative to delivering commands in direct mechanical language is to use a kind of translator to write a program using “programming language” consisting of promised phrases (Syntax) that humans can understand and then convert it into machine language that computers can understand. This kind of translator is called complier or interpreter.</p><p>Programming is a kind of communication that sends commands to the computer that you want to perform using the programming language. The programming language is expressed as a combination of Syntax and Semantics.</p><h1 id="3-Syntax-amp-Semantics"><a href="#3-Syntax-amp-Semantics" class="headerlink" title="3. Syntax &amp; Semantics"></a>3. Syntax &amp; Semantics</h1><p>Understanding both syntax and semantics properly is important to use language well. In the end, solutions created through problem-solving ability are expressed through the syntax of programming languages. The code is a specific implementation of the solution. This is only archeive semantics when the requirements are fulfilled(problem solved).</p><p>Most of programming languages provide syntax such as variables and values, keywords, operators, expressions, flow control by conditional and loop statements, statements, functions(set of statements), and data structures such as objects and arrays. </p><p>What a programmer needs to do is find a solution for problem and implement it in a code that has correct syntax. Implemented code should act as expected and solve the problem. It should be predictable and explainable how the code work inside the computer and what it will give back.</p><p>To do this, it is important to have an accurate understanding of the basic concepts and operating principles of programming language. If you just copy &amp; paste code without understand basic concept and principle, that code is not reliable. And problem-solving skills will not grow anymore.</p><hr><p>Reference</p><p><a href="https://poiemaweb.com/coding" target="_blank" rel="noopener">프로그래밍이란?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Computational-Thinking&quot;&gt;&lt;a href=&quot;#1-Computational-Thinking&quot; class=&quot;headerlink&quot; title=&quot;1. Computational Thinking&quot;&gt;&lt;/a&gt;1. Computatio
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Programming" scheme="https://sub2n.github.io/tags/Programming/"/>
    
      <category term="Computational Thinking" scheme="https://sub2n.github.io/tags/Computational-Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Difference between Subsequence and Substring</title>
    <link href="https://sub2n.github.io/2019/04/29/Difference-between-Subsequence-and-Substring/"/>
    <id>https://sub2n.github.io/2019/04/29/Difference-between-Subsequence-and-Substring/</id>
    <published>2019-04-29T02:26:20.000Z</published>
    <updated>2019-04-29T09:07:31.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Subsequence"><a href="#Subsequence" class="headerlink" title="Subsequence"></a>Subsequence</h2><p>In mathmatics, a subsequence is a sequence that can be derived from another sequence by <strong>deleting</strong> some or no elememts <strong>without changing</strong> the order of the remaining elememts.</p><h3 id="What-is-Sequence"><a href="#What-is-Sequence" class="headerlink" title="What is Sequence?"></a>What is Sequence?</h3><p>In mathematics, a sequence is an enumerated collection of objects in which repetitions are allowed. Serial arrangement in which things follow in logical order or a recurrent pattern.</p><h2 id="Substring"><a href="#Substring" class="headerlink" title="Substring"></a>Substring</h2><p>Substring can be derived from the string by deleting anoter substring. The substring is a refinement of the subsequence.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Subsequence&quot;&gt;&lt;a href=&quot;#Subsequence&quot; class=&quot;headerlink&quot; title=&quot;Subsequence&quot;&gt;&lt;/a&gt;Subsequence&lt;/h2&gt;&lt;p&gt;In mathmatics, a subsequence is a 
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Basic" scheme="https://sub2n.github.io/categories/Computer-Engineering/Basic/"/>
    
    
      <category term="Substring" scheme="https://sub2n.github.io/tags/Substring/"/>
    
      <category term="Subsequence" scheme="https://sub2n.github.io/tags/Subsequence/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Decode the Morse code</title>
    <link href="https://sub2n.github.io/2019/04/29/CodeWars-6kyu-Decode-the-Morse-code/"/>
    <id>https://sub2n.github.io/2019/04/29/CodeWars-6kyu-Decode-the-Morse-code/</id>
    <published>2019-04-29T01:53:43.000Z</published>
    <updated>2019-04-29T02:01:04.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Decode-the-Morse-code"><a href="#CodeWars-6kyu-Decode-the-Morse-code" class="headerlink" title="CodeWars 6kyu. Decode the Morse code"></a><a href="https://www.codewars.com/kata/decode-the-morse-code/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Decode the Morse code</a></h2><p>Decode Morse code to plain text</p><a id="more"></a><blockquote><p>The Morse code encodes every character as a sequence of “dots” and “dashes”. For example, the letter A is coded as ·−, letter Q is coded as −−·−, and digit 1 is coded as ·−−−−. The Morse code is case-insensitive, traditionally capital letters are used. When the message is written in Morse code, a single space is used to separate the character codes and 3 spaces are used to separate words. For example, the message HEY JUDE in Morse code is ···· · −·−−   ·−−− ··− −·· ·.</p></blockquote><blockquote><p>NOTE: Extra spaces before or after the code have no meaning and should be ignored.</p></blockquote><blockquote><p>In addition to letters, digits and some punctuation, there are some special service codes, the most notorious of those is the international distress signal SOS (that was first issued by Titanic), that is coded as ···−−−···. These special codes are treated as single special characters, and usually are transmitted as separate words.</p><p>Your task is to implement a function that would take the morse code as input and return a decoded human-readable string.</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decodeMorse(<span class="hljs-string">'.... . -.--   .--- ..- -.. .'</span>)</span><br><span class="line"><span class="hljs-comment">//should return "HEY JUDE"</span></span><br></pre></td></tr></table></figure><ol><li>Each word distinguished by <code>&quot;   &quot;</code> (3 spaces)</li><li>Free to use the preloaded Morse code table as a dictionary. By <code>MORSE_CODE[&#39;.--&#39;]</code></li></ol><h2 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/56873375-eefbc380-6a6c-11e9-864d-86e29c152aea.png" alt="Submit screen"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">decodeMorse = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">morseCode</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> words = morseCode.split(<span class="hljs-string">"   "</span>);</span><br><span class="line">  <span class="hljs-keyword">var</span> string = <span class="hljs-string">""</span></span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> words)&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(words[i] != <span class="hljs-string">''</span>)&#123;</span><br><span class="line">      <span class="hljs-keyword">var</span> word = words[i].split(<span class="hljs-string">" "</span>);</span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j <span class="hljs-keyword">in</span> word)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(word[j] != <span class="hljs-string">''</span>)&#123;</span><br><span class="line">          string += MORSE_CODE[word[j]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(i &lt; words.length<span class="hljs-number">-1</span>)&#123;</span><br><span class="line">        string += <span class="hljs-string">" "</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Decode-the-Morse-code&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Decode-the-Morse-code&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Decode the Morse code&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/decode-the-morse-code/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Decode the Morse code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Decode Morse code to plain text&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190426-TIL</title>
    <link href="https://sub2n.github.io/2019/04/26/190426-TIL/"/>
    <id>https://sub2n.github.io/2019/04/26/190426-TIL/</id>
    <published>2019-04-26T12:44:36.000Z</published>
    <updated>2019-04-29T01:00:01.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li><p>Simulated and implemented Merge sort.</p></li><li><p>Studied python Stack and queue. Also implemented stack using 2 queues, queue using 2 stacks.</p></li><li><p>Review linked list in python. </p></li><li><p>Solve CodeWars 6kyu Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eureka!!</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simulated
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ...</title>
    <link href="https://sub2n.github.io/2019/04/26/CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-%C2%A1Eurekals/"/>
    <id>https://sub2n.github.io/2019/04/26/CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-¡Eurekals/</id>
    <published>2019-04-26T00:56:47.000Z</published>
    <updated>2019-04-29T01:57:25.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal"><a href="#CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal" class="headerlink" title="CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!"></a><a href="https://www.codewars.com/kata/5626b561280a42ecc50000d1" target="_blank" rel="noopener">CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!</a></h2><p>Return a number that sum of each digit powered of its own number of digit.</p><a id="more"></a><blockquote><p>The number 89 is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. What’s the use of saying “Eureka”? Because this sum gives the same number.</p><p>In effect: 89 = 8^1 + 9^2</p><p>The next number in having this property is 135.</p><p>See this property again: 135 = 1^1 + 3^2 + 5^3</p><p>We need a function to collect these numbers, that may receive two integers a, b that defines the range [a, b] (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.</p></blockquote><blockquote><p>Let’s see some cases:</p><p>sumDigPow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]</p><p>sumDigPow(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]</p></blockquote><blockquote><p>If there are no numbers of this kind in the range [a, b] the function should output an empty list.</p><p>sumDigPow(90, 100) == []</p></blockquote><h2 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h2><ol><li><p>Put the numbers that fulfill the property to eureka[].</p></li><li><p>Used String type casting to use split and reduce method to each number.</p></li></ol><h2 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/56872698-fddf7780-6a66-11e9-8718-743e7f71933a.png" alt="Submit screen"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sumDigPow</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line"> eureka = [];</span><br><span class="line"> <span class="hljs-keyword">for</span>(i=a; i &lt;=b; i++)&#123;</span><br><span class="line">   digits = <span class="hljs-built_in">String</span>(i).split(<span class="hljs-string">''</span>);</span><br><span class="line">   <span class="hljs-keyword">if</span>(i == digits.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, currentValue, currentIndex</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> accumulator + currentValue**(currentIndex+<span class="hljs-number">1</span>);</span><br><span class="line">   &#125;, <span class="hljs-number">0</span>))&#123;</span><br><span class="line">     eureka.push(i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-keyword">return</span> eureka;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/5626b561280a42ecc50000d1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Return a number that sum of each digit powered of its own number of digit.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 5kyu Maximum subarray sum</title>
    <link href="https://sub2n.github.io/2019/04/25/CodeWars-5kyu-Maximum-subarray-sum/"/>
    <id>https://sub2n.github.io/2019/04/25/CodeWars-5kyu-Maximum-subarray-sum/</id>
    <published>2019-04-25T11:50:45.000Z</published>
    <updated>2019-04-25T12:13:04.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-5kyu-Maximum-subarray-sum"><a href="#CodeWars-5kyu-Maximum-subarray-sum" class="headerlink" title="CodeWars 5kyu. Maximum subarray sum"></a><a href="https://www.codewars.com/kata/maximum-subarray-sum/train/javascript" target="_blank" rel="noopener">CodeWars 5kyu. Maximum subarray sum</a></h2><p>Return maximum sum of subarrays</p><a id="more"></a><blockquote><p>The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:</p></blockquote><blockquote><p>maxSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])</p><p>// should be 6: [4, -1, 2, 1]</p><p>Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</p></blockquote><blockquote><p>Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.</p></blockquote><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><ol><li><p>Should return maximum sum of any subarrays including empty list.</p></li><li><p>Return 0 when all of list’s element is negative numbers.</p></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I used Dynamic Programming - Bottom up approach to solve this problem. Because I learned on some online lectures about Dynamic Programming recently.</p><ol><li><p>First I catched that all the start and end element in subarray is positive numbers. So I decided to put all positive numbers’ index in positive_index list.</p></li><li><p>Make a 2 dementional array, sum[][] to keep the sum of subarrays.</p></li><li><p>Drew the recurrance Induction of this problem.</p><ul><li>Basis <ul><li>sum[i][i] = arr[positive_index[i]]</li><li>sum[i][i+1] = arr[positive_index[i]] to arr[positive_index[j]] (i &lt; positive_index.length - 1)</li></ul></li><li>Inductive Step<ul><li>sum[i][j] = sum[i][j-1] + sum[j-1][j] - arr[positive_index[j-1]] </li></ul></li></ul></li></ol><h2 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/56734293-5f6cc100-679d-11e9-8f72-280c1b4514ae.png" alt="Submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> maxSequence = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> positive_index = []</span><br><span class="line"> </span><br><span class="line">  arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">positive_check</span>(<span class="hljs-params">element, index</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(element&gt;<span class="hljs-number">0</span>)&#123;</span><br><span class="line">      positive_index.push(index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span> (positive_index.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">var</span> sum = <span class="hljs-built_in">Array</span>(positive_index.length).fill(<span class="hljs-literal">null</span>).map(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Array</span>(positive_index.length));</span><br><span class="line">  <span class="hljs-keyword">var</span> max = <span class="hljs-built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;positive_index.length; i++)&#123;</span><br><span class="line">    sum[i][i] = arr[positive_index[i]];</span><br><span class="line">    <span class="hljs-keyword">if</span>(max &lt; sum[i][i])&#123;</span><br><span class="line">        max = sum[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;positive_index.length)&#123;</span><br><span class="line">      sum[i][i+<span class="hljs-number">1</span>] = arr.slice(positive_index[i], positive_index[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>).reduce(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a+b);</span><br><span class="line">      <span class="hljs-keyword">if</span>(max &lt; sum[i][i+<span class="hljs-number">1</span>])&#123;</span><br><span class="line">        max = sum[i][i+<span class="hljs-number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt; positive_index.length; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">2</span>; j&lt; positive_index.length; j++)&#123;</span><br><span class="line">      sum[i][j] = sum[i][j<span class="hljs-number">-1</span>] + sum[j<span class="hljs-number">-1</span>][j] - arr[positive_index[j<span class="hljs-number">-1</span>]];</span><br><span class="line">      <span class="hljs-keyword">if</span>(max &lt; sum[i][j])&#123;</span><br><span class="line">        max = sum[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PPT-slides"><a href="#PPT-slides" class="headerlink" title="PPT slides"></a>PPT slides</h2><p>Made presentations for my algorithm study group</p><p><img src="https://user-images.githubusercontent.com/48080762/56733714-e7ea6200-679b-11e9-8020-a289b67f909b.PNG" alt="슬라이드1"><br><img src="https://user-images.githubusercontent.com/48080762/56733777-06e8f400-679c-11e9-80d9-9800ff74138e.PNG" alt="슬라이드2"><br><img src="https://user-images.githubusercontent.com/48080762/56733780-08b2b780-679c-11e9-867b-ebac97ab6a38.PNG" alt="슬라이드3"><br><img src="https://user-images.githubusercontent.com/48080762/56733783-0a7c7b00-679c-11e9-9204-664edfe5be0b.PNG" alt="슬라이드4"><br><img src="https://user-images.githubusercontent.com/48080762/56733711-e3be4480-679b-11e9-89f3-c1c7631adb50.PNG" alt="슬라이드5"><br><img src="https://user-images.githubusercontent.com/48080762/56733728-ee78d980-679b-11e9-9439-f0a9e7189cfe.PNG" alt="슬라이드6"><br><img src="https://user-images.githubusercontent.com/48080762/56733730-f173ca00-679b-11e9-9faf-89258b8786a4.PNG" alt="슬라이드7"><br><img src="https://user-images.githubusercontent.com/48080762/56733737-f59fe780-679b-11e9-8932-9983e4cd734a.PNG" alt="슬라이드8"><br><img src="https://user-images.githubusercontent.com/48080762/56733740-f769ab00-679b-11e9-883e-bc4b2a41275c.PNG" alt="슬라이드9"><br><img src="https://user-images.githubusercontent.com/48080762/56733742-f9cc0500-679b-11e9-948e-0cf731d6700c.PNG" alt="슬라이드10"><br><img src="https://user-images.githubusercontent.com/48080762/56733745-fafd3200-679b-11e9-9a82-5883417827df.PNG" alt="슬라이드11"><br><img src="https://user-images.githubusercontent.com/48080762/56733757-fcc6f580-679b-11e9-9674-1f630f832fb5.PNG" alt="슬라이드12"><br><img src="https://user-images.githubusercontent.com/48080762/56733765-fe90b900-679b-11e9-9d97-3b839add0674.PNG" alt="슬라이드13"><br><img src="https://user-images.githubusercontent.com/48080762/56733770-005a7c80-679c-11e9-9fd8-253cac494e0c.PNG" alt="슬라이드14"><br><img src="https://user-images.githubusercontent.com/48080762/56733774-02bcd680-679c-11e9-8d56-627fb0df85a4.PNG" alt="슬라이드15"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-5kyu-Maximum-subarray-sum&quot;&gt;&lt;a href=&quot;#CodeWars-5kyu-Maximum-subarray-sum&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 5kyu. Maximum subarray sum&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/maximum-subarray-sum/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 5kyu. Maximum subarray sum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Return maximum sum of subarrays&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190425-TIL</title>
    <link href="https://sub2n.github.io/2019/04/25/190425-TIL/"/>
    <id>https://sub2n.github.io/2019/04/25/190425-TIL/</id>
    <published>2019-04-25T07:44:02.000Z</published>
    <updated>2019-04-26T07:54:39.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li><p>Fastcampus에서 진행한 졸업생과의 티타임 시간에 졸업한 개발자분을 만나뵙고 경험들을 들었다. 많은 도움이 됐다.</p></li><li><p>Network를 대략적으로 살펴봤다. 나는 학교에서 배웠지만 오래되어 다시 한 번 정리하는 게 필요할 것 같다. </p><p><a href="https://d2.naver.com/helloworld/47667" target="_blank" rel="noopener">TCP/IP 네트워크 스택 이해하기</a></p></li><li><p>Quick Sort의 성능 분석 및 정리해서 posting 했다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fastcampu
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Quick Sort</title>
    <link href="https://sub2n.github.io/2019/04/24/Quick-Sort/"/>
    <id>https://sub2n.github.io/2019/04/24/Quick-Sort/</id>
    <published>2019-04-24T07:46:32.000Z</published>
    <updated>2019-04-29T09:09:20.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h1><ul><li><p>Divide and Conquer Algorithm</p></li><li><p>Use Recursion</p></li></ul><p><img src="https://user-images.githubusercontent.com/48080762/56641764-00318280-66b1-11e9-926a-c54f4184fc99.png" alt="Initialize"></p><ol start="0"><li><p>정렬해야할 list, 시작점 start와 끝점 end를 넘겨 받는다. left = start, right = end로 정한다.</p></li><li><p>양방향의 left와 right를 pivot 방향으로 움직이며 pivot 값과 left, right index의 element 값을 비교한다.</p></li><li><p>left의 element 값이 pivot 보다 크고, right의 element 값이 pivot보다 작을 때 둘을 교환하고 각 index를 하나씩 이동한다.(left면 +1, right면 -1)</p></li><li><p>left와 right가 교차되기 전까지 반복하면서 sorting한다.</p></li><li><p>한 번 교차되면 while문을 빠져나오는데, 이 때 pivot을 기준으로 왼쪽은 pivot보다 작은 값들로, 오른쪽은 pivot보다 큰 값들로만 이루어져있다.</p></li><li><p>Recursion으로 pivot을 포함하지 않고 왼쪽과 오른쪽을 각각 다시 돌려준다. 이 때 base case는 start가 end와 같아지거나 교차하면 return하는 것이다.</p></li></ol><ul><li><p>코드를 보는 게 더 이해가 쉬울 것 같다. 그림으로 그려보며 진행하는 게 가장 도움이 된다.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(li, start, end)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    left = start</span><br><span class="line">    right = end</span><br><span class="line">    pivot = li[(left+right)//<span class="hljs-number">2</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="hljs-keyword">while</span> li[left] &lt; pivot:</span><br><span class="line">            left += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> li[right] &gt; pivot:</span><br><span class="line">            right -= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> left &lt;= right:</span><br><span class="line">            li[left], li[right] = li[right], li[left]</span><br><span class="line">            left += <span class="hljs-number">1</span></span><br><span class="line">            right -= <span class="hljs-number">1</span></span><br><span class="line">            </span><br><span class="line">    quickSort(li, start, right<span class="hljs-number">-1</span>)</span><br><span class="line">    quickSort(li, left, end)</span><br></pre></td></tr></table></figure><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">    num_data=int(input(<span class="hljs-string">'데이터 개수(0이면 종료):'</span>))</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> num_data:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line">    data=[random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(num_data)]</span><br><span class="line">    print(data)</span><br><span class="line">    quickSort(data, <span class="hljs-number">0</span>, len(data)<span class="hljs-number">-1</span>)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure></li><li><p>[Quick sort에 관련된 TED edu 영상] What’s the fastest way to alphabetize your bookshelf?</p><p><a href="https://youtu.be/WaNLJf8xzC4" target="_blank" rel="noopener"><img src="https://img.youtube.com/vi/WaNLJf8xzC4/0.jpg" alt="What&#39;s the fastest way to alphabetize your bookshelf"></a> </p></li><li><p>문제는 pivot을 어떻게 결정할 것이냐이다. Pivot이 정렬해야할 list의 모든 값들의 평균치일 때는 n/2번을 비교하는 것으로 가장 좋지만, 예를 들어 최솟값이나 최댓값을 기준으로 pivot이 선택될 경우 n번을 계산해야한다.</p></li><li><p>pivot을 정렬된 list의 가운데 값으로 결정하는 것이 Best case지만, 정렬을 하기 위해서 pivot을 사용하는 것이므로 실현될 수 없는 이야기이다.</p></li><li><p>Quick Sort의 Time Complexity는 O(nlogn)으로, average case일 때를 기준으로 한다. Pivot을 random pivot으로 둘 경우 확률적으로 avarage case를 만족한다.</p></li><li><p>li의 start와 end와 mid를 정렬한 결과의 중간 값을 return한다. Random Pivot을 이용하기 위해 코드를 수정했다.</p></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getMiddleIndex</span><span class="hljs-params">(li, start, mid, end)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">    list의 맨 처음 값, 끝 값, 중간 값 정렬시 가운데 값의 index 반환</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    indices = [start, mid, end]</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> li[indices[<span class="hljs-number">0</span>]] &gt; li[indices[<span class="hljs-number">1</span>]]:</span><br><span class="line">        indices[<span class="hljs-number">0</span>], indices[<span class="hljs-number">1</span>] = indices[<span class="hljs-number">1</span>], indices[<span class="hljs-number">0</span>]</span><br><span class="line">    <span class="hljs-keyword">if</span> li[indices[<span class="hljs-number">1</span>] &gt; li[indices[<span class="hljs-number">2</span>]]]:</span><br><span class="line">        indices[<span class="hljs-number">1</span>], indices[<span class="hljs-number">2</span>] = indices[<span class="hljs-number">2</span>], indices[<span class="hljs-number">1</span>]</span><br><span class="line">    <span class="hljs-keyword">if</span> li[indices[<span class="hljs-number">0</span>]] &gt; li[indices[<span class="hljs-number">1</span>]]:</span><br><span class="line">        indices[<span class="hljs-number">0</span>], indices[<span class="hljs-number">1</span>] = indices[<span class="hljs-number">1</span>], indices[<span class="hljs-number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-keyword">return</span> indices[<span class="hljs-number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="전체-반영한-결과"><a href="#전체-반영한-결과" class="headerlink" title="전체 반영한 결과"></a>전체 반영한 결과</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getMiddleIndex</span><span class="hljs-params">(li, start, mid, end)</span>:</span></span><br><span class="line">    <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">    list의 맨 처음 값, 끝 값, 중간 값 정렬시 가운데 값의 index 반환</span></span><br><span class="line"><span class="hljs-string">    """</span></span><br><span class="line">    indices = [start, mid, end]</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> li[indices[<span class="hljs-number">0</span>]] &gt; li[indices[<span class="hljs-number">1</span>]]:</span><br><span class="line">        indices[<span class="hljs-number">0</span>], indices[<span class="hljs-number">1</span>] = indices[<span class="hljs-number">1</span>], indices[<span class="hljs-number">0</span>]</span><br><span class="line">    <span class="hljs-keyword">if</span> li[indices[<span class="hljs-number">1</span>] &gt; li[indices[<span class="hljs-number">2</span>]]]:</span><br><span class="line">        indices[<span class="hljs-number">1</span>], indices[<span class="hljs-number">2</span>] = indices[<span class="hljs-number">2</span>], indices[<span class="hljs-number">1</span>]</span><br><span class="line">    <span class="hljs-keyword">if</span> li[indices[<span class="hljs-number">0</span>]] &gt; li[indices[<span class="hljs-number">1</span>]]:</span><br><span class="line">        indices[<span class="hljs-number">0</span>], indices[<span class="hljs-number">1</span>] = indices[<span class="hljs-number">1</span>], indices[<span class="hljs-number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-keyword">return</span> indices[<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(li, start, end)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    left = start</span><br><span class="line">    right = end</span><br><span class="line">    mid = (left+right)//<span class="hljs-number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">#추가된 코드</span></span><br><span class="line">    mid_index = getMiddleIndex(li, start, mid, end)</span><br><span class="line">    li[mid_index], li[mid] = li[mid], li[mid_index]</span><br><span class="line">    </span><br><span class="line">    pivot = li[mid]</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="hljs-keyword">while</span> li[left] &lt; pivot:</span><br><span class="line">            left += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">while</span> li[right] &gt; pivot:</span><br><span class="line">            right -= <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">if</span> left &lt;= right:</span><br><span class="line">            li[left], li[right] = li[right], li[left]</span><br><span class="line">            left += <span class="hljs-number">1</span></span><br><span class="line">            right -= <span class="hljs-number">1</span></span><br><span class="line">            </span><br><span class="line">    quickSort(li, start, right<span class="hljs-number">-1</span>)</span><br><span class="line">    quickSort(li, left, end)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Quick-Sort&quot;&gt;&lt;a href=&quot;#Quick-Sort&quot; class=&quot;headerlink&quot; title=&quot;Quick Sort&quot;&gt;&lt;/a&gt;Quick Sort&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Divide and Conquer Algorithm&lt;
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Computer-Engineering/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
      <category term="Quick sort" scheme="https://sub2n.github.io/tags/Quick-sort/"/>
    
  </entry>
  
  <entry>
    <title>Python Class and Access Modifier</title>
    <link href="https://sub2n.github.io/2019/04/24/Python-Class-and-Access-Modifier/"/>
    <id>https://sub2n.github.io/2019/04/24/Python-Class-and-Access-Modifier/</id>
    <published>2019-04-24T06:19:56.000Z</published>
    <updated>2019-04-24T06:56:13.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Class"><a href="#Python-Class" class="headerlink" title="Python Class"></a>Python Class</h1><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>:</span></span><br><span class="line">    <span class="hljs-comment"># constructor</span></span><br><span class="line">    <span class="hljs-comment"># 객체를 생성할 때 "반드시" 한 번 호출한다.</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, cus_name, init_balance)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># instance member</span></span><br><span class="line">        self.name = cus_name</span><br><span class="line">        self.balance = init_balance</span><br><span class="line">        </span><br><span class="line">    <span class="hljs-comment"># descructor</span></span><br><span class="line">    <span class="hljs-comment"># 객체가 소멸될 때 "반드시" 한 번 호출</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__del__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment"># instance method(operator)</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deposit</span><span class="hljs-params">(self, money)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> money &lt; <span class="hljs-number">0</span>:</span><br><span class="line">            print(<span class="hljs-string">'0보다 작은 값을 저금할 수 없습니다.'</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line">        </span><br><span class="line">        self.balance += money        </span><br><span class="line">        print(<span class="hljs-string">f'잔고 <span class="hljs-subst">&#123;self.balance&#125;</span>'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(self, money)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> money &gt; self.balance:</span><br><span class="line">            print(<span class="hljs-string">'잔고보다 출금하려는 돈이 더 많습니다.'</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line">        </span><br><span class="line">        self.balance -= money</span><br><span class="line">        print(<span class="hljs-string">f'잔고 <span class="hljs-subst">&#123;self.balance&#125;</span>'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> money</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfer</span><span class="hljs-params">(self, other, money)</span>:</span></span><br><span class="line">        self.balance -= money</span><br><span class="line">        <span class="hljs-comment"># 다른 object의 member에 바로 접근하지 않는다!! (private없어서 접근 할 수는 있음(뭐임?))</span></span><br><span class="line">        <span class="hljs-comment"># 다른 object의 member는 "반드시" 상대 object의 method를 호출해서 접근해야 한다. - Message Passing</span></span><br><span class="line">        other.deposit(money)</span><br><span class="line">        print(<span class="hljs-string">f'잔고 <span class="hljs-subst">&#123;self.balance&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><h2 id="Object-abstraction-method-추상화-도구"><a href="#Object-abstraction-method-추상화-도구" class="headerlink" title="Object : abstraction method (추상화 도구)"></a>Object : abstraction method (추상화 도구)</h2><ul><li>관련 있는 변수(member)와 기능(operator, method)를 묶어서 하나의 object로 만든다.</li><li>Operator를 통해서만 member에 접근할 수 있다.</li></ul><h2 id="Class와-Instance-object의-차이"><a href="#Class와-Instance-object의-차이" class="headerlink" title="Class와 Instance, object의 차이"></a>Class와 Instance, object의 차이</h2><ul><li>클래스(class)란 똑같은 무엇인가를 계속해서 만들어낼 수 있는 설계 도면 같은 것이고(과자 틀), 객체(object)란 클래스에 의해서 만들어진 피조물(과자틀에 의해서 만들어진 과자)을 뜻한다.</li><li>class에 의해서 만들어진 Object를 instance라고도 한다. 그렇다면 Object와 Instance의 차이는 무엇일까?<br>이렇게 생각해 보자. a = Cookie() 이렇게 만들어진 a는 Object이다. 그리고 a라는 Object는 Cookie의 Instance이다. </li><li>즉, Instance라는 말은 특정 Object(a)가 어떤 Class(Cookie)의 객체인지를 관계 위주로 설명할 때 사용된다. 즉, “a는 instance” 보다는 “a는 object”라는 표현이 어울리며, “a는 Cookie의 object” 보다는 “a는 Cookie의 instance”라는 표현이 훨씬 잘 어울린다.</li></ul><h2 id="Public-Private-and-Protected-Python-Access-Modifier"><a href="#Public-Private-and-Protected-Python-Access-Modifier" class="headerlink" title="Public, Private and Protected | Python Access Modifier"></a>Public, Private and Protected | Python Access Modifier</h2><p>C++, Java와 같이 클래식한 object-oriented 언어에서는 public, private, protected와 같은 키워드로 class의 member에 대한 접근을 제어한다. Class의 Private member는 class 외부에서 접근이 불가능하며 class 내부에서만 접근될 수 있다.</p><p>Class 내의 Public member는 class 외부에서도 접근할 수 있다. 같은 class의 object는 public method를 호출하도록 요구된다. Private instance variable과 public method를 함께 써야지만 데이터 encapsulation의 원칙에 따르는 것이다.</p><p>Class의 protected member는 오직 해당 class와 그 class를 상속받은 child class만이 접근할 수 있다. 이는 parent class가 child class에게 특정한 리소스를 상속할 수 있게 한다.</p><p>그런데 Python은 instance variable과 method에 대해서 접근 제한을 하는 방식이 따로 없다. Python vaiable이나 method의 이름 앞에 한개 또는 2개의 _(underscore)를 붙여서 protected와 private으로 구분하기로 약속한다.</p><h3 id="Public-Attributes"><a href="#Public-Attributes" class="headerlink" title="Public Attributes"></a>Public Attributes</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, cus_name, init_balance)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># instance member</span></span><br><span class="line">        self.name = cus_name</span><br><span class="line">        self.balance = init_balance</span><br></pre></td></tr></table></figure><h3 id="Protected-Attribute"><a href="#Protected-Attribute" class="headerlink" title="Protected Attribute"></a>Protected Attribute</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, cus_name, init_balance)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># instance member</span></span><br><span class="line">        self._name = cus_name</span><br><span class="line">        self._balance = init_balance</span><br></pre></td></tr></table></figure><h3 id="Private-Attribute"><a href="#Private-Attribute" class="headerlink" title="Private Attribute"></a>Private Attribute</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, cus_name, init_balance)</span>:</span></span><br><span class="line">        <span class="hljs-comment"># instance member</span></span><br><span class="line">        self.__name = cus_name</span><br><span class="line">        self.__balance = init_balance</span><br></pre></td></tr></table></figure><p>그런데 웃긴 건, underscore로 name mangling한 private variable을 class 외부에서 접근이 가능하다는 것이다. 다음의 방법을 사용하면 된다.</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myAccount = Account(<span class="hljs-string">'subin'</span>, <span class="hljs-number">10000</span>)</span><br><span class="line">myAccount._Account__balance</span><br></pre></td></tr></table></figure><p>정말 필요하다면 접근할 수 있지만, Python에서는 접근하지 말 것을 권고하고 있다.</p><hr><p>참고 자료</p><ul><li><a href="https://wikidocs.net/28" target="_blank" rel="noopener">점프 투 파이썬</a></li><li><a href="https://www.tutorialsteacher.com/python/private-and-protected-access-modifiers-in-python" target="_blank" rel="noopener">TutorialsTeacher</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Class&quot;&gt;&lt;a href=&quot;#Python-Class&quot; class=&quot;headerlink&quot; title=&quot;Python Class&quot;&gt;&lt;/a&gt;Python Class&lt;/h1&gt;&lt;figure class=&quot;highlight python h
      
    
    </summary>
    
      <category term="Python" scheme="https://sub2n.github.io/categories/Python/"/>
    
    
      <category term="OOP" scheme="https://sub2n.github.io/tags/OOP/"/>
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
      <category term="Class" scheme="https://sub2n.github.io/tags/Class/"/>
    
      <category term="Access Modifier" scheme="https://sub2n.github.io/tags/Access-Modifier/"/>
    
  </entry>
  
  <entry>
    <title>190424-TIL</title>
    <link href="https://sub2n.github.io/2019/04/24/190424-TIL/"/>
    <id>https://sub2n.github.io/2019/04/24/190424-TIL/</id>
    <published>2019-04-24T06:18:00.000Z</published>
    <updated>2019-04-24T08:01:32.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h3><ul><li><p>Python Class 선언과 instance를 만드는 방법에 대해서 배웠다.</p></li><li><p>Object-Oriented Programming에 대해서 정리한 내용을 포스팅했다. ✨<a href="https://sub2n.github.io/2019/04/24/4-Fundamental-of-Object-Oriented-Programming/">4 Fundamentals of OOP</a></p></li><li><p>Python Access Modifier에 대해서 알고 정리했다.</p></li><li><p>Network 계층 및 Eathernet과 IP Protocol에 대해서 배웠다.</p></li><li><p>Quick sort | Divide and Conquer - Python으로 Code를 짰다</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>4 Fundamental of Object Oriented Programming</title>
    <link href="https://sub2n.github.io/2019/04/24/4-Fundamental-of-Object-Oriented-Programming/"/>
    <id>https://sub2n.github.io/2019/04/24/4-Fundamental-of-Object-Oriented-Programming/</id>
    <published>2019-04-24T01:09:40.000Z</published>
    <updated>2019-04-24T01:55:19.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="추상화-Abstraction"><a href="#추상화-Abstraction" class="headerlink" title="추상화 | Abstraction ?"></a>추상화 | Abstraction ?</h2><ul><li><p>추상화란, 복잡한 로직을 가지고 있는 기능에서 그것을 다루기 위해 필요한 최소한의 핵심만을 추출해내는 것을 말한다. 정의만 들으면 어렵다. </p><p>TV 전원을 예로 들어 생각해보자. 새로 산 TV의 설명서를 보면 TV를 켜려면 전원 버튼을 누르라고 되어있다. 사용자는 전원 버튼을 누르면 쉽게 TV를 켤 수 있다.</p><p>그러나 실제로 TV의 전원 버튼을 누르는 순간 내부 전기회로에서는 복잡한 기능이 실행될 것이다. 사용자는 그것을 알 수 없고, 알 필요도 없다. TV 제작 회사에서 TV에 대한 추상화를 시켜 사용자가 쉽게 TV를 동작시킬 수 있도록 한 것이다.</p></li><li><p>함수를 보통 function, routine, procedure 라고 부른다. 이 때, procedure 단위로 추상화를 하고 procdural하게 진행하는 프로그램을 절차 지향 프로그램이라고 한다. 그러나 프로그램이 거대해지고, 코드가 길어지자 프로그램을 객체(object)로 추상화하는 방법론이 나왔고 그걸 적용한 게 객체 지향 프로그램이다.</p></li></ul><h3 id="절차-지향-Procedural-Programming-procedure-단위-추상화"><a href="#절차-지향-Procedural-Programming-procedure-단위-추상화" class="headerlink" title="절차 지향 Procedural Programming : procedure 단위 추상화"></a>절차 지향 Procedural Programming : procedure 단위 추상화</h3><h3 id="객체-지향-Object-Oriented-Programming-Object-단위-추상화"><a href="#객체-지향-Object-Oriented-Programming-Object-단위-추상화" class="headerlink" title="객체 지향 Object Oriented Programming : Object 단위 추상화"></a>객체 지향 Object Oriented Programming : Object 단위 추상화</h3><h2 id="Function-Abstraction"><a href="#Function-Abstraction" class="headerlink" title="Function Abstraction"></a>Function Abstraction</h2><ul><li>Function Signature (Interface) : function name, parameter, return calue</li><li>Implementation : operations</li><li>함수의 명세(Function Signature)와 내부구현(Implementation)을 분리하는 것</li></ul><h1 id="4-Fundamental-of-Object-Oriented-Programming"><a href="#4-Fundamental-of-Object-Oriented-Programming" class="headerlink" title="4 Fundamental of Object Oriented Programming"></a>4 Fundamental of Object Oriented Programming</h1><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>Encapsulation은 모든 object가 그 state(private variables)를 class내부에 private으로 보유하고 있을 때 지켜진다. 다른 object들은 그 state에 직접 접근할 필요 없이, 해당 object의 public object(method)를 호출한다. 결과적으로 object는 자신의 state를 method를 통해 관리한다.</p><h2 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h2><p>추상화는 encapsulation을 자연스럽게 확장한 것으로 볼 수 있다.<br>추상화를 적용한다는 것은, 각 object를 사용할 때 오직 high-level machanism만을 공개해야한다는 것이다. 이 mechanism은 내부 implementation을 숨기고, 오직 관련된 객체의 operation으로만 접근할 수 있다. 즉, 사용자는 class의 method가 어떻게 작동하는지 알 필요 없이 제공된 interface(method name, parameter, return value)만 알고 사용할 수 있다.</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>대부분의 object는 비슷하고 공통된 logic을 공유한다. 상속을 통해 중복되는 코드를 최대한 방지하는 것이 inheritance의 핵심이다. Parent class로부터 child class를 만들 수 있으며, child class는 parent class의 모든 영역을 재사용할 수 있는 특권을 가진다. Parent class의 기능에 자신만의 method를 추가하거나 재정의(override)할 수 있다.</p><h2 id="Polymorphism-One-Interface-and-Multiple-Implementations"><a href="#Polymorphism-One-Interface-and-Multiple-Implementations" class="headerlink" title="Polymorphism | One Interface and Multiple Implementations."></a>Polymorphism | One Interface and Multiple Implementations.</h2><p>다형성. 우리가 parent class와 그로부터 상속받은 여러 child class를 가지고 있을 때, 이 모든 class를 collection처럼 한번에 쓰고 싶을 때가 있을 것이다. Polymorphism은 class를 이렇게 사용할 수 있게 하는 방법 제공한다. Parent class에 interface method를 선언하고(implementation은 하지 않는다!) child class에서 그 method의 implementation을 담당하는 것이다.</p><blockquote><p>상속은 많은 형태의 변화를 가능케 한다. Parent class를 상속하는 child class는 parent class로 정의될 수 있다. (ex. Child C = new Parent(); ) </p></blockquote><h2 id="Function-OverLoading-이름은-같지만-signature-parameter-수-data-type-는-다른-method를-중복으로-선언하는-것"><a href="#Function-OverLoading-이름은-같지만-signature-parameter-수-data-type-는-다른-method를-중복으로-선언하는-것" class="headerlink" title="Function OverLoading : 이름은 같지만 signature(parameter 수, data type)는 다른 method를 중복으로 선언하는 것"></a>Function OverLoading : 이름은 같지만 signature(parameter 수, data type)는 다른 method를 중복으로 선언하는 것</h2><p>method 이름은 같아야 한다. Parameter 수는 달라야 하며, 같다면 data type이 달라야 한다.</p><h2 id="Method-OverRiding-부모-클래스의-method-동작-방법을-재정의하여-우선적으로-사용하는-것"><a href="#Method-OverRiding-부모-클래스의-method-동작-방법을-재정의하여-우선적으로-사용하는-것" class="headerlink" title="Method OverRiding : 부모 클래스의 method 동작 방법을 재정의하여 우선적으로 사용하는 것."></a>Method OverRiding : 부모 클래스의 method 동작 방법을 재정의하여 우선적으로 사용하는 것.</h2><p>override 하고자 하는 method가 상위 클래스에 존재해야 한다. Method 이름이 같아야 하며, parameter 개수, data type, return type 등 모든 signature를 동일하게 사용한다. 달라지는 것은 내부 구현 뿐이다.</p><p>부르는 object만 달라질뿐 method 이름을 동일하게 하면 하나의 method로 여러 기능을 실행할 수 있다.</p><hr><p>참고 자료 <a href="https://medium.freecodecamp.org/object-oriented-programming-concepts-21bb035f7260" target="_blank" rel="noopener">How to explain object-oriented programming concepts to a 6-year-old</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;추상화-Abstraction&quot;&gt;&lt;a href=&quot;#추상화-Abstraction&quot; class=&quot;headerlink&quot; title=&quot;추상화 | Abstraction ?&quot;&gt;&lt;/a&gt;추상화 | Abstraction ?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;추
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="OOP" scheme="https://sub2n.github.io/tags/OOP/"/>
    
      <category term="Encapsulation" scheme="https://sub2n.github.io/tags/Encapsulation/"/>
    
      <category term="Abstraction" scheme="https://sub2n.github.io/tags/Abstraction/"/>
    
      <category term="Polymorphisim" scheme="https://sub2n.github.io/tags/Polymorphisim/"/>
    
      <category term="Inheritance" scheme="https://sub2n.github.io/tags/Inheritance/"/>
    
  </entry>
  
  <entry>
    <title>Recursion</title>
    <link href="https://sub2n.github.io/2019/04/23/Recursion/"/>
    <id>https://sub2n.github.io/2019/04/23/Recursion/</id>
    <published>2019-04-23T09:31:17.000Z</published>
    <updated>2019-04-24T07:47:35.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Recursion-재귀"><a href="#Recursion-재귀" class="headerlink" title="Recursion (재귀)"></a>Recursion (재귀)</h1><ol><li>함수 호출 도중에 자기 자신을 다시 호출하는 것</li><li><p>Base case가 필수 (기초, 종료, 탈출 조건)</p><p> Base case가 없으면 무한으로 자기 자신을 호출해서 stack overflow가 된다.</p></li></ol><h2 id="재귀함수를-만드는-방법"><a href="#재귀함수를-만드는-방법" class="headerlink" title="재귀함수를 만드는 방법"></a>재귀함수를 만드는 방법</h2><ol><li>패턴을 찾는다. 즉, 점화식(Induction)을 만든다.</li><li>Base case를 만든다.</li></ol><h2 id="예제1-Factorial"><a href="#예제1-Factorial" class="headerlink" title="예제1: Factorial !"></a>예제1: Factorial !</h2><ul><li><p>Basis </p><p> 0! = 1! = 1</p></li><li><p>Induction Step </p><p>n! = (n-1) <em> (n-2) </em> (n-3) <em> … 3 </em> 2 * 1</p></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">factorial</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> n*factorial(n<span class="hljs-number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="예제2-Fibonacci"><a href="#예제2-Fibonacci" class="headerlink" title="예제2: Fibonacci"></a>예제2: Fibonacci</h2><ul><li><p>Basis</p><p>  fib(0) = fib(1) = 1</p></li><li><p>Induction Step</p><p>  fib(n) = fib(n-1) + fib(n-2)</p></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-1</span>) + fib(n<span class="hljs-number">-2</span>)</span><br></pre></td></tr></table></figure><h2 id="Fibonacci-Dynamic-Programming"><a href="#Fibonacci-Dynamic-Programming" class="headerlink" title="Fibonacci Dynamic Programming"></a>Fibonacci Dynamic Programming</h2><ol><li>Memorization (Top Down)</li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = [<span class="hljs-number">-1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>)]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib_memorize</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f[n] &gt; <span class="hljs-number">-1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> f[n]</span><br><span class="line">    <span class="hljs-keyword">elif</span> n &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">        f[n] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        f[n] = fib_memorize(n<span class="hljs-number">-1</span>) + fib_memorize(n<span class="hljs-number">-2</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><ol start="2"><li>Bottom Up</li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f2 = [<span class="hljs-number">-1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>)]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib_bottup</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    f2[<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):</span><br><span class="line">        f[n] = f[n<span class="hljs-number">-1</span>] + f[n<span class="hljs-number">-2</span>]</span><br><span class="line">    <span class="hljs-keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><h2 id="예제3-Hanoi-Tower"><a href="#예제3-Hanoi-Tower" class="headerlink" title="예제3: Hanoi Tower"></a>예제3: Hanoi Tower</h2><p><a href="https://www.mathsisfun.com/games/towerofhanoi.html" target="_blank" rel="noopener">Play Tower of Hanoi</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(n, _from, _by, _to)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># base case</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:</span><br><span class="line">        print(<span class="hljs-string">f'<span class="hljs-subst">&#123;n&#125;</span>번째 쟁반을 <span class="hljs-subst">&#123;_from&#125;</span>에서 <span class="hljs-subst">&#123;_to&#125;</span>로 옮긴다.'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span></span><br><span class="line">    hanoi(n<span class="hljs-number">-1</span>, _from, _to, _by)</span><br><span class="line">    print(<span class="hljs-string">f'<span class="hljs-subst">&#123;n&#125;</span>번째 쟁반을 <span class="hljs-subst">&#123;_from&#125;</span>에서 <span class="hljs-subst">&#123;_to&#125;</span>로 옮긴다.'</span>)</span><br><span class="line">    hanoi(n<span class="hljs-number">-1</span>, _by, _from, _to)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Recursion-재귀&quot;&gt;&lt;a href=&quot;#Recursion-재귀&quot; class=&quot;headerlink&quot; title=&quot;Recursion (재귀)&quot;&gt;&lt;/a&gt;Recursion (재귀)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;함수 호출 도중에 자기 자신을 다시 
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Computer-Engineering/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
      <category term="Recursion" scheme="https://sub2n.github.io/tags/Recursion/"/>
    
  </entry>
  
  <entry>
    <title>190423-TIL</title>
    <link href="https://sub2n.github.io/2019/04/23/190423-TIL/"/>
    <id>https://sub2n.github.io/2019/04/23/190423-TIL/</id>
    <published>2019-04-23T09:09:35.000Z</published>
    <updated>2019-04-23T09:27:41.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h3><ul><li>Big-O notation을 다시 한 번 정리하며 성능순으로 정리했다.</li></ul><ol><li>O(1) : 상수 시간<ul><li>엄청 빠름</li><li>array의 indexing, linked list의 insert, delete</li></ul></li><li>O(logn) : 로그 시간<ul><li>Binary Search Tree의 insert, search, delete</li></ul></li><li>O(n) : 선형 시간<ul><li>linked list의 search, 특정 array의 insert, delete</li></ul></li><li>O(nlogn) : 선형 로그 시간<ul><li>quicksort, merge sort</li><li>comparision sorting의 경우 quick sort보다 성능 좋을 수 없다.</li></ul></li><li>O(n<sup>2</sup>) : 지수시간(?)<ul><li>bubble sort, select sort, insert sort 등</li></ul></li></ol><ul><li><p>Memory | Performance of fbstring</p><p>Memory에 관련된 영상 하나를 보고 Memory 공부를 했다. <a href="https://www.youtube.com/watch?v=kPR8h4-qZdk" target="_blank" rel="noopener">Performance of fbstring</a></p><p>나는 전공 수업에서 OS를 들으며 배웠던 내용이라, 그 때 배웠던 것들을 처음부터 정리하며 복습 했다.</p></li><li><p>Process and Thread</p><p>어렵고 다룰 게 많은 주제인데 한 번에 후다닥 나가는 느낌이라 아쉬웠다. OS를 복습할 겸 Chapter 별로 정리해 포스팅할 계획을 세웠다.</p></li><li><p>Process와 Memory 개념 정리</p></li><li><p>Codewars 5kyu Sum of Pairs 문제를 풀었다. 자꾸 Timeout이 나서 성능을 좋게 만들려고 최대한 노력했다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190422-TIL</title>
    <link href="https://sub2n.github.io/2019/04/22/190422-TIL/"/>
    <id>https://sub2n.github.io/2019/04/22/190422-TIL/</id>
    <published>2019-04-22T12:09:23.000Z</published>
    <updated>2019-04-22T12:50:46.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h3><ul><li><p>Python Functions(호출 방식, stack, map filter 등)을 배우고 posting으로 정리했다.</p></li><li><p>LeetCode 알고리즘을 풀고, 알고리즘 스터디를 했다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>First-class Function</title>
    <link href="https://sub2n.github.io/2019/04/22/First-class-Function/"/>
    <id>https://sub2n.github.io/2019/04/22/First-class-Function/</id>
    <published>2019-04-22T12:05:45.000Z</published>
    <updated>2019-04-29T09:08:33.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="First-class-Function"><a href="#First-class-Function" class="headerlink" title="First-class Function"></a>First-class Function</h1><ul><li>프로그래밍 언어 중 함수를 다른 변수와 동일하게 다루는 언어를 함수우선순위(First-class Functions) 가졌다고 표현한다.</li><li>함수를 다른 함수의 argument로 사용하고, 함수에서 함수를 return하거나 변수의 값으로 함수를 할당할 수 있다.</li></ul><ol><li>변수에 함수를 할당 <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"foobar"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 변수를 사용하여 호출</span></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>함수를 인자로 전달 <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeting</span>(<span class="hljs-params">helloMessage, name</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(helloMessage() + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// `sayHello`를 `greeting` 함수에 인자로 전달</span></span><br><span class="line">greeting(sayHello, <span class="hljs-string">"JavaScript!"</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li>다른 함수에 인자로 전달된 함수를 Call Back 함수라고 한다. </li><li>다른 언어들과 같이 sayHello()를 호출하면 바로 실행되지만, 위와 같이 greeting(satHello, “)의 인자로 전달된 sayHello의 경우 greeting 함수의 helloMessage parameter로 전달된 후에, 필요한 경우 helloMessage()에서 호출된다.</li><li>전달된 이후 나중에 호출되기 때문에 CallBack 함수라고 불린다.</li></ul><ol start="3"><li><p>함수를 return 값으로 전달 (함수 return)</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>함수가 함수를 반환하는 예시문. JavaScript에서는 함수를 변수처럼 취급하므로 함수를 return할 수 있다.</li><li>Higher-Order Function : 함수를 반환하는 함수</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;First-class-Function&quot;&gt;&lt;a href=&quot;#First-class-Function&quot; class=&quot;headerlink&quot; title=&quot;First-class Function&quot;&gt;&lt;/a&gt;First-class Function&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="Fisrt-class Function" scheme="https://sub2n.github.io/tags/Fisrt-class-Function/"/>
    
  </entry>
  
  <entry>
    <title>Call by Value, Call by Reference and Call by Object Reference</title>
    <link href="https://sub2n.github.io/2019/04/22/Call-by-Value-Call-by-Reference-and-Call-by-Object-Reference/"/>
    <id>https://sub2n.github.io/2019/04/22/Call-by-Value-Call-by-Reference-and-Call-by-Object-Reference/</id>
    <published>2019-04-22T11:28:15.000Z</published>
    <updated>2019-04-22T12:05:05.865Z</updated>
    
    <content type="html"><![CDATA[<p>우선 Parameter와 Argument의 차이를 짚고 가도록 한다.</p><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><p>The names given in the function definition are called Parameters.</p><h2 id="Argument"><a href="#Argument" class="headerlink" title="Argument"></a>Argument</h2><p>The values supplied in the function call are called Arguments.</p><h1 id="Call-by-Value"><a href="#Call-by-Value" class="headerlink" title="Call by Value"></a>Call by Value</h1><ul><li><p>함수를 호출할 때, 변수의 값을 복사하여 argument로 넘기는 것</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  x = val;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in change_value \n"</span>, *x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;</span><br><span class="line">  change_value(x, <span class="hljs-number">20</span>);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in main \n"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/56498729-04895e80-653e-11e9-9fcc-11c71a94318b.png" alt="Call by Value"></p><ul><li>위 코드에서는 단순히 x에 10이라는 값이 복사되어 들어가기 때문에, change_value(x, 20)에서 x를 변경하더라도 main 함수에서의 x에 영향을 미치지 못한다.</li></ul></li></ul><h1 id="Call-by-Reference"><a href="#Call-by-Reference" class="headerlink" title="Call by Reference"></a>Call by Reference</h1><ul><li>함수를 호출할 때 변수의 값을 넘기는 것이 아니라, 변수의 주소(변수의 위치)를 복사하여 함수에 넘긴다.</li><li><p>넘겨받은 주소로 실제 변수에 접근하고 값을 변경할 수 있다.</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * x, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  *x = val;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in change_value \n"</span>, *x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;</span><br><span class="line">  change_value(&amp;x, <span class="hljs-number">20</span>);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in main \n"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/56498618-76ad7380-653d-11e9-9dce-3b56346565ce.png" alt="Call by Reference"></p></li><li><p>주소값을 전달 (참조값을 전달) : 주소값을 알고 있으면 해당 memory 주소에 저장되어있는 값을 참조할 수 있다.</p></li><li><p>*x가 x를 참조하고 있다 : 가리키고 있다.</p><p>이를 이해하기 위해서는 pointer에 대한 이해가 필요하다.</p></li><li><p>Pointer </p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> *pnum;</span><br><span class="line"><span class="hljs-keyword">int</span> num = <span class="hljs-number">12345</span>;</span><br><span class="line">pnum = &amp;num <span class="hljs-comment">//num의 주소값을 return하여 pnum에 저장</span></span><br></pre></td></tr></table></figure><ul><li>변수를 만들 때 변수 이름 앞에 *를 붙이면 pointer 변수 됨</li><li>&amp;연산자: &amp;오른쪽에 오는 피연산자의 주소값을 반환</li><li>*연산자: 포인터가 가리키는 메모리 공간에 접근할 때 사용되는 연산자. 포인터 변수를 이용해 포인터 변수가 가리키는 변수의 값을 바꿀 수도 있다.</li></ul></li></ul><h1 id="Call-by-Assignment-Call-by-Object-Reference"><a href="#Call-by-Assignment-Call-by-Object-Reference" class="headerlink" title="Call by Assignment (Call by Object Reference)"></a>Call by Assignment (Call by Object Reference)</h1><blockquote><p>The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). [1] When a function calls another function, a new local symbol table is created for that call.</p></blockquote><p>이 문장이 나를 얼마나 헷갈리게 했는지 모른다. 그러니까 Python에서는 function의 argument가 call by value로 넘어오는데, 그 value는 언제나 object의 값이 아닌 object의 reference라는 것이다.</p><blockquote><p>Actually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list).</p></blockquote><p>정확하게는 call by object reference라는 설명이 더 맞다. 왜냐면 mutable 객체가 넘어올 때에는 call by reference처럼 원본 값을 변경할 수 있기 때문이다.</p><ul><li>파이썬은 모든 것이 object이고, Object에는 두 종류가 있다.</li></ul><ol><li>Immutable object<ul><li>int, float, str, tuple</li><li>Immtable 객체가 함수의 인자로 전달되면, 처음에는 call by reference로 받지만 값이 변경되면 call by value로 동작한다.</li><li>즉, 함수 내에서 formal parameter 값이 바뀌어도 actual parameter에는 영향이 없다.</li><li>함수 내부에서 값을 변경할 수 없다!</li><li>그래서 tuple은 변경하려면 함수에서 element와 tuple 인자로 넘겨 아예 새로 할당해줘야 함</li></ul></li><li>Mutable object<ul><li>list, dict, set</li><li>Mutable 객체가 함수의 인자로 넘어가면 call by reference도 동작한다. 즉, object referene가 전달되어 actual parameter의 값에 영향을 미칠 수도 있다.</li><li>새로운 객체를 할당하는 게 아니라면, 함수 내부에서 값을 변경할 수 있다!</li></ul></li></ol><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>Python은 함수를 실행할때 Call by reference같은 느낌으로 reference를 넘겨준다. 하지만 이때 넘겨주는 것은 변수(Variable)의 reference가 아니라 변수가 담고 있는 자료(Data)의 reference이다. </li><li>자료가 mutable하다면 변경해도 reference가 보존되므로 결과적으로 Call by reference처럼 보일 것이고, 자료가 immutable하다면 결과적으로 Call by value처럼 보일 것이다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우선 Parameter와 Argument의 차이를 짚고 가도록 한다.&lt;/p&gt;
&lt;h2 id=&quot;Parameter&quot;&gt;&lt;a href=&quot;#Parameter&quot; class=&quot;headerlink&quot; title=&quot;Parameter&quot;&gt;&lt;/a&gt;Parameter&lt;/h2
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
      <category term="C" scheme="https://sub2n.github.io/tags/C/"/>
    
      <category term="Call by Value" scheme="https://sub2n.github.io/tags/Call-by-Value/"/>
    
      <category term="Call by Reference" scheme="https://sub2n.github.io/tags/Call-by-Reference/"/>
    
      <category term="Call by Object Reference" scheme="https://sub2n.github.io/tags/Call-by-Object-Reference/"/>
    
  </entry>
  
  <entry>
    <title>Local Variable and Global Variable</title>
    <link href="https://sub2n.github.io/2019/04/22/Local-Variable-and-Global-Variable/"/>
    <id>https://sub2n.github.io/2019/04/22/Local-Variable-and-Global-Variable/</id>
    <published>2019-04-22T10:32:36.000Z</published>
    <updated>2019-04-22T11:29:26.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="전역변수-global-variable-지역변수-local-variable"><a href="#전역변수-global-variable-지역변수-local-variable" class="headerlink" title="전역변수 (global variable) / 지역변수 (local variable)"></a>전역변수 (global variable) / 지역변수 (local variable)</h1><ol><li>변수의 scope와 lifetime</li></ol><ul><li>변수는 선언하는 순간부터 속한 scope 내에서 lifetime을 가진다. 즉, 특정 범위의 코드가 실행되고 있을 때는 메모리에 존재하지만, 실행이 끝나면 이 변수는 메모리에서 사라진다.</li></ul><ol start="2"><li><p>변수의 선언 위치</p><p> a. Block 외부 : block({})으로 감싸진 main 함수와 여러 함수들의 외부 공간에 변수를 선언할 수 있다.</p><p> b. Block 내부 : block 내부에 변수를 선언할 수 있다. C는 block의 최상단에 모든 지역변수를 선언해야한다.</p><p> c. 함수의 parameter : 함수의 매개변수는 그 함수의 block 내에서 선언된 변수와 동일한 효과를 갖는다.</p></li><li><p>전역변수 (a case)</p></li></ol><ul><li><p>Block 외부에 선언되는 변수. 전역 변수는 프로그램이 시작되는 순간부터 종료되는 순간까지 메모리를 차지하고 있으며 사라지지 않는다.</p></li><li><p>C라면 <code>main()</code> 위, <code>#include &lt;stdio.h&gt;</code>와 함수 원형 밑 그 사이에 선언</p></li><li><p>전역변수는 어느 block에서도 언제든지 접근이 가능하다 &gt; sycncrinize 고려</p></li></ul><ol start="4"><li>지역변수 (b case, c case)</li></ol><ul><li><p>지역변수는 block 내부에서 선언되는 변수이다. { } 안에 선언되어있다면 무조건 지역변수</p></li><li><p>지역변수는 선언된 block 내부로 scope가 한정되며 그 block의 실행이 끝나면 lifetime 또한 소멸된다.</p></li><li><p>함수의 parameter로서 선언되는 local variable도 이와 같다. 함수 body 내에서 선언되는 것과 똑같다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;전역변수-global-variable-지역변수-local-variable&quot;&gt;&lt;a href=&quot;#전역변수-global-variable-지역변수-local-variable&quot; class=&quot;headerlink&quot; title=&quot;전역변수 (global
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
      <category term="global variable" scheme="https://sub2n.github.io/tags/global-variable/"/>
    
      <category term="local variavble" scheme="https://sub2n.github.io/tags/local-variavble/"/>
    
  </entry>
  
</feed>
