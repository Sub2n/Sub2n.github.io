<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>수빈 개발블로그</title>
  
  <subtitle>Sub2n Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sub2n.github.io/"/>
  <updated>2019-05-09T08:17:34.744Z</updated>
  <id>https://sub2n.github.io/</id>
  
  <author>
    <name>Subin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CodeWars 6kyu. Build a pile of Cubes</title>
    <link href="https://sub2n.github.io/2019/05/09/CodeWars-6kyu-Build-a-pile-of-Cubes/"/>
    <id>https://sub2n.github.io/2019/05/09/CodeWars-6kyu-Build-a-pile-of-Cubes/</id>
    <published>2019-05-09T07:19:09.000Z</published>
    <updated>2019-05-09T08:17:34.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Build-a-pile-of-Cubes"><a href="#CodeWars-6kyu-Build-a-pile-of-Cubes" class="headerlink" title="CodeWars 6kyu. Build a pile of Cubes"></a><a href="https://www.codewars.com/kata/build-a-pile-of-cubes/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Build a pile of Cubes</a></h2><p>Find the largest number of cubes can be piled.</p><a id="more"></a><blockquote><p>Your task is to construct a building which will be a pile of n cubes. The cube at the bottom will have a volume of n^3, the cube above will have volume of (n-1)^3 and so on until the top which will have a volume of 1^3.</p><p>You are given the total volume m of the building. Being given m can you find the number n of cubes you will have to build?</p><p>The parameter of the function findNb (find_nb, find-nb, findNb) will be an integer m and you have to return the integer n such as n^3 + (n-1)^3 + … + 1^3 = m if such a n exists or -1 if there is no such n.</p></blockquote><blockquote><p>Examples:</p><p>findNb(1071225) –&gt; 45<br>findNb(91716553919377) –&gt; -1<br>mov rdi, 1071225<br>call find_nb            ; rax &lt;– 45</p><p>mov rdi, 91716553919377<br>call find_nb            ; rax &lt;– -1</p></blockquote><h2 id="접근법"><a href="#접근법" class="headerlink" title="접근법"></a>접근법</h2><p>Σ k<sup>3</sup> (k = 1~n) == ((n * (n+1))/2))**2 가 m보다 작아야 한다.</p><p>따라서 n == Math.sqrt(2 * Math.sqrt(m)) 에 근사한 값으로 설정한 후 m보다 커질 때까지 반복한다.</p><h2 id="JavaScript-Solution"><a href="#JavaScript-Solution" class="headerlink" title="JavaScript Solution"></a>JavaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/57434636-5c320480-7276-11e9-9045-4b17910f48f8.png" alt="Solution Submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findNb</span>(<span class="hljs-params">m</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> n = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-number">2</span> * (<span class="hljs-built_in">Math</span>.sqrt(m)))) - <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> ( ((n * (n+<span class="hljs-number">1</span>))/<span class="hljs-number">2</span>) ** <span class="hljs-number">2</span> &lt; m ) &#123;</span><br><span class="line">      n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> ((n * (n+<span class="hljs-number">1</span>))/<span class="hljs-number">2</span>) ** <span class="hljs-number">2</span> &gt; m ? <span class="hljs-number">-1</span> : n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Build-a-pile-of-Cubes&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Build-a-pile-of-Cubes&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Build a pile of Cubes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/build-a-pile-of-cubes/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Build a pile of Cubes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Find the largest number of cubes can be piled.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190509-TIL</title>
    <link href="https://sub2n.github.io/2019/05/09/190509-TIL/"/>
    <id>https://sub2n.github.io/2019/05/09/190509-TIL/</id>
    <published>2019-05-09T07:15:52.000Z</published>
    <updated>2019-05-09T07:18:13.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li><p>Implemented underscore libray’s last function</p><p><img src="https://user-images.githubusercontent.com/48080762/57434410-e332ad00-7275-11e9-9c6f-2c85032b12d2.png" alt="Condition complete"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Like first, but for the last elements. If n is undefined, return just the</span></span><br><span class="line"><span class="hljs-comment">// last element.</span></span><br><span class="line">_.last = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">array, n</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> n === <span class="hljs-literal">undefined</span> ? array[array.length<span class="hljs-number">-1</span>] : n &gt; array.length ? array : array.slice(array.length-n, array.length);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Studied about JavaScript global variable and let, const keyword variables.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implement
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>15. Property Definition</title>
    <link href="https://sub2n.github.io/2019/05/09/15-Property-Definition/"/>
    <id>https://sub2n.github.io/2019/05/09/15-Property-Definition/</id>
    <published>2019-05-09T06:11:04.000Z</published>
    <updated>2019-05-10T02:38:48.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-What-is-Property-Definition"><a href="#1-What-is-Property-Definition" class="headerlink" title="1. What is Property Definition?"></a>1. What is Property Definition?</h1><p>프로퍼티 정의란 프로퍼티 어트리뷰트의 값을 정의하여 프로퍼티의 상태를 관리하는 것. 예를 들면 프로퍼티 값을 갱신 가능하도록 할 것인지, 프로퍼티를 열거 가능하도록 할 것인지, 재정의 가능하도록 할 것인지를 정의할 수 있다.</p><p>객체 리터럴이 평가되거나 프로퍼티가 동적 생성될 때 프로퍼티가 생성된다. 자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Dynamic creation of properties. The JavaScript engine creates the property and defines the property's attributes as the default.</span></span><br><span class="line">obj.prop = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> descriptor = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="hljs-string">'prop'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(descriptor);</span><br><span class="line"><span class="hljs-comment">// &#123;value: 10, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure><p>프로퍼티 동적 생성은 프로퍼티가 존재하지 않을 때 프로퍼티를 생성하여 추가하는 것이다.</p><p>프로퍼티 정의는 프로퍼티 어트리뷰트를 정의하는 것을 말한다. 프로퍼티 어트리뷰트는 프로퍼티의 상태를 나타낸다.</p><p>프로퍼티의 상태란 프로퍼티의,</p><ul><li>value</li><li>writable</li><li>enumerable</li><li>configurable</li></ul><p>프로퍼티 어트리뷰트는 <code>Object.getOwnPropertyDescriptor</code> 메소드를 사용해 참조할 수 있다. 이 메소드는 프로퍼티 어트리뷰트를 객체로 표현한 PropertyDescriptor 객체를 반환한다. 존재하지 않는 프로퍼티나, 상속받은 프로퍼티에 대한 PropertyDescriptor를 요구하면 undefined가 반환된다.</p><p>프로퍼티가 동적 생성될 때 자바스크립트 엔진은 프로퍼티 어트리뷰트를 기본값으로 정의한다. 이미 정의된 프로퍼티 어트리뷰트를 재정의할 수도 있다.</p><h1 id="2-Internal-Slot-Method"><a href="#2-Internal-Slot-Method" class="headerlink" title="2. Internal Slot / Method"></a>2. Internal Slot / Method</h1><p>Internal slot and internal method는 ECMAScript 스펙에서 요구하는 객체 관련 내부 상태와 내부 동작을 정의한 것이다. ECMAScript 스펙에서 <code>[[...]]</code>로 감싼 이름들이 내부 슬롯과 내부 메소드이다.</p><p>Internal slot과 method는 자바스크립트 엔진의 내부 구현 사양을 정의한 것이므로 외부에 노출되지 않는다. </p><p>객체의 프로퍼티 키로 프로퍼티 값에 접근할 때 <code>[[Get]]</code> 내부 메소드가 내부적으로 호출된다. <code>[[Get]]</code> 내부 메소드는 다음과 같이 동작한다.</p><ol><li>프로퍼티 키가 유효한지 확인한다. (문자열 또는 심볼)</li><li>프로토타입 체인에서 프로퍼티를 검색한다.</li></ol><blockquote><h3 id="Prototype-and-Prototype-Chain"><a href="#Prototype-and-Prototype-Chain" class="headerlink" title="Prototype and Prototype Chain"></a>Prototype and Prototype Chain</h3><p>프로토타입은 어떤 객체의 parent 객체 역할을 하는 객체이다. 프로토타입은 Child 객체에게 자신의 프로퍼티와 메소드를 상속한다. Prototype객체의 프로퍼티나 메소드를 상속받은 child 객체는 parent 객체의 프로퍼티나 메소드를 자유롭게 사용한다.</p><p>프로토타입 체인은 프로토타입 객체가 연결되어있는 상속 구조이다. 어떤 객체의 프로퍼티나 메소드에 접근하려고 할 때, 해당 객체에 접근하려는 프로퍼티나 메소드가 없다면 프로토타입 체인을 따라 상위(부모) 객체의 프로퍼티나 메소드를 차례대로 검색한다.</p></blockquote><ol start="3"><li>검색된 프로퍼티가 Data property라면 프로퍼티 값(데이터 프로퍼티의 프로퍼티 어트리뷰트 [[Value]])의 값을 그대로 반환한다.</li><li>만약 검색된 프로퍼티가 Accessor property라면 접근자 프로퍼티의 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수를 호출하고 그 결과를 반환한다.</li></ol><p>함수 객체에는 [[Call]]이라는 고유한 internal method가 있다. [[Call]]은 함수를 호출하면 내부적으로 호출된다. 이는 일반 객체에는 없는 함수 객체만의 고유한 internal method이다.</p><h1 id="3-Accessor-Property"><a href="#3-Accessor-Property" class="headerlink" title="3. Accessor Property"></a>3. Accessor Property</h1><p>프로퍼티는 Data property와 Accessor property로 구분할 수 있다.</p><ul><li>Data property<ul><li>키와 값으로 구성된 일반 프로퍼티. 지금까지 살펴본 모든 프로퍼티는 데이터 프로퍼티이다.</li></ul></li><li>Accessor property<ul><li>자체적으로는 값을 갖지 않고 다른 data property의 값을 읽거나 저장할 때 사용되는 Accessor function으로 구성된 프로퍼티</li></ul></li></ul><p>Accessor function은 getter / setter 함수라고도 부른다. </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> student = &#123;</span><br><span class="line">    <span class="hljs-comment">// Data property</span></span><br><span class="line">    name: <span class="hljs-string">'Park'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// Accessor property</span></span><br><span class="line">    <span class="hljs-keyword">get</span> infoName() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">set</span> infoName(newName) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// A reference to a property value through a data property.</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student);<span class="hljs-comment">// &#123;name: "Park", age: 25&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Setting Property Values with Accessor Properties</span></span><br><span class="line"><span class="hljs-comment">// If store the value in the accessor property infoName, the setter function is called.</span></span><br><span class="line">student.infoName = <span class="hljs-string">'Kim'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(student);<span class="hljs-comment">// &#123;name: "Kim", age: 25&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Getting Property Values with Accessor Properties</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student.infoName);<span class="hljs-comment">// Kim</span></span><br></pre></td></tr></table></figure><p>student 객체의 name은 일반적인 데이터 프로퍼티이다.</p><p>get infoName은 getter 함수, set infoName은 setter 함수이고 함수의 이름인 infoName이 바로 접근자 프로퍼티이다. 접근자 프로터티는 값([[Value]] attribute)을 가지지 않고 데이터 프로퍼티의 값을 읽거나(get) 저장(set)할 때 동작한다.</p><p>Accessor property infoName으로 프로퍼티 값에 접근하면 내부적으로 [[Get]] internal method가 호출되어 다음과 같이 동작한다.</p><ol><li>프로퍼티 키가 유효한지 확인한다. (문자열 또는 숫자인지)</li><li>프로토타입 체인에서 프로퍼티를 검색한다.</li><li>검색된 infoName 프로퍼티가 data property인지 accessor property인지 확인한다. infoName은 Accessor property이다.</li><li>Accessor property infoName의 프로퍼티 어트리뷰트 [[Get]]의 값, 즉 getter 함수를 호출해 결과를 반환한다. 프로퍼티 infoName의 프로퍼티 어트리뷰트 [[Get]]의 값은 Object.getOwnPropertyDescriptor 메소드가 반환하는 프로퍼티 디스크립터(PropertyDescriptor) 객체의 get 프로퍼티 값과 같다.</li></ol><p>Accessor property와 data property의 구별 방법</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// The __proto__ of a generic object is an accessor property.</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(<span class="hljs-built_in">Object</span>.prototype, <span class="hljs-string">'__proto__'</span>);</span><br><span class="line"><span class="hljs-comment">// &#123;get: ƒ, set: ƒ, enumerable: false, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// The prototype of a function object is a data property.</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;, <span class="hljs-string">'prototype'</span>);</span><br><span class="line"><span class="hljs-comment">// &#123;value: &#123;…&#125;, writable: true, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure><p>Accessor property와 data property의 property descriptor object의 프로퍼티가 다르다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-What-is-Property-Definition&quot;&gt;&lt;a href=&quot;#1-What-is-Property-Definition&quot; class=&quot;headerlink&quot; title=&quot;1. What is Property Definition?&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>14. let, const and a Block-level Scope</title>
    <link href="https://sub2n.github.io/2019/05/09/14-let-const-and-a-Block-level-Scope/"/>
    <id>https://sub2n.github.io/2019/05/09/14-let-const-and-a-Block-level-Scope/</id>
    <published>2019-05-09T04:58:23.000Z</published>
    <updated>2019-05-10T04:04:40.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problems-with-Variables-declared-with-the-var-keyword"><a href="#Problems-with-Variables-declared-with-the-var-keyword" class="headerlink" title="Problems with Variables declared with the var keyword"></a>Problems with Variables declared with the <code>var</code> keyword</h1><p>ES5까지 변수를 선언할 수 있는 유일한 키워드는 <code>var</code> 하나였다. <code>var</code> 키워드로 선언된 변수는 다른 언어와는 구별되는 특징을 가진다.</p><h2 id="1-Allow-Duplicate-Variable-Declaration"><a href="#1-Allow-Duplicate-Variable-Declaration" class="headerlink" title="1. Allow Duplicate Variable Declaration"></a>1. Allow Duplicate Variable Declaration</h2><p><code>var</code> 키워드로 선언한 변수는 중복 선언이 가능하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-comment">// No Error</span></span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">//10</span></span><br></pre></td></tr></table></figure><p>같은 스코프 내에서 변수를 중복 선언하면 나중에 선언된 변수는 선언문이 아닌 할당문처럼 동작한다. 이 때 에러가 발생하지 않기 때문에 중복 선언을 인지하기 힘들다. 이로 인해 의도치 않게 변수값이 변경될 수 있다.</p><h2 id="1-1-Function-level-Scope"><a href="#1-1-Function-level-Scope" class="headerlink" title="1.1. Function-level Scope"></a>1.1. Function-level Scope</h2><p><code>var</code> 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다. 따라서, if문이나 for문 등에서 선언한 <code>var</code> 변수는 모두 전역 변수가 된다.</p><p>대부분의 프로그래밍 언어는 block-level scope이기 때문에 function-level scope를 이용하는 것은 전역 변수를 남발할 가능성을 높인다.</p><h2 id="1-2-Variable-Hoisting"><a href="#1-2-Variable-Hoisting" class="headerlink" title="1.2. Variable Hoisting"></a>1.2. Variable Hoisting</h2><p><code>var</code>키워드로 선언한 변수는 변수 호이스팅에 의해 변수 선언문이 스코프의 가장 위로 끌어 올려진 것처럼 동작한다. 즉, 선언 이전에 <code>var</code> 변수를 참조해도 에러가 나지 않는다. 이는 프로그램의 흐름을 해치고 가독성을 떨어뜨린다.</p><h1 id="2-let-keyword"><a href="#2-let-keyword" class="headerlink" title="2. let keyword"></a>2. <code>let</code> keyword</h1><p><code>var</code> 키워드의 단점들을 보완하기 위해 ES6에서 <code>var</code>와 <code>const</code> 키워드가 추가되었다. 이들은 <code>var</code> 키워드와 같이 변수를 선언할 때 사용된다.</p><h2 id="2-1-Ban-Duplicate-Variable-Declaration"><a href="#2-1-Ban-Duplicate-Variable-Declaration" class="headerlink" title="2.1. Ban Duplicate Variable Declaration"></a>2.1. Ban Duplicate Variable Declaration</h2><p><code>let</code> 키워드로 선언한 변수를 중복 선언하면 <code>var</code>와 달리 SyntaxError가 발생한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<span class="hljs-comment">// SyntaxError: Identifier 'x' has already been declared</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Block-level-Scope"><a href="#2-2-Block-level-Scope" class="headerlink" title="2.2. Block-level Scope"></a>2.2. Block-level Scope</h2><p><code>var</code> 키워드로 선언한 변수는 함수의 코드 블록만을 지역 스코프로 인정하는 함수 레벨 스코프를 따른다. 그러나 <code>let</code> 키워드로 선언한 변수는 모든 코드 블록 <code>{}</code>을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> foo = <span class="hljs-number">1</span>;<span class="hljs-comment">// global variable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> foo = <span class="hljs-number">3</span>;<span class="hljs-comment">// local variable</span></span><br><span class="line">    <span class="hljs-keyword">let</span> bar = <span class="hljs-number">4</span>;<span class="hljs-comment">// local variable</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// 3</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(bar);<span class="hljs-comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(bar);<span class="hljs-comment">// ReferenceError: bar is not defined</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Variable-Hoisting"><a href="#2-3-Variable-Hoisting" class="headerlink" title="2.3. Variable Hoisting"></a>2.3. Variable Hoisting</h2><p><code>let</code> 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(foo);<span class="hljs-comment">// ReferenceError: foo is not defined</span></span><br><span class="line"><span class="hljs-keyword">let</span> foo;</span><br></pre></td></tr></table></figure><p>그렇다면 <code>let</code> 키워드로 선언한 선언문은는 런타임 이전에 실행되지 않는 것일까? </p><p>일반적으로 <code>var</code> 키워드로 선언한 변수는 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 declaration phase와 initialization phase가 한 번에 진행된다.</p><p><img src="https://user-images.githubusercontent.com/48080762/57429988-2f2b2500-7269-11e9-8f93-6bca725a6df2.png" alt="var declaration"></p><ol><li>Declaration phase : Execution context의 lexical environment에 있는 스코프에 변수 식별자를 등록하여 변수의 존재를 알린다.</li><li>Initialization phase : declaration phase가 끝나는 즉시 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined로 변수를 할당해 초기화한다.</li></ol><p><code>let</code> 키워드로 선언한 변수는 “Declaration phase”와 “Initialization Phase”가 분리되어 진행된다.  즉, 런타임 이전에 암묵적으로 declaration phase가 먼저 실행되지만 initialization phase는 런타임에 변수 선언문에 도달했을 때 실행된다.</p><p><img src="https://user-images.githubusercontent.com/48080762/57430144-acef3080-7269-11e9-987d-75b1881b029a.png" alt="let declaration"></p><p>initialization phase가 실행되기 이전에 변수에 접근하려고 하면 reference error가 발생한다. 아직 변수를 위한 메모리 공간이 확보되지 않았기 때문이다. 따라서 스코프의 시작 지점부터 변수 선언문을 만나서 initialization phase가 시작되기 전까지는 변수를 참조할 수 없다.</p><blockquote><h3 id="TDZ-Temporal-Dead-Zone"><a href="#TDZ-Temporal-Dead-Zone" class="headerlink" title="TDZ (Temporal Dead Zone)"></a>TDZ (Temporal Dead Zone)</h3><p>스코프의 시작 지점부터 Initialization phase 시작 지점까지의 구간 </p></blockquote><p><code>let</code> 키워드로 선언한 변수는 hoisting이 되지 않는 게 아니라, 선언문을 만났을 때 initialization phase를 진행하는 것이다.</p><h2 id="2-4-Global-Object-and-let"><a href="#2-4-Global-Object-and-let" class="headerlink" title="2.4. Global Object and let"></a>2.4. Global Object and <code>let</code></h2><p><strong>전역 객체(Global Object)</strong>는 모든 객체의 유일한 최상위 객체를 의미하며 일반적으로 브라우저 환경에서는 window 객체, Node.js 환경에서는 global 객체를 말한다.</p><p><strong><code>var</code> 키워드로 선언한 전역 변수와, 키워드 없이 선언하고 값을 할당한 암묵적 전역변수, 그리고 전역 함수는 전역 객체의 프로퍼티가 된다.</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br><span class="line">y = <span class="hljs-number">2</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.x === x);<span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.y === y);<span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.foo === foo);<span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>전역 객체의 프로퍼티는 전역 변수처럼 사용할 수 있다. 전역 객체의 프로퍼티를 참조할 때 window를 생략할 수 있다.</p><p>그러나 <code>let</code> 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티가 아니다. <code>let</code> 전역 변수는 전역 렉시컬 환경의 선언적 환경 레코드 내에 존재하게 된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.x);<span class="hljs-comment">// undefined</span></span><br></pre></td></tr></table></figure><h1 id="3-const-Keyword"><a href="#3-const-Keyword" class="headerlink" title="3. const Keyword"></a>3. <code>const</code> Keyword</h1><p><code>const</code> 키워드는 상수(변하지 않는 고정된 값)를 선언하기 위해 사용한다. <code>let</code> 과 <code>const</code> 는 동일한 특징이 많다. 차이점을 살펴보자.</p><h2 id="3-1-Declaration-and-Initialization"><a href="#3-1-Declaration-and-Initialization" class="headerlink" title="3.1. Declaration and Initialization"></a>3.1. Declaration and Initialization</h2><p><code>let</code> 키워드로 선언한 변수와 달리 <code>const</code> 키워드로 선언한 변수는 재할당이 금지된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.14</span>;</span><br><span class="line"></span><br><span class="line">PI = <span class="hljs-number">3.141492</span>;<span class="hljs-comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p><code>const</code> 키워드로 선언한 변수는 반드시 선언과 할당이 동시에 이루어져야 한다. 이후로는 재할당을 할 수 없다.</p><p><code>const</code> 키워드로 선언한 변수 또한 block-level scope를 갖는다.</p><h2 id="3-2-Constant"><a href="#3-2-Constant" class="headerlink" title="3.2. Constant"></a>3.2. Constant</h2><p>변수를 만들고 재할당을 하지 않을 거라면 상수를 적극적으로 쓰는 게 좋다. 고정된 값을 상수로 만들어 쓰면 코드의 가독성을 높일 수 있다. 상수는 프로그램 전체에서 사용하므로, 유지보수에 효율적이다.</p><h2 id="3-3-const-Keyword-and-Object"><a href="#3-3-const-Keyword-and-Object" class="headerlink" title="3.3. const Keyword and Object"></a>3.3. <code>const</code> Keyword and Object</h2><p><code>const</code> 키워드로 선언한 변수에 primitive value를 할당한 경우, primitive value는 immutable value이고 재할당이 금지되므로 할당된 값을 변경할 수 있는 방법이 없다.</p><p><code>const</code> 키워드로 선언한 변수에 객체를 할당한 경우, 재할당이 금지되는 것은 마찬가지이다. 그러나 객체는 mutable value이므로 <code>const</code> 키워드로 선언된 변수에 할당된 객체는 변경이 가능하다.</p><p>즉, <code>const</code> 키워드는 재할당을 금지할 뿐 immutable을 의미하지 않는다. immutable과 mutable은 상수와 변수의 개념이 아닌, 값의 변경에 대한 개념이다.</p><h1 id="4-var-vs-let-vs-const"><a href="#4-var-vs-let-vs-const" class="headerlink" title="4. var vs. let vs. const"></a>4. <code>var</code> vs. <code>let</code> vs. <code>const</code></h1><p>변수 선언에는 기본적으로 <code>const</code>를 사용하고 <code>let</code>은 재할당이 필요한 경우에 사용하는 것이 좋다. </p><ul><li>ES6 사용시 <code>var</code> 키워드 사용하지 않는다.</li><li>재할당이 필요한 경우에만 <code>let</code> 키워드를 사용하고, 변수의 스코프를 최소화 한다.</li><li>객체와 변경을 하지 않을 원시 값에는 <code>const</code> 키워드를 사용한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problems-with-Variables-declared-with-the-var-keyword&quot;&gt;&lt;a href=&quot;#Problems-with-Variables-declared-with-the-var-keyword&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>13. Problems with Global Variables</title>
    <link href="https://sub2n.github.io/2019/05/09/13-Problems-with-global-variables/"/>
    <id>https://sub2n.github.io/2019/05/09/13-Problems-with-global-variables/</id>
    <published>2019-05-09T02:26:46.000Z</published>
    <updated>2019-05-10T04:24:20.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Life-Cycle-of-a-Variable"><a href="#1-Life-Cycle-of-a-Variable" class="headerlink" title="1. Life Cycle of a Variable"></a>1. Life Cycle of a Variable</h1><p>변수는 선언에 의해 생성되고 할당을 통해 값을 가진다. 생성된 변수는 언젠가는 소멸한다. 변수가 생성되고 소멸되는 주기를 변수의 생명 주기라고 한다.</p><p>변수가 생성된다는 것은 메모리 공간을 차지하는 것이고, 소멸됨은 차지하던 메모리가 해제되는 것이다.</p><p>조금 더 정확히 말하면 변수가 소멸된다는 것은 등록된 식별자가 소멸한다는 것이다. 이때 식별자와 값의 바인딩이 해제된다. 어떤 지역 스코프가 사라질 때 그 스코프에 등록된 식별자들이 소멸된다.</p><p>함수 내부에서 선언된 지역 변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸한다. 즉, 지역 변수의 생명주기는 함수와 생명 주기와 같다. 그래서 지역 변수의 생명주기는 비교적 짧다. 그러나 전역 변수는 다르다.</p><p>함수는 함수 몸체의 문이 끝나거나, return 문이 실행되면 종료한다. 하지만 전역 코드는 마지막 문이 끝나서 더 이상 실행할 문이 없어도 함수처럼 종료하지 않는다. 전역변수는 브라우저를 종료해서 애플리케이션을 종료할 때까지 유효하다. 즉, 전역 변수의 생명주기는 애플리케이션의 생명 주기와 일치한다. 이는 다음과 같은 문제점을 가진다.</p><h1 id="2-Problem-of-Global-Variable"><a href="#2-Problem-of-Global-Variable" class="headerlink" title="2. Problem of Global Variable"></a>2. Problem of Global Variable</h1><h2 id="2-1-Implicit-Coupling"><a href="#2-1-Implicit-Coupling" class="headerlink" title="2.1. Implicit Coupling"></a>2.1. Implicit Coupling</h2><p>전역 변수는 코드의 전체 영역에서 사용할 수 있다. 이는 <strong>모든 코드에서 전역 변수를 참조하고 변경할 수 있는 암묵적 결합</strong>을 허용한다. 문제는 변수의 유효 범위가 크면 클수록 코드의 가독성이 나빠지고 의도치 않은 상태 변경이 일어난다는 것이다.</p><h2 id="2-2-Long-Life-Cycle"><a href="#2-2-Long-Life-Cycle" class="headerlink" title="2.2. Long Life Cycle"></a>2.2. Long Life Cycle</h2><p>전역 변수는 생명 주기가 길다. 이는 다음과 같이 몇 가지 문제점을 가진다.</p><ul><li>전역 변수의 상태를 변경할 수 있는 시간이 길다.</li><li>모든 함수가 참조할 수 있으므로 상태가 변경될 위험이 크다.</li><li>메모리 리소스를 오랜기간 차지한다.</li><li><code>var</code> 키워드는 변수의 중복 선언을 허용하므로 중간에 변수명이 중복되어 의도치 않은 재할당이 일어날 수 있다.</li></ul><h2 id="2-3-Exist-at-the-End-of-the-Scope-Chain"><a href="#2-3-Exist-at-the-End-of-the-Scope-Chain" class="headerlink" title="2.3. Exist at the End of the Scope Chain"></a>2.3. Exist at the End of the Scope Chain</h2><p>전역 변수의 또다른 문제점은 스코프 체인 가장 상위에 존재한다는 것이다. 이는 자바스크립트 엔진이 전역 변수를 찾을 때 가장 마지막 스코프까지 검색해야함을 의미한다. 즉, 전역 변수의 검색 속도가 가장 느리다.</p><h2 id="2-4-Namespace-Pollution"><a href="#2-4-Namespace-Pollution" class="headerlink" title="2.4. Namespace Pollution"></a>2.4. Namespace Pollution</h2><p>자바스크립트의 특성으로, 분리되어있는 파일을 함께 import할 경우 하나의 전역 스코프를 공유한다. 따라서 다른 파일 내에서 동일한 이름으로 명명한 변수나 함수가 겹칠 경우 예상치 못한 결과를 가져올 수 있다.</p><h1 id="3-How-to-Suppress-Using-Global-Variables"><a href="#3-How-to-Suppress-Using-Global-Variables" class="headerlink" title="3. How to Suppress Using Global Variables"></a>3. How to Suppress Using Global Variables</h1><p>위에서 살펴본 바와 같이 전역 변수의 사용은 위험하다. 반드시 사용해야할 때가 아니라면 지역 변수를 사용해야 한다. </p><h2 id="3-1-Immediately-Invoke-Function-Expression"><a href="#3-1-Immediately-Invoke-Function-Expression" class="headerlink" title="3.1. Immediately Invoke Function Expression"></a>3.1. Immediately Invoke Function Expression</h2><p>즉시 실행 함수는 함수의 정의와 동시에 한 번만 호출되는 함수로, 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다. 함수는 스코프를 만들고, 함수 내에 선언된 변수는 지역 변수가 된다는 것을 이용한 방법이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> foo = <span class="hljs-number">10</span>;<span class="hljs-comment">//local variable of IIF</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h2 id="3-2-Namespace-Object"><a href="#3-2-Namespace-Object" class="headerlink" title="3.2. Namespace Object"></a>3.2. Namespace Object</h2><p>전역 네임 스페이스 역할을 담당할 객체를 생성하고, 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가한다. 즉, 전역 변수를 네임 스페이스 객체의 프로퍼티로 등록하고 사용하는 방법이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> GLOBAL = &#123;&#125;;<span class="hljs-comment">// global namespace object</span></span><br><span class="line">GLOBAL.name = <span class="hljs-string">'Lee'</span>;</span><br></pre></td></tr></table></figure><h2 id="3-3-Module-Pattern"><a href="#3-3-Module-Pattern" class="headerlink" title="3.3. Module Pattern"></a>3.3. Module Pattern</h2><p>캡슐화란 내부의 구현을 외부로부터 감추는 것을 말한다. C++이나 Java의 class는 기본적으로 Access modifier를 제공하여 공개 범위를 한정할 수 있게 한다.</p><p>자바스크립트는 access modifier를 제공하지 않는다. 모듈 패턴은 전역 네임 스페이스의 오염을 막는 기능에 더해서, 한정적이기는 하지만 캡슐화를 구현하기 위해 사용한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> Account = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// private variable</span></span><br><span class="line">  <span class="hljs-keyword">var</span> balance = <span class="hljs-number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      deposit(money) &#123;</span><br><span class="line">        balance += money;</span><br><span class="line">          <span class="hljs-keyword">return</span> balance;</span><br><span class="line">      &#125;,</span><br><span class="line">      withdraw(money) &#123;</span><br><span class="line">          balance -= money;</span><br><span class="line">          <span class="hljs-keyword">return</span> balance;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Account.balance);        <span class="hljs-comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Account.deposit(<span class="hljs-number">3000</span>));<span class="hljs-comment">//3000</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Account.withdraw(<span class="hljs-number">1000</span>));<span class="hljs-comment">//2000</span></span><br></pre></td></tr></table></figure><p>위 코드의 즉시 실행 함수는 외부에 노출할 메소드를 객체에 담아 반환한다. 이 때 반환되는 객체의 프로퍼티는 외부에 노출되는 퍼블릭 멤버이다. 반환되는 객체에 추가되지 않은 변수나 함수는 모두 외부에서 접근할 수 없는 프라이빗 멤버가 된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Life-Cycle-of-a-Variable&quot;&gt;&lt;a href=&quot;#1-Life-Cycle-of-a-Variable&quot; class=&quot;headerlink&quot; title=&quot;1. Life Cycle of a Variable&quot;&gt;&lt;/a&gt;1. Life
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>190508-TIL</title>
    <link href="https://sub2n.github.io/2019/05/08/190508-TIL/"/>
    <id>https://sub2n.github.io/2019/05/08/190508-TIL/</id>
    <published>2019-05-08T12:19:28.000Z</published>
    <updated>2019-05-08T12:23:59.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learend"><a href="#Today-I-Learend" class="headerlink" title="Today I Learend"></a>Today I Learend</h2><p>Studied JavaScript function and scope of JavaScript.</p><p>✨ <a href="https://sub2n.github.io/2019/05/08/11-Function/">Function posting</a> ✨</p><p>✨ <a href="https://sub2n.github.io/2019/05/08/12-Scope/">Scope posting</a> ✨</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learend&quot;&gt;&lt;a href=&quot;#Today-I-Learend&quot; class=&quot;headerlink&quot; title=&quot;Today I Learend&quot;&gt;&lt;/a&gt;Today I Learend&lt;/h2&gt;&lt;p&gt;Studied JavaScript
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>12. Scope</title>
    <link href="https://sub2n.github.io/2019/05/08/12-Scope/"/>
    <id>https://sub2n.github.io/2019/05/08/12-Scope/</id>
    <published>2019-05-08T06:23:34.000Z</published>
    <updated>2019-05-08T08:56:00.084Z</updated>
    
    <content type="html"><![CDATA[<p>The scope determines the extent to which the identifier can be referenced. A scope is a data structure that keeps the binding of identifiers and values, and is managed by the JavaScript engine.</p><h1 id="What-is-Scope"><a href="#What-is-Scope" class="headerlink" title="What is Scope?"></a>What is Scope?</h1><p>The range in which the variable is valid. That is, the extent to which other code can refer to the variable itself. The scope is created by the location <strong>where the variable is declared</strong>.</p><p>When there are variables with the same name in different scopes, JavaScript engine must decide which variable to reference at runtime. JavaScript uses the scope to determine which variables to reference. That is, <strong>the scope is the rule that the JavaScript engine uses to search for variables to reference.</strong></p><p>By default, JavaScript supports function-level scopes rather than block-level scopes. Variables declared with <code>var</code> form a function-level scope. However, variables declared with <code>let</code> or <code>const</code> form a block-level scopes.</p><p>If there is no scope, the name of the variable in the program should be unique.</p><blockquote><h4 id="Duplicate-declaration-of-var-keyword-variable"><a href="#Duplicate-declaration-of-var-keyword-variable" class="headerlink" title="Duplicate declaration of var keyword variable"></a>Duplicate declaration of <code>var</code> keyword variable</h4><p>Variables declared with the <code>var</code> keyword allow duplicate declarations within the same scope.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">&gt;     <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="hljs-comment">// This statement operates like x = 2;</span></span><br><span class="line">&gt;     <span class="hljs-comment">// So reassignment occurs.</span></span><br><span class="line">&gt;     <span class="hljs-keyword">var</span> x = <span class="hljs-number">2</span>;<span class="hljs-comment">//2</span></span><br><span class="line">&gt;     </span><br><span class="line">&gt;     <span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">//2</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; foo();</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Variables declared as <code>let</code> or <code>const</code> do not allow duplicate declarations, so it is better to use them.</p></blockquote><h1 id="Types-of-scope"><a href="#Types-of-scope" class="headerlink" title="Types of scope"></a>Types of scope</h1><p>Code can be distinguished as global and local.</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">Global</th><th style="text-align:center">Local</th></tr></thead><tbody><tr><td style="text-align:left">Explanation</td><td style="text-align:center">Outermost area of code</td><td style="text-align:center">Inside of function body</td></tr><tr><td style="text-align:left">Scope</td><td style="text-align:center">Global scope</td><td style="text-align:center">Local scope</td></tr><tr><td style="text-align:left">Vaiable</td><td style="text-align:center">Global variable</td><td style="text-align:center">Local variable</td></tr></tbody></table><p>The variable is determined by its declared location (global or local) to the scope in which it is valid. </p><ul><li>A variable declared in global is a global variable having a global scope</li><li>A variable declared in local is a local variable having a local scope.</li></ul><p>Declaring a variable in global is a global variable with a global scope. Global variables can be referenced anywhere. In other words, global variables are valid in the global scope.</p><p>Local variables can be referenced only in the declared region and sub-region (nested function). In other words, local variables are valid in their local and subregional scopes.</p><h1 id="Scope-Chain"><a href="#Scope-Chain" class="headerlink" title="Scope Chain"></a>Scope Chain</h1><p>Scopes are created by functions. Functions can be nested, so the local scope of a function can also be nested. This means that <strong>the scope has a hierarchical structure by nesting of functions</strong>.</p><p>The local scope of the outer function is the top scope of the nested function.</p><p><strong>The scope chain</strong> refers to a structure in which the scopes from the deepest local scope to the global scope of the overlap are hierarchically connected.</p><p>When referring to a variable, the JavaScript engine starts at the scope of the code that references the variable, moves to the top scope, and searches for the declared variable.</p><h1 id="Function-level-Scope"><a href="#Function-level-Scope" class="headerlink" title="Function-level Scope"></a>Function-level Scope</h1><ul><li>Most programming language like C, Java <ul><li>Block-level scope</li><li>All code blocks (if, for, while, try / catch, etc.), not just the function body, create the local scope.</li></ul></li><li>Variables declared with the <code>var</code> keyword <ul><li><strong>Function-level scope</strong></li><li>Accept only the code block of the <strong>function</strong> as the local scope.</li></ul></li></ul><p>The <code>let</code> and <code>const</code> keywords introduced in ES6 support block level scopes.</p><h1 id="Lexical-Scope"><a href="#Lexical-Scope" class="headerlink" title="Lexical Scope"></a>Lexical Scope</h1><ul><li>Dynamic Scope<ul><li>The function’s top scope is determined by <strong>where the function is called.</strong></li></ul></li><li><strong>Lexical Scope</strong> / Static Scope<ul><li>The function’s top scope is determined by <strong>where the function is defined.</strong></li><li>Most programming languages follow the lexical scope.</li></ul></li></ul><p>JavaScript follows a lexical scope. So it determines the top scope depending on where it is defined.</p><h1 id="Implicit-Global-Variable"><a href="#Implicit-Global-Variable" class="headerlink" title="Implicit Global Variable"></a>Implicit Global Variable</h1><p>If declare a variable without <code>var</code> keyword, it becomes a global variable.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    i = <span class="hljs-number">0</span>;<span class="hljs-comment">//implicit global variable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// var i = 0 is a duplicate declaration</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(i);</span><br><span class="line">&#125;<span class="hljs-comment">// infinite loop</span></span><br></pre></td></tr></table></figure><p>Global variables are so dangerous!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The scope determines the extent to which the identifier can be referenced. A scope is a data structure that keeps the binding of identifi
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Scope" scheme="https://sub2n.github.io/tags/Scope/"/>
    
  </entry>
  
  <entry>
    <title>11. Function</title>
    <link href="https://sub2n.github.io/2019/05/08/11-Function/"/>
    <id>https://sub2n.github.io/2019/05/08/11-Function/</id>
    <published>2019-05-08T00:47:35.000Z</published>
    <updated>2019-05-08T09:03:15.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-a-Function"><a href="#What-is-a-Function" class="headerlink" title="What is a Function?"></a>What is a Function?</h1><p>In mathematics, a function defines the process of receiving an input and outputting it.</p><p>In programming language, a function is defined as a unit of execution by implementing a series of processes as statements and wrapping them in code blocks. This function also receive input and outputting it.</p><p>In function,</p><ul><li>parameter : variable that receiving input</li><li>argument : input</li><li>return value : output</li></ul><p>And function has a name as identifier. </p><p>A function is created by a <strong>function definition</strong>. You must call the function to execute the generated function. This is called a <strong>function call</strong>.</p><h1 id="Why-use-a-function"><a href="#Why-use-a-function" class="headerlink" title="Why use a function?"></a>Why use a function?</h1><ul><li>To <strong>reuse</strong> the same code repeated in many parts.</li><li>To remove redundant code to improve <strong>maintenance</strong> efficiency.</li><li>To improve the <strong>readability</strong> of your code using function names that specify functions.</li></ul><h1 id="Function-Literal"><a href="#Function-Literal" class="headerlink" title="Function Literal"></a>Function Literal</h1><p>Just as objects are created as object literals, functions can also be created as function literals. Function literal consists of function keyword, function name, list of parameters and function body. A <strong>function literal is evaluated to create a function object</strong>.</p><ul><li>Function name<ul><li>Since the function name is an identifier, it must conform to the identifier naming rules.</li><li>A function name is an identifier that can be referenced <strong>only within a function body</strong>.</li><li>The function name can be omitted. A function with a function name is called a <strong><em>named function</em></strong>, and a function without a function name is called an <strong><em>anonymous function</em></strong>.</li></ul></li><li>List of parameters<ul><li>Wrap 0 or more parameters in parentheses and separate them with commas.</li><li>Parameters are assigned arguments.</li><li>Parameters are treated the same as variables in the function body.</li></ul></li><li>Function body<ul><li>It is a block of code that defines the statements to be executed in batches as a unit of execution when the function is called.</li><li>The function body is executed by a function call.</li></ul></li></ul><p>A function literal is evaluated to produce a value, which is an object. In other words, <strong>the function of JavaScript is an object.</strong></p><p>Unlike regular objects, functions can be called and have unique properties. All function objects have <code>[[Call]]</code>.</p><h1 id="Definition-of-Function"><a href="#Definition-of-Function" class="headerlink" title="Definition of Function"></a>Definition of Function</h1><p>There are 4 ways to define a function.</p><ul><li><p>Function Declaration / Function Statement</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Function Expression</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Function Constructor</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'x'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'return x + y'</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Arrow Function (ES6)</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;</span><br></pre></td></tr></table></figure></li></ul><p>Each method defines a function, but there is an important difference.</p><h2 id="Function-Declaration"><a href="#Function-Declaration" class="headerlink" title="Function Declaration"></a>Function Declaration</h2><p>The function declaration has the same format as the function literal, but <strong>the function name can not be omitted.</strong> This is because the JavaScript engine needs to create variables with function names.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Function Declaration</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//Function Call</span></span><br><span class="line">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">//5</span></span><br></pre></td></tr></table></figure><p>The function name is an identifier that can be referenced only within the function body.</p><p>However, when you call a function outside a function, you use the function name.</p><p>When a function declaration is executed to create a function object, a variable is needed to assign the function object. This is because the function object can not be stored in memory unless it is allocated anywhere. </p><p>Therefore, the JavaScript engine</p><ol><li>Implicitly declares an identifier of the same name as the function name</li><li>Assigns the created function object to the identifier.</li></ol><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// This is the pseudo code when the above function add statement is executed.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// variable add is an identifier created by the JavaScript engine with the same name as the function name implicitly. </span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><p>Function name can only be referenced within a function, and implicitly created <strong>variable</strong> name can be referenced <strong>in the scope where the function is defined</strong>.</p><p><img src="https://user-images.githubusercontent.com/48080762/57363047-21b76180-71bb-11e9-9fa1-d67593e265e4.png" alt="Pseudo Code"></p><p>This pseudo code is the following function expression. That is, the JavaScript engine converts function declarations into function expressions to create function objects.</p><h2 id="Function-Expression"><a href="#Function-Expression" class="headerlink" title="Function Expression"></a>Function Expression</h2><h3 id="First-class-object"><a href="#First-class-object" class="headerlink" title="First-class object"></a>First-class object</h3><p>An object that can be assigned to a variable, such as a value, which can be the value of a property or an element of an array.</p><p>Function in JavaScript is a first-class object. It means that a function can be freely used as a value. </p><p>A function object created with a function literal can be assigned to a variable. This way of defining a function is called a <strong>function expression</strong>.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Function Expression</span></span><br><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><p>Unlike function declarations, function literals can omit function names. It is common to use anonymous functions in function expressions.</p><p>Since a function name is an identifier that can be referenced only by a function body, even if a named function is used, the function must be called with the variable name to which the function object is assigned.</p><h2 id="Function-Creation-time-and-Function-Hoisting"><a href="#Function-Creation-time-and-Function-Hoisting" class="headerlink" title="Function Creation time and Function Hoisting"></a>Function Creation time and Function Hoisting</h2><p>Function declarations and function expressions seem to behave similarly, because the JavaScript engine implicitly declares the variable as a function name in the function declaration statement and allocates the created object.<br>However, function declaration is non-expression statement, and function expression is an expression statement. Therefore, there is an important difference.</p><p>The point at which the function is created is when the JavaScript engine evaluates the function declaration to create the function object.</p><ul><li><p><strong>Function declaration statements are executed before runtime</strong> because they are declarations themselves. </p></li><li><p>However, <strong>function expressions are executed at run-time</strong> because they are assignment statements that assign function literals to variables. </p></li></ul><p>That is, the function created by the function declaration statement and the function generated by the function expression are created at different times.</p><p>Functions created with function declarations are executed and hoisted before runtime, but functions created with function expressions are not hoisted.</p><p>Unlike variable hoisting, in the case of function hoisting, a function object is referenced instead of undefined.</p><h2 id="Function-Constructor"><a href="#Function-Constructor" class="headerlink" title="Function Constructor"></a>Function Constructor</h2><blockquote><h2 id="Constructor-Function"><a href="#Constructor-Function" class="headerlink" title="Constructor Function"></a>Constructor Function</h2><p>A constructor function is a function that creates an object.</p></blockquote><p>The <code>function</code> constructor function, which is a built-in function provided by JavaScript, receives a parameter list and a function body as a string. It is called with the <code>new</code> operator and returns the created function object.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Function Constructor</span></span><br><span class="line"><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'x'</span>, <span class="hljs-string">'y'</span>, <span class="hljs-string">'return x + y'</span>);</span><br><span class="line"></span><br><span class="line">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><p>However, creating a function as a function constructor is not common. These functions behave differently from function declarations or function expressions.</p><p>Do not use it!</p><h2 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h2><p>An arrow function introduced in ES6 can make a function simply without a <code>function</code> keyword. </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Arrow Function</span></span><br><span class="line"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><p>The arrow function is not available in all situations.</p><h1 id="Function-Call"><a href="#Function-Call" class="headerlink" title="Function Call"></a>Function Call</h1><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Function Call</span></span><br><span class="line">add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);</span><br></pre></td></tr></table></figure><ul><li><code>add</code> : Variable name referring to function object, not function name</li><li><code>( )</code> : Function call operator</li><li><code>2, 3</code> : Arguments to be assigned to the parameter</li></ul><p>Calling a function stops the current execution flow and passes control to the called function. At this point, arguments are assigned to the parameters and the statements in the function body begin to execute.</p><h1 id="Parameter-and-Argument"><a href="#Parameter-and-Argument" class="headerlink" title="Parameter and Argument"></a>Parameter and Argument</h1><ul><li>Parameter<ul><li>Declare when defining a function</li><li>Treated as variables in the function body</li><li>When a function is called, the parameter is implicitly created in the function body, initialized to undefined, and then an argument is assigned.</li><li>The scope of the parameter is inside the function.</li></ul></li><li>Argument<ul><li>If the argument is passed less than the parameter, the missing parameter has the value undefined. (No error)</li><li>If the argument is passed in more than the parameter, the excess argument is ignored and kept in the arguments object.</li></ul></li></ul><h1 id="Argument-Check"><a href="#Argument-Check" class="headerlink" title="Argument Check"></a>Argument Check</h1><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x !== <span class="hljs-string">'number'</span> || <span class="hljs-keyword">typeof</span> y !== <span class="hljs-string">'number'</span>)</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">'Non-number type value has assigned to parameter.'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="hljs-number">2</span>);<span class="hljs-comment">// TypeError: Non-number type value has assigned to parameter.</span></span><br><span class="line">add(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>);<span class="hljs-comment">// TypeError: Non-number type value has assigned to parameter.</span></span><br></pre></td></tr></table></figure><p>It is necessary to check whether the argument is passed properly in the JavaScript function. Because..</p><ul><li>JavaScript functions do not check that the number of parameters and arguments match.</li><li>Because JavaScript is a dynamic type language, functions do not specify the type of parameters in advance.</li></ul><h1 id="Number-of-parameters"><a href="#Number-of-parameters" class="headerlink" title="Number of parameters"></a>Number of parameters</h1><p>The smaller the number of parameters, the better. A function with 0 parameters is ideal. The more parameters, the more things to consider when using the function, which leads to errors.</p><p>Also, if the number or sequence of parameters changes, all the code that calls the function must be modified.</p><p>The ideal function should only do one thing and make it as small as possible. In addition to functions, classes and other functional units must be as clear and small as possible too.</p><h1 id="External-State-Changes-and-Functional-Programming"><a href="#External-State-Changes-and-Functional-Programming" class="headerlink" title="External State Changes and Functional Programming"></a>External State Changes and Functional Programming</h1><p>Since functions are objects, they follow pass by reference. Passing a value to a function’s parameters is called as <strong>Call by value</strong> and <strong>Call by reference</strong>, but the behavior is the same as <strong>Pass by value</strong> and <strong>Pass by reference</strong>.</p><p>As we saw in <a href="https://sub2n.github.io/2019/05/07/10-Comparing-primitive-and-objects/">10. Comparing primitive and objects</a>, there is a side effect in which the original object is changed by reference values passed from inside the function body to outside of the function. This is called change of external state.</p><ul><li>Pure function : functions that do not change any external state (No side effect)</li><li>Impure function : functions that change the external state inside a function (Side effect)</li></ul><p><img src="https://user-images.githubusercontent.com/48080762/57363055-2714ac00-71bb-11e9-9810-7770c44966c8.png" alt="External State Change"></p><p>Functional programming is a programming paradigm that avoids state changes by suppressing the use of variables and solves complexity by eliminating conditional statements and loops in the logic through the combination of pure and auxiliary functions. Variable values can be changed by someone at any time, and conditional statements or loop statements can make the flow of logic difficult to understand, which can impair readability and become a root cause of errors.</p><p>Functional programming is a way to avoid errors and increase the stability of programs by minimizing side effects through pure functions.</p><h2 id="Return-Statement"><a href="#Return-Statement" class="headerlink" title="Return Statement"></a>Return Statement</h2><p>The function returns the execution result through a return statement consisting of the <code>retur</code>n keyword and the return value.</p><p>When the return statement is executed, execution of the function is aborted and the function body is exited.</p><p>If do not write anything after the <code>return</code> keyword or write a return statement, <code>undefined</code> is returned implicitly.</p><h2 id="Types-of-various-Functions"><a href="#Types-of-various-Functions" class="headerlink" title="Types of various Functions"></a>Types of various Functions</h2><h3 id="IIFE-Immediately-Invoke-Function-Expression"><a href="#IIFE-Immediately-Invoke-Function-Expression" class="headerlink" title="IIFE ( Immediately Invoke Function Expression)"></a>IIFE ( Immediately Invoke Function Expression)</h3><p>A function that <em>executes concurrently with the definition</em> of a function. It is common to use anonymous functions and can not be called again once.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Anonymous immediately invoke function</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> a + b;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>Even if a named function is used, the function name can not be referenced outside of the function and can not be called again.</p><p>An immediate function must be enclosed in the group operator <code>()</code>. Otherwise, it will not be identified and an error will occur.</p><p>If put the code in the immediate function, collision of the variable name or the function name can be prevented. An immediate execution function is used for this purpose.</p><h3 id="Recursive-Function"><a href="#Recursive-Function" class="headerlink" title="Recursive Function"></a>Recursive Function</h3><p>A recursive call is to call itself. A function that calls itself is called a recursive function.</p><p>When creating a recursive function, a base case with an escape condition must be included. Stack overflow occurs when a function is called without escaping.</p><p>Most of what can be implemented as recursive functions can be implemented as loops.</p><h3 id="Nested-Function-Inner-Function"><a href="#Nested-Function-Inner-Function" class="headerlink" title="Nested Function / Inner Function"></a>Nested Function / Inner Function</h3><p>A function defined inside a function is called a nested function (or inner function). A nested function acts as a helper function of an outer function that contains itself.</p><p>A nested function can access variables of an outer function, but an outer function can not access variables of a nested function. The nesting of functions means the nesting of the scope.</p><h3 id="Callback-Function"><a href="#Callback-Function" class="headerlink" title="Callback Function"></a>Callback Function</h3><p>Because JavaScript functions are first-class objects, can pass functions as arguments to functions.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Function that recieves calback function</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span>(<span class="hljs-params">f</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> string = <span class="hljs-string">'Good'</span>;</span><br><span class="line">    <span class="hljs-comment">// Determine when to call the callback function passed in parameter and call the function</span></span><br><span class="line">    <span class="hljs-keyword">return</span> f(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// It calls the print function and passes the callback function</span></span><br><span class="line"><span class="hljs-keyword">var</span> upper = print(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> str.toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// It calls the print function and passes the callback function</span></span><br><span class="line"><span class="hljs-keyword">var</span> lower = print(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> str.toLowerCase();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(upper, lower);<span class="hljs-comment">//GOOD good</span></span><br></pre></td></tr></table></figure><p>The function passed to the print function as an argument is called a <strong>callback function</strong>. The callback function calls the function that receives the callback function as an argument by determining the point of call.</p><p>Using a callback function is like pushing a nested function depending on your needs and circumstances.</p><p>Just as a nested function acts as a helper function to help an outer function, the callback function is passed to the function to serve as a helper function. However, since the nested function is fixed and can not be replaced, the callback function can be freely replaced because it is injected as an argument outside the function.</p><p>When you pass a callback function from the outside, you can create a function that performs various actions depending on the callback function.</p><p>That is, it is useful to use the callback function in situations where it is changed instead of being fixed like a nested function.</p><p>Callback functions are mainly used for <strong>event handling</strong>, Ajax communication, and higher-order functions.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-a-Function&quot;&gt;&lt;a href=&quot;#What-is-a-Function&quot; class=&quot;headerlink&quot; title=&quot;What is a Function?&quot;&gt;&lt;/a&gt;What is a Function?&lt;/h1&gt;&lt;p&gt;In m
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Consecutive strings</title>
    <link href="https://sub2n.github.io/2019/05/07/CodeWars-6kyu-Consecutive-strings/"/>
    <id>https://sub2n.github.io/2019/05/07/CodeWars-6kyu-Consecutive-strings/</id>
    <published>2019-05-07T12:46:33.000Z</published>
    <updated>2019-05-08T10:07:35.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Consecutive-strings"><a href="#CodeWars-6kyu-Consecutive-strings" class="headerlink" title="CodeWars 6kyu. Consecutive strings"></a><a href="https://www.codewars.com/kata/consecutive-strings/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Consecutive strings</a></h2><p>Find longest k consecutive strings</p><a id="more"></a><blockquote><p>You are given an array strarr of strings and an integer k. Your task is to return the first longest string consisting of k consecutive strings taken in the array.</p></blockquote><blockquote><p>Example:</p><p>longest_consec([“zone”, “abigail”, “theta”, “form”, “libe”, “zas”, “theta”, “abigail”], 2) –&gt; “abigailtheta”</p></blockquote><blockquote><p>n being the length of the string array, if n = 0 or k &gt; n or k &lt;= 0 return “”.</p></blockquote><blockquote><p>Note</p><p>consecutive strings : follow one after another without an interruption</p></blockquote><h2 id="JavaScript-Solution"><a href="#JavaScript-Solution" class="headerlink" title="JavaScript Solution"></a>JavaScript Solution</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">longestConsec</span>(<span class="hljs-params">strarr, k</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (strarr.length == <span class="hljs-number">0</span> || k &gt; strarr.length || k &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">let</span> longStr = <span class="hljs-string">''</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">let</span> newStr = <span class="hljs-string">''</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; strarr.length; i++)&#123;</span><br><span class="line">      newStr = strarr.slice(i, i+k);</span><br><span class="line">      <span class="hljs-keyword">if</span> (newStr.join(<span class="hljs-string">''</span>).length &gt; longStr.length )&#123;</span><br><span class="line">        longStr = newStr.join(<span class="hljs-string">''</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> longStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Consecutive-strings&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Consecutive-strings&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Consecutive strings&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/consecutive-strings/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Consecutive strings&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Find longest k consecutive strings&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>10. Comparing primitive and objects</title>
    <link href="https://sub2n.github.io/2019/05/07/10-Comparing-primitive-and-objects/"/>
    <id>https://sub2n.github.io/2019/05/07/10-Comparing-primitive-and-objects/</id>
    <published>2019-05-07T11:24:49.000Z</published>
    <updated>2019-05-08T06:23:53.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Difference-between-primitive-type-and-object-type"><a href="#Difference-between-primitive-type-and-object-type" class="headerlink" title="Difference between primitive type and object type"></a>Difference between primitive type and object type</h2><table><thead><tr><th style="text-align:center">Primitive Type</th><th style="text-align:center">Object Type</th></tr></thead><tbody><tr><td style="text-align:center">immutable value</td><td style="text-align:center">mutable value</td></tr><tr><td style="text-align:center">stored as value itself</td><td style="text-align:center">stored as reference value (memory address of an object)</td></tr><tr><td style="text-align:center">Pass by value</td><td style="text-align:center">Pass by reference</td></tr></tbody></table><h1 id="Primitive-Value"><a href="#Primitive-Value" class="headerlink" title="Primitive Value"></a>Primitive Value</h1><h2 id="Immutable-Value"><a href="#Immutable-Value" class="headerlink" title="Immutable Value"></a>Immutable Value</h2><ul><li>The value of primitive type is an <strong>immutable value</strong>. (Read only, can not change)</li><li>Can not change value doesn’t mean can not reassign value.</li><li>Variable can be reassigned a new value, but the value can not be changed.</li><li>When reassigning a new value to a variable, instead of changing the value stored in the memory space pointed to by the variable, assign a value to the new memory space and make the variable refer to the new memory space. This is because the primitive value is immutable.</li><li>If the primitive value is a mutable value, the memory address referenced by the variable will not change when reassigning the variable.</li><li>immutability : Since the primitive value is an immutable value, when the value of the variable is changed, the new value is stored in the new memory space, and the memory space is referred to. This property is called the <strong>immutability</strong> of the primitive value.</li></ul><blockquote><h2 id="Immutable-constant"><a href="#Immutable-constant" class="headerlink" title="Immutable? constant?"></a>Immutable? constant?</h2><p>In programming language, variable is a mechanism that store and refer data values. So, constant is also variable but can not assign more than once.</p><p>Variables, and constants are memory spaces that can hold values, and the concept of mutable, immutable is about whether the value can change.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-comment">//Constants declared with the const keyword are not reassigned.</span></span><br><span class="line">&gt; <span class="hljs-keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">&gt; </span><br><span class="line">&gt; obj.a = <span class="hljs-number">1</span>;</span><br><span class="line">&gt; <span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;a: 1&#125;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Objects declared as <code>const</code> can be changed. This is because you are not reassigning a new object to <code>const</code>. That is, the constant is only a variable for which reassignment is prohibited.</p></blockquote><h2 id="String-and-Immutability"><a href="#String-and-Immutability" class="headerlink" title="String and Immutability"></a>String and Immutability</h2><ul><li><p>String is immutable because it’s also primitive type of JavaScript.</p></li><li><p>String is an array-like object.</p><blockquote><h3 id="Array-like-Object"><a href="#Array-like-Object" class="headerlink" title="Array-like Object"></a>Array-like Object</h3><p>An array-like object is an object that is not an array, but can be treated like an array. A string can access each character through an index like an array, or it can be traversed by a for statement. This means that the string can be an object with a length property.</p></blockquote></li><li><p>You can not change <code>str[0]</code>, but error doesn’t occur. Just ignore it.</p></li></ul><p><img src="https://user-images.githubusercontent.com/48080762/57296797-dba1c580-7108-11e9-83bd-86e735652c18.png" alt="String is immutable value"></p><ul><li>But, it is of course possible to reassign the new string. Because it is not a change to the existing string but a new assignment of the new string.</li><li>The string gives the confidence that the value does not change without reassignment.</li></ul><h2 id="Pass-by-value"><a href="#Pass-by-value" class="headerlink" title="Pass by value"></a>Pass by value</h2><p>What happens when a variable is assigned to a variable? </p><p>If assigned variable is primitive type, the assigned variable value is copied and passed. It’s <strong>pass by value</strong>.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> score = <span class="hljs-number">80</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> mine = score;</span><br></pre></td></tr></table></figure><p>Variable <code>score</code> and <code>mine</code> have a value 80, but it’s a separate value in memory. The value 80 in <code>mine</code> is not same as 80 in <code>score</code>. This is because the memory space of the variables <code>mine</code> and <code>score</code> is different and each contains a value.</p><p><img src="https://user-images.githubusercontent.com/48080762/57297341-57e8d880-710a-11e9-9007-36ec715ebcf7.png" alt="Pass by Value"></p><p>Thus, reassigning another value to the variable <code>score</code> does not affect the value of the variable <code>mine</code>.</p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><ul><li>An object is a collection of properties consisting of key and value. A property whose value is a function is called a method.</li><li>Since the number of properties is not fixed and the object can be added and deleted dynamically, the size of the memory space can not be preset in advance like the primitive value.</li></ul><blockquote><h2 id="How-JavaScript-manages-objects"><a href="#How-JavaScript-manages-objects" class="headerlink" title="How JavaScript manages objects"></a>How JavaScript manages objects</h2><p>Unlike with an class-based object-oriented language, JavaScript can create an object without class and dynamically add a property and method even after an object have been created.</p><p>For this reason, almost modern JavaScript engine uses a function-based dictionary-like structure to score a location of object property in memory.</p><p>This is theoretically more costly and inefficient than object management in class-based object-oriented programming languages such as Java. So V8 JavaScript engine uses hidden class method. A hidden class operates like class in Java.</p></blockquote><h2 id="Mutable-Value"><a href="#Mutable-Value" class="headerlink" title="Mutable Value"></a>Mutable Value</h2><p>The value of an object (reference) type, that is, an object is a mutable value.</p><p>A variable that has been assigned a primitive value has its primitive value as its value. </p><p>But, the variable that the object is assigned has a <strong>reference value</strong> as a value. The reference value is <strong>the address of the memory space</strong> in which the created object is stored, itself.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/57298300-d181c600-710c-11e9-96ba-119ba0ffc866.png" alt="Assignment of an object"></p><ul><li><p><code>student</code> variable has a <strong>address of the memory space</strong> where a created object is stored. This is a <strong>reference value</strong>. A variable can access the object by this reference value.</p></li><li><p>When evaluating a variable that assigns an object, it returns the object by accessing the actual object through the reference value rather than returning the reference value stored in memory.</p></li><li><p>An object pointed by a variable can be added dynamically after it has been created, updated, or deleted. In other words, an object is a <strong>mutable value</strong>.</p></li><li><p>Objects can be very large and change fluidly, so instead of reallocating each time as a primitive value and changing the memory address, it changes the object itself to be referenced directly.</p></li><li><p>In other words, copying an object as a primitive value (a deep copy) is <strong>expensive and inefficient</strong>, so it copies the reference value.</p><blockquote><h3 id="Shallow-copy-and-Deep-copy"><a href="#Shallow-copy-and-Deep-copy" class="headerlink" title="Shallow copy and Deep copy"></a>Shallow copy and Deep copy</h3><ul><li>Shallow copy : copying reference values</li><li>Deep copy : copying and recreating the object itself as a primitive value. The larger the object, the higher the cost.</li></ul></blockquote></li></ul><ul><li><p>A side effect of storing an object’s reference value is that an object can be referenced by multiple identifiers.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> teacher = student;</span><br><span class="line"></span><br><span class="line">teacher.age = <span class="hljs-number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(teacher);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(student);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/57299503-b06ea480-710f-11e9-8dd4-19c322cbf727.png" alt="Referenced by multiple identifiers"></p><ul><li>The property is added only to the object of the teacher variable, but the changes are shared because the objects referenced by the student and teacher are the same.</li></ul></li></ul><h2 id="Pass-by-Reference"><a href="#Pass-by-Reference" class="headerlink" title="Pass by Reference"></a>Pass by Reference</h2><p>If you assign a variable that points to an object to another variable, the original reference value is copied and passed. This is called <strong>pass by reference.</strong></p><p><img src="https://user-images.githubusercontent.com/48080762/57299971-d34d8880-7110-11e9-8fc7-1ee9d64a5f13.png" alt="Pass by Reference"></p><p>As shown in the figure above, since the memory address of the same object is referenced, <code>student</code> and <code>teacher</code> refer to the same object and change it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Difference-between-primitive-type-and-object-type&quot;&gt;&lt;a href=&quot;#Difference-between-primitive-type-and-object-type&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="immutable" scheme="https://sub2n.github.io/tags/immutable/"/>
    
      <category term="mutable" scheme="https://sub2n.github.io/tags/mutable/"/>
    
      <category term="primitive" scheme="https://sub2n.github.io/tags/primitive/"/>
    
      <category term="object" scheme="https://sub2n.github.io/tags/object/"/>
    
      <category term="pass by reference" scheme="https://sub2n.github.io/tags/pass-by-reference/"/>
    
      <category term="pass by value" scheme="https://sub2n.github.io/tags/pass-by-value/"/>
    
  </entry>
  
  <entry>
    <title>190507-TIL</title>
    <link href="https://sub2n.github.io/2019/05/07/190503-TIL/"/>
    <id>https://sub2n.github.io/2019/05/07/190503-TIL/</id>
    <published>2019-05-07T10:51:17.000Z</published>
    <updated>2019-05-07T11:21:52.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Studied JavaScript operator, contitional statement, type coercion and short-circuit evaluation, object literal.</p><p>Algorithm study - CodeWars [6kyu] Consecutive strings. We will start to implement underscore library functions like map, reduce.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Studied JavaScript
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>9. Object Literal</title>
    <link href="https://sub2n.github.io/2019/05/05/9-Object-Literal/"/>
    <id>https://sub2n.github.io/2019/05/05/9-Object-Literal/</id>
    <published>2019-05-05T11:16:54.000Z</published>
    <updated>2019-05-08T12:16:17.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Object"><a href="#What-is-Object" class="headerlink" title="What is Object?"></a>What is Object?</h1><p>JavaScript is an object-based programming language and almost “everything” that makes up JavaScript is an object. The rest of the values (functions, arrays, regular expressions, etc.) are all objects except primitive types.</p><p>Object / reference type is a complex data structure that consists of several types of values (primitive type values or other objects) in a single unit.</p><table><thead><tr><th style="text-align:center">Primitive value</th><th style="text-align:center">Object</th></tr></thead><tbody><tr><td style="text-align:center">immutable value</td><td style="text-align:center">mutable value</td></tr><tr><td style="text-align:center">pass by value</td><td style="text-align:center">pass by reference</td></tr></tbody></table><p><strong>Object</strong> is a set of properties that consist of keys and values.</p><p>Any value that is available in JavaScript can be used as the value of the property. Functions in JavaScript are first-class objects, so they can be treated as values.</p><p>JavaScript functions are first-class objects, so they can be used as property values. If the property value is a function, it is called a <strong>method</strong> to distinguish it from a normal function.</p><ul><li>Attributes are refer to additional information of an object. </li><li>Properties are describing the characteristics of an object.</li></ul><p>An object is a set of methods, which means properties that refer to data and behavior that can refer to and manipulate data.</p><h1 id="Create-Object-by-Object-Literal"><a href="#Create-Object-by-Object-Literal" class="headerlink" title="Create Object by Object Literal"></a>Create Object by Object Literal</h1><p>Class-based object-oriented languages such as C ++ and Java pre-define classes and create objects by calling the constructor with the new operator at the point in time. However, JavaScript is a prototype-based object-oriented language that creates objects differently.</p><p>Then how JavaScript creates object?</p><ul><li>Object literal</li><li>Object constructor function</li><li>Constructor function</li><li>Object.create method</li><li>Class (ES6)</li></ul><p>The most basic and general method is using object literal.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// empty object</span></span><br><span class="line"><span class="hljs-keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// At the time of assignment, the object literal is interpreted and the resulting object is created.</span></span><br><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span>,</span><br><span class="line">    hello: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        Console.log(<span class="hljs-string">'Hello. I'</span>m $&#123;<span class="hljs-keyword">this</span>.name&#125;.<span class="hljs-string">');</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br><span class="line"><span class="hljs-string">&#125;;</span></span><br></pre></td></tr></table></figure><p>The <code>{}</code> used to create the object is not a block of code. It is an object literal because it ends with a <code>;</code>.</p><p>You can create a property as soon as you create the object by including the property in an object literal, or you can dynamically add a property after you create the object.</p><h1 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h1><p>An object is a set of properties. A property consists of a key and a value.</p><p>The values that can be used for property key and property values are as follows.</p><ul><li>Property key : all strings include empty string or symbol value</li><li>Property value : all values in JavaScript</li></ul><p>Quotes can be omitted if the property key is a name that conforms to the identifier naming convention, that is, a valid name that can be used in JavaScript.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Dynamically add property key</span></span><br><span class="line">student[<span class="hljs-string">'age'</span>] = <span class="hljs-number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student); <span class="hljs-comment">// &#123;name: "Park", age: 25&#125;</span></span><br></pre></td></tr></table></figure><p>Property keys are allowed to be duplicated, and in the event of duplication, the last declared key is valid.</p><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p>If the property value is a function, it is called a method to distinguish it from a normal function. In other words, a method means a function restricted to an object.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> circle = &#123;</span><br><span class="line">  radius: <span class="hljs-number">5</span>, <span class="hljs-comment">// ← property</span></span><br><span class="line">  getDiameter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// ← method</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * <span class="hljs-keyword">this</span>.radius; <span class="hljs-comment">// this pointing circle</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(circle.getDiameter());  <span class="hljs-comment">// 10</span></span><br></pre></td></tr></table></figure><p><code>this</code> is a reference variable that points to the object that called it.</p><h1 id="Access-of-Property"><a href="#Access-of-Property" class="headerlink" title="Access of Property"></a>Access of Property</h1><p>You can access the properties in such a way,</p><ul><li>Dot notation </li><li>Bracket notation</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student.name);<span class="hljs-comment">// Access by dot notaion</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student[<span class="hljs-string">'name'</span>];<span class="hljs-comment">// Access by bracket notation</span></span><br></pre></td></tr></table></figure><p>If the property key follows the identifier naming convention, 2 notations are both available. If not, only bracket notation is available.</p><p>If the property key is not a name that does conform to the identifier naming convention, that is, not a valid name that can be used in JavaScript,  must use square bracket notation. However, the quotation marks <code>&#39;&#39;</code> can be omitted if the property key is a string of numbers.</p><h1 id="Update-Property-Value"><a href="#Update-Property-Value" class="headerlink" title="Update Property Value"></a>Update Property Value</h1><p>If assign a value to an existing property, the property value is updated.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">student.name = <span class="hljs-string">'Kim'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student);<span class="hljs-comment">// &#123;name: "Kim"&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Dynamic-property-creation"><a href="#Dynamic-property-creation" class="headerlink" title="Dynamic property creation"></a>Dynamic property creation</h1><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">student.age = <span class="hljs-string">'22'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(student); <span class="hljs-comment">// &#123;name: "Park", age: "22"&#125;</span></span><br></pre></td></tr></table></figure><p>Can add, modify, and delete properties after object creation is complete.</p><h1 id="New-ES6-Object-Literal-Functions"><a href="#New-ES6-Object-Literal-Functions" class="headerlink" title="New ES6 Object Literal Functions"></a>New ES6 Object Literal Functions</h1><h2 id="Property-shorthand"><a href="#Property-shorthand" class="headerlink" title="Property shorthand"></a>Property shorthand</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>, y = <span class="hljs-number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123; x, y &#125;;   <span class="hljs-comment">// &#123; x:1, y: 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Property-key-dynamic-creation"><a href="#Property-key-dynamic-creation" class="headerlink" title="Property key dynamic creation"></a>Property key dynamic creation</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6</span></span><br><span class="line"><span class="hljs-keyword">const</span> prefix = <span class="hljs-string">'prop'</span>;</span><br><span class="line"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 객체 리터럴 내부에서 프로퍼티 키 동적 생성</span></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">    [<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>-<span class="hljs-subst">$&#123;++i&#125;</span>`</span>]: i,</span><br><span class="line">    [<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>-<span class="hljs-subst">$&#123;++i&#125;</span>`</span>]: i,</span><br><span class="line">    [<span class="hljs-string">`<span class="hljs-subst">$&#123;prefix&#125;</span>-<span class="hljs-subst">$&#123;++i&#125;</span>`</span>]: i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;prop-1: 1, prop-2: 2, prop-3: 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Method-shorthand"><a href="#Method-shorthand" class="headerlink" title="Method shorthand"></a>Method shorthand</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6</span></span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span>,</span><br><span class="line">    <span class="hljs-comment">// 메소드 축약 표현</span></span><br><span class="line">    sayHi(other) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hi, <span class="hljs-subst">$&#123;other&#125;</span>! I'm <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.sayHi(<span class="hljs-string">'Sam'</span>); <span class="hljs-comment">// Hi, Sam! I'm Park</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-Object&quot;&gt;&lt;a href=&quot;#What-is-Object&quot; class=&quot;headerlink&quot; title=&quot;What is Object?&quot;&gt;&lt;/a&gt;What is Object?&lt;/h1&gt;&lt;p&gt;JavaScript is an obj
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>8. Type Coercion and Short-Circuit Evaluation</title>
    <link href="https://sub2n.github.io/2019/05/04/8-Type-Coercion-and-Short-Circuit-Evaluation/"/>
    <id>https://sub2n.github.io/2019/05/04/8-Type-Coercion-and-Short-Circuit-Evaluation/</id>
    <published>2019-05-04T11:16:16.000Z</published>
    <updated>2019-05-08T11:40:52.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Type-coercion"><a href="#What-is-Type-coercion" class="headerlink" title="What is Type coercion?"></a>What is Type coercion?</h1><ul><li><p>Explicit coercion / Type casting: developer intentionally converting value types</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> str = x.toString();</span><br></pre></td></tr></table></figure></li><li><p>Implicit coercion / Type coercion: Type automatically converted by the JavaScript engine regardless of developer intent.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> str = x + <span class="hljs-string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// x = Number 10, str = Sring 10</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="Does-reassignment-occur-when-type-coercion-occur"><a href="#Does-reassignment-occur-when-type-coercion-occur" class="headerlink" title="Does reassignment occur when type coercion occur?"></a>Does reassignment occur when type coercion occur?</h3><p>No. It only takes a moment to type when evaluating expressions.</p></blockquote></li></ul><p>The developer can use implicit type conversion intentionally.</p><h1 id="Implicit-type-coercion"><a href="#Implicit-type-coercion" class="headerlink" title="Implicit type coercion"></a>Implicit type coercion</h1><p>The JavaScript engine performs implicit type coercion when evaluating expressions, taking into account the context of the code.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'10'</span> + <span class="hljs-number">2</span>  <span class="hljs-comment">// '102'</span></span><br><span class="line"><span class="hljs-number">5</span> * <span class="hljs-string">'10'</span>  <span class="hljs-comment">// 50</span></span><br><span class="line">!<span class="hljs-number">0</span>         <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>) &#123;&#125;   <span class="hljs-comment">// if(true)</span></span><br></pre></td></tr></table></figure><p>When an implicit type coercion occurs, it automatically converts the type to one of the primitive types such as string, number, or boolean.</p><h2 id="Coercion-to-String-type"><a href="#Coercion-to-String-type" class="headerlink" title="Coercion to String type"></a>Coercion to String type</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Number type</span></span><br><span class="line"><span class="hljs-number">0</span> + <span class="hljs-string">''</span>              <span class="hljs-comment">// "0"</span></span><br><span class="line"><span class="hljs-number">-0</span> + <span class="hljs-string">''</span>             <span class="hljs-comment">// "0"</span></span><br><span class="line"><span class="hljs-number">1</span> + <span class="hljs-string">''</span>              <span class="hljs-comment">// "1"</span></span><br><span class="line"><span class="hljs-number">-1</span> + <span class="hljs-string">''</span>             <span class="hljs-comment">// "-1"</span></span><br><span class="line"><span class="hljs-literal">NaN</span> + <span class="hljs-string">''</span>            <span class="hljs-comment">// "NaN"</span></span><br><span class="line"><span class="hljs-literal">Infinity</span> + <span class="hljs-string">''</span>       <span class="hljs-comment">// "Infinity"</span></span><br><span class="line">-<span class="hljs-literal">Infinity</span> + <span class="hljs-string">''</span>      <span class="hljs-comment">// "-Infinity"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Boolean type</span></span><br><span class="line"><span class="hljs-literal">true</span> + <span class="hljs-string">''</span>           <span class="hljs-comment">// "true"</span></span><br><span class="line"><span class="hljs-literal">false</span> + <span class="hljs-string">''</span>          <span class="hljs-comment">// "false"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// null type</span></span><br><span class="line"><span class="hljs-literal">null</span> + <span class="hljs-string">''</span>           <span class="hljs-comment">// "null"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// undefined type</span></span><br><span class="line"><span class="hljs-literal">undefined</span> + <span class="hljs-string">''</span>      <span class="hljs-comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Symbol type</span></span><br><span class="line">(<span class="hljs-built_in">Symbol</span>()) + <span class="hljs-string">''</span>     <span class="hljs-comment">// TypeError: Cannot convert a Symbol value to a string</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// onject type</span></span><br><span class="line">(&#123;&#125;) + <span class="hljs-string">''</span>           <span class="hljs-comment">// "[object Object]"</span></span><br><span class="line"><span class="hljs-built_in">Math</span> + <span class="hljs-string">''</span>           <span class="hljs-comment">// "[object Math]"</span></span><br><span class="line">[] + <span class="hljs-string">''</span>             <span class="hljs-comment">// ""</span></span><br><span class="line">[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>] + <span class="hljs-string">''</span>       <span class="hljs-comment">// "10,20"</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;) + <span class="hljs-string">''</span> <span class="hljs-comment">// "function()&#123;&#125;"</span></span><br><span class="line"><span class="hljs-built_in">Array</span> + <span class="hljs-string">''</span>          <span class="hljs-comment">// "function Array() &#123; [native code] &#125;"</span></span><br></pre></td></tr></table></figure><h2 id="Coercion-to-Number-type"><a href="#Coercion-to-Number-type" class="headerlink" title="Coercion to Number type"></a>Coercion to Number type</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// String type</span></span><br><span class="line">+<span class="hljs-string">''</span>             <span class="hljs-comment">// 0</span></span><br><span class="line">+<span class="hljs-string">'0'</span>            <span class="hljs-comment">// 0</span></span><br><span class="line">+<span class="hljs-string">'1'</span>            <span class="hljs-comment">// 1</span></span><br><span class="line">+<span class="hljs-string">'string'</span>       <span class="hljs-comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Boolean type</span></span><br><span class="line">+<span class="hljs-literal">true</span>           <span class="hljs-comment">// 1</span></span><br><span class="line">+<span class="hljs-literal">false</span>          <span class="hljs-comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// null type</span></span><br><span class="line">+<span class="hljs-literal">null</span>           <span class="hljs-comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// undefined type</span></span><br><span class="line">+<span class="hljs-literal">undefined</span>      <span class="hljs-comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Symbol type</span></span><br><span class="line">+<span class="hljs-built_in">Symbol</span>()       <span class="hljs-comment">// TypeError: Cannot convert a Symbol value to a number</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// object type</span></span><br><span class="line">+&#123;&#125;             <span class="hljs-comment">// NaN</span></span><br><span class="line">+[]             <span class="hljs-comment">// 0</span></span><br><span class="line">+[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]       <span class="hljs-comment">// NaN</span></span><br><span class="line">+(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;) <span class="hljs-comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="Coercion-to-Boolean-type"><a href="#Coercion-to-Boolean-type" class="headerlink" title="Coercion to Boolean type"></a>Coercion to Boolean type</h2><p>When evaluating a non-boolean value with a boolean, there are only 6 values that evaluate to false.</p><ul><li>Falsy value<ul><li>false</li><li>undefined</li><li>null</li><li>0, -0</li><li>NaN</li><li>‘’ (empty string)</li></ul></li><li>Truthy value<ul><li>non-falsy values</li></ul></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// The following conditional statements all execute code blocks.</span></span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-literal">false</span>)     <span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> + <span class="hljs-string">' is falsy value'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-literal">undefined</span>) <span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span> + <span class="hljs-string">' is falsy value'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-literal">null</span>)      <span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> + <span class="hljs-string">' is falsy value'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-number">0</span>)         <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> + <span class="hljs-string">' is falsy value'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-literal">NaN</span>)       <span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span> + <span class="hljs-string">' is falsy value'</span>);</span><br><span class="line"><span class="hljs-keyword">if</span> (!<span class="hljs-string">''</span>)        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">''</span> + <span class="hljs-string">' is falsy value'</span>);</span><br></pre></td></tr></table></figure><h1 id="Explicit-type-coercion"><a href="#Explicit-type-coercion" class="headerlink" title="Explicit type coercion"></a>Explicit type coercion</h1><ul><li><p>Call the wrapper object constructor used to create the Wrapper object without new</p>  <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">String</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">// '1'</span></span><br><span class="line"><span class="hljs-built_in">Number</span>(<span class="hljs-string">'1'</span>);<span class="hljs-comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Using the built-in method provided by JavaScript</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-number">1</span>).toString();<span class="hljs-comment">// '1'</span></span><br><span class="line"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">'-1'</span>);<span class="hljs-comment">// -1</span></span><br></pre></td></tr></table></figure></li><li><p>Using implicit type coercion</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">1</span> + <span class="hljs-string">''</span>;<span class="hljs-comment">// '1'</span></span><br><span class="line">+ <span class="hljs-string">'-1'</span>;<span class="hljs-comment">// -1</span></span><br><span class="line"><span class="hljs-string">'-1'</span> * <span class="hljs-number">1</span>;<span class="hljs-comment">// -1</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Short-Circuit-Evaluation"><a href="#Short-Circuit-Evaluation" class="headerlink" title="Short-Circuit Evaluation"></a>Short-Circuit Evaluation</h1><p>The logical AND operator <code>&amp;&amp;</code> and the logical OR operator <code>||</code> return the operand that determined the logical evaluation. This is called <strong>short-circuit evaluation</strong>.</p><ul><li><p>Logical OR operator <code>||</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'Cat'</span> || <span class="hljs-string">'Dog'</span><span class="hljs-comment">// 'Cat'</span></span><br></pre></td></tr></table></figure><ul><li>The logical OR operator <code>||</code> returns true even if only one of the two operands evaluates to true.</li><li>The OR operator <code>||</code> returns the first operand that determines the result of the logical operation, that is, the string ‘Cat’.</li></ul></li><li><p>Logical AND operator <code>&amp;&amp;</code></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">'Cat'</span> &amp;&amp; <span class="hljs-string">'Dog'</span><span class="hljs-comment">// 'Dog'</span></span><br></pre></td></tr></table></figure><ul><li>The AND operator <code>&amp;&amp;</code> returns <code>true</code> when both operands evaluate to true.</li><li>The logical AND operator <code>&amp;&amp;</code> returns the second operand that determined the result of the logical operation, the string ‘Dog’.</li></ul></li><li><p>Short evaluation means that <code>&amp;&amp;</code> and <code>||</code> return the operand that determined the logical evaluation.</p></li><li><p>Used to reduce TypeErrors</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> elem = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elem.value);              <span class="hljs-comment">// TypeError: Cannot read property 'value' of null</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(elem &amp;&amp; elem.value); <span class="hljs-comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (elem) <span class="hljs-built_in">console</span>.log(elem.value);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-Type-coercion&quot;&gt;&lt;a href=&quot;#What-is-Type-coercion&quot; class=&quot;headerlink&quot; title=&quot;What is Type coercion?&quot;&gt;&lt;/a&gt;What is Type coercion?
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>7. Control Flow Statement</title>
    <link href="https://sub2n.github.io/2019/05/03/7-Control-Flow-Statement/"/>
    <id>https://sub2n.github.io/2019/05/03/7-Control-Flow-Statement/</id>
    <published>2019-05-03T10:53:14.000Z</published>
    <updated>2019-05-08T11:15:17.663Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Controls the flow of code that runs sequentially from top to bottom.</p></li><li><p>Control statements make the flow of code difficult to understand, which detracts from readability.</p></li><li>Should suppress the use of control statements with using high order functions (map, filter, reduce, forEach)</li></ul><h1 id="Block-Statement-Compound-Statement"><a href="#Block-Statement-Compound-Statement" class="headerlink" title="Block Statement / Compound Statement"></a>Block Statement / Compound Statement</h1><ul><li>0 or more statements enclosed in curly braces <code>{}</code></li><li>In other languages, a block creates a scope, but JavaScript creates a function-level scope. Therefore, variables created in block are global variables.</li><li>Block statements (code blocks) are treated as one execution unit.</li><li><p>A semicolon (;) is usually appended to the end of the statement, but no semicolon at the end of the block statement.</p><h1 id="Conditional-Statement"><a href="#Conditional-Statement" class="headerlink" title="Conditional Statement"></a>Conditional Statement</h1></li><li><p>Determine whether to execute a code block based on the evaluation result of a given conditional expression.</p><blockquote><h3 id="Conditional-expression"><a href="#Conditional-expression" class="headerlink" title="Conditional expression"></a>Conditional expression</h3><p>Expression that can be evaluated as boolean value</p></blockquote></li><li><p>JavaScript provides 2 conditional statements as if..else statements and switch statement</p></li></ul><h3 id="if-…-else-Statement"><a href="#if-…-else-Statement" class="headerlink" title="if … else Statement"></a>if … else Statement</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (Conditional expression) &#123;</span><br><span class="line">  <span class="hljs-comment">// This code block is executed if the conditional expression is true.</span></span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// This code block is executed if the conditional expression is false.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Most if … else statement can be replaced with the ternary conditional operator discussed in <a href="https://sub2n.github.io/2019/05/01/6-Operator/1">6. Operators</a>.</p><h3 id="switch-Statement"><a href="#switch-Statement" class="headerlink" title="switch Statement"></a>switch Statement</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">switch</span> (Expression) &#123;</span><br><span class="line">  <span class="hljs-keyword">case</span> Expression1:</span><br><span class="line">   <span class="hljs-comment">// The statement to be executed if the expression in the switch statement matches expression 1;</span></span><br><span class="line">    <span class="hljs-keyword">break</span>;</span><br><span class="line">  <span class="hljs-keyword">case</span> Expression2:</span><br><span class="line">    <span class="hljs-comment">// The statement to be executed if the expression in the switch statement matches expression 2;</span></span><br><span class="line">    <span class="hljs-keyword">break</span>;</span><br><span class="line">  <span class="hljs-keyword">default</span>:</span><br><span class="line">    <span class="hljs-comment">// The statement to be executed when there is no case statement with an expression that matches the expression in the switch statement;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>If the code can be represented by if…else, the use of the switch should be avoided whenever possible.</li><li>Evaluates a given conditional expression and moves the execution order to a case statement with an expression that matches the value.</li><li>Used when there are more cases than if…else statements.</li><li>If do not use a break statement in a case, all the cases are checked sequentially to the default due to the <strong>fall through</strong> property of the switch.</li></ul><h1 id="Loop-Statement"><a href="#Loop-Statement" class="headerlink" title="Loop Statement"></a>Loop Statement</h1><p>Loop statement executes the code block repeatedly until the conditional expression is false.</p><h2 id="for-Statement"><a href="#for-Statement" class="headerlink" title="for Statement"></a>for Statement</h2><p>The for statement executes the code block repeatedly until the conditional expression is determined to be false.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (declaration statement or assignment statement; conditional expression; Increase / decrease expression)&#123;</span><br><span class="line"><span class="hljs-comment">// Statements that will be executed when conditional expression return true;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while-Statement"><a href="#while-Statement" class="headerlink" title="while Statement"></a>while Statement</h2><p>The while statement repeatedly executes the code block repeatedly if the evaluation result of the given conditional expression is true.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span> (conditional expression)&#123;</span><br><span class="line">    <span class="hljs-comment">// Escape condition is needed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do-while-Statement"><a href="#do-while-Statement" class="headerlink" title="do while Statement"></a>do while Statement</h2><p>It’s the same as while, but once it runs and checks the conditional</p><h1 id="break-Statement"><a href="#break-Statement" class="headerlink" title="break Statement"></a>break Statement</h1><p>The break statement exits the code block. </p><p>Actually it escapes the label statement, the for loop (for, for … in, for … of, while, do … while) or the code block of the switch statement. </p><p>If a break statement is used in addition to the label statement, the loop statement, or the code block of the switch statement, SyntaxError occurs.</p><h1 id="continue-Statement"><a href="#continue-Statement" class="headerlink" title="continue Statement"></a>continue Statement</h1><ul><li>If continue is encountered, the code will stop running and move to the increment or decrement statement of the loop</li><li>The statements under continue are not executed.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Controls the flow of code that runs sequentially from top to bottom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Control statements make the flow of code d
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>190502-TIL</title>
    <link href="https://sub2n.github.io/2019/05/02/190502-TIL/"/>
    <id>https://sub2n.github.io/2019/05/02/190502-TIL/</id>
    <published>2019-05-02T12:45:17.000Z</published>
    <updated>2019-05-02T12:47:46.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Algorithm study</p><p>Solved Double cola problem!</p><p>Studied about Control flow statement of JavaScript</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Algorithm study&lt;/p
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Playing with digits</title>
    <link href="https://sub2n.github.io/2019/05/02/CodeWars-6kyu-Playing-with-digits/"/>
    <id>https://sub2n.github.io/2019/05/02/CodeWars-6kyu-Playing-with-digits/</id>
    <published>2019-05-02T06:11:03.000Z</published>
    <updated>2019-05-02T06:23:47.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Playing-with-digits"><a href="#CodeWars-6kyu-Playing-with-digits" class="headerlink" title="CodeWars 6kyu. Playing with digits"></a><a href="https://www.codewars.com/kata/playing-with-digits/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Playing with digits</a></h2><p>Play with digits 😊</p><a id="more"></a><p>I changed the type of input n to cycle through each digit.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">digPow</span>(<span class="hljs-params">n, p</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> digitSum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> strNum = <span class="hljs-built_in">String</span>(n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> strNum)&#123;</span><br><span class="line">    digitSum += strNum[i]**p;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>.isInteger(digitSum/n) ? digitSum/n : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/57058695-4196e300-6cec-11e9-9f36-2b196d64fba6.png" alt="Submit screen"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Playing-with-digits&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Playing-with-digits&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Playing with digits&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/playing-with-digits/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Playing with digits&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Play with digits 😊&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190501-TIL</title>
    <link href="https://sub2n.github.io/2019/05/01/190501-TIL/"/>
    <id>https://sub2n.github.io/2019/05/01/190501-TIL/</id>
    <published>2019-05-01T12:43:16.000Z</published>
    <updated>2019-05-01T12:47:46.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>I learned about the operation principle and process of web browser. HTML parser creates DOM tree, CSS parser creates CSSOM tree and JavaScript parser creates AST(Abstract Syntax Tree).</p><p>Now I can explain JavaScript and ECMAScript.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;I learned about th
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>6. Operator</title>
    <link href="https://sub2n.github.io/2019/05/01/6-Operator/"/>
    <id>https://sub2n.github.io/2019/05/01/6-Operator/</id>
    <published>2019-05-01T11:43:56.000Z</published>
    <updated>2019-05-08T10:52:56.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Expression-and-Operator"><a href="#Expression-and-Operator" class="headerlink" title="Expression and Operator"></a>Expression and Operator</h1><p>Operator needs operand as value. And the expression is equivalent with value. So expressions can be located</p><p>Values ​​can be generated in a variety of ways. The various methods mentioned here are expressions. Expressions in a programming language have a very important meaning.</p><p>Expression is combination of tokens(literal, identifier(variable name, function name, etc), operator, function call). The expression is evaluated to produce a single value. That is, an <strong>expression is a statement that can be evaluated as a single value</strong>.</p><p>Expression can be divided into a literal notation, an identifier expression, an operator expression, a function/method call expression, but they are all the same in that they are evaluated and made into a single value.</p><p>The value that generated by evaluation of an expression is equivalent with an expression. In other words, expressions can be used like values. This means that an expression can also be placed where the value can be placed.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// expression x + 30 consists of a combination of an identifier expression(x), number literal(30) and operator(+)</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x + <span class="hljs-number">30</span>); <span class="hljs-comment">//40</span></span><br></pre></td></tr></table></figure><h1 id="Statement-and-Expression"><a href="#Statement-and-Expression" class="headerlink" title="Statement and Expression"></a>Statement and Expression</h1><p><strong>A statement</strong> is a <strong>command to a JavaScript engine that consists of a combination of one or more expressions and keywords.</strong> A program is made up of a set of statements, and programming is to write the statements and sequence them.</p><p>A statement can be divided into</p><ul><li>declare statement</li><li>expression statement</li><li>conditional statement</li><li>loop statement. </li></ul><p>Statement should end up with semicolon(;). Do not add a semicolon after the code block.</p><p>All codes of JavaScript are statements. An expression can itself be a statement. But the statement can not be an expression.</p><p>It is difficult that distinguish statement and expression. The expression evaluates to produce a value, but can not do anything further. The statement can be used to create variables, functions, and classes using declarative keywords such as <code>var</code>, <code>let</code>, <code>const</code>, function (declare statement), and class and to control the program flow by generating conditional statements such as <code>if</code>, <code>for</code>, and <code>while</code> statements.</p><p>The role of expression is that generates value. The role of statement is that command to JavaScript engine using a value that is generated by expression.</p><h1 id="Expression-statement-and-Non-expression-statement"><a href="#Expression-statement-and-Non-expression-statement" class="headerlink" title="Expression statement and Non-expression statement"></a>Expression statement and Non-expression statement</h1><p>There are expression statement and non-expression statement. A expression statement is a statement that can be evaluated as a value, and non-expression statement is a statement that can not be evaluated as a value.</p><p>For example, assignment statement can not be evaluated as a value. So it’s non-expression statement. </p><p><strong>The simplest and most obvious way to distinguish expressions from expressions is to assign them to variables.</strong> An expression statement can be evaluated as value so it can be assigned to a variable.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// declare statement : non-expression statement</span></span><br><span class="line">&gt; <span class="hljs-keyword">var</span> x;</span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// assignment statement : expression statement</span></span><br><span class="line">&gt; x = <span class="hljs-number">5</span>;</span><br><span class="line">&lt; <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// function declare statement : non-expression statement</span></span><br><span class="line">&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// conditional statement : non-expression statement</span></span><br><span class="line">&gt; <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">5</span>) &#123; <span class="hljs-built_in">console</span>.log(x); &#125;</span><br><span class="line">  <span class="hljs-number">5</span></span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// loop statement</span></span><br><span class="line">&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123; <span class="hljs-built_in">console</span>.log(i); &#125;</span><br><span class="line">  <span class="hljs-number">0</span></span><br><span class="line">  <span class="hljs-number">1</span></span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br></pre></td></tr></table></figure><p>Expression always prints a evaluated value in Chrome developer tool.</p><h1 id="What-is-Operator"><a href="#What-is-Operator" class="headerlink" title="What is Operator?"></a>What is Operator?</h1><p>An operator creates one value by performing arithmetic, assignment, comparison, logic, and type operations on one or more expressions. </p><ul><li>operand : the object of the operation</li></ul><p>The operand is also an expression because it is evaluated and a single value, and the expression is also an expression that combines the operand with the operator.</p><h1 id="Arithmetic-Operator"><a href="#Arithmetic-Operator" class="headerlink" title="Arithmetic Operator"></a>Arithmetic Operator</h1><p>The Arithmetic Operator performs a mathematical computation on the operands to produce new numeric values. If arithmetic is not possible, NaN is returned.</p><p>Arithmetic operators can be classified into binary arithmetic operators and unary arithmetic operators according to the number of operands.</p><h2 id="Binary-Arithmetic-Operator"><a href="#Binary-Arithmetic-Operator" class="headerlink" title="Binary Arithmetic Operator"></a>Binary Arithmetic Operator</h2><p>The binary arithmetic operator creates one Number type value by operating arithmetic on two operands.</p><p>All binary arithmetic operators have no side effects that change the value of the operand. In other words, any arithmetic operation does not change the value of the operand. It always creates new values.</p><table><thead><tr><th style="text-align:center">Binary arithmetic operator</th><th style="text-align:center">Meaning</th><th style="text-align:center">Side effect</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">Addition</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">Subtraction</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">Multiplication</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">Division</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">Remainder</td><td style="text-align:center">X</td></tr></tbody></table><h2 id="Unary-Arithmetic-Operator"><a href="#Unary-Arithmetic-Operator" class="headerlink" title="Unary Arithmetic Operator"></a>Unary Arithmetic Operator</h2><p>Unary arithmetic operators perform arithmetic operations on a single operand to produce a numeric type value. The increment / decrement (++ / –) operator has side effects that change the value of the operand. </p><table><thead><tr><th style="text-align:center">Unary arithmetic operator</th><th style="text-align:center">Meaning</th><th style="text-align:center">Side effect</th></tr></thead><tbody><tr><td style="text-align:center">++</td><td style="text-align:center">Increment</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">–</td><td style="text-align:center">Decrement</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">No effect. Negative numbers are not reversed to positive numbers.</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">Returns a positive number that is a negative number and a negative number that is a positive number.</td><td style="text-align:center">X</td></tr></tbody></table><p>The position of increment/decrement(++/–) operator has meaning.</p><ul><li>The prefix increment / decrement operator that located before the operand first increments / decrements the value of the operand, and then performs another operation.</li><li>The postfix increment / decrement operator that located after the operand first performs other operation, and then increments / decrements the value of the operand.</li></ul><h2 id="String-Concatenation-Operator"><a href="#String-Concatenation-Operator" class="headerlink" title="String Concatenation Operator"></a>String Concatenation Operator</h2><p>The <strong>+ operator</strong> acts as a string concatenation operator <strong>if at least one of the operands is a string.</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span> + <span class="hljs-number">2</span>); <span class="hljs-comment">//12</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + <span class="hljs-string">'2'</span>); <span class="hljs-comment">//12</span></span><br></pre></td></tr></table></figure><p>This is an implicit type coercion by the JavaScript engine, regardless of the developer’s intent.</p><h1 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h1><p>Assignment Operator assign the operand at right side to the variable at left side. The assignment operator changes the value of a variable by assigning it a value.</p><table><thead><tr><th style="text-align:center">Assignment Operator</th><th style="text-align:center">Example</th><th style="text-align:center">Same Expression</th><th style="text-align:center">Side Effect</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">x = 5</td><td style="text-align:center">x = 5</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">x += 5</td><td style="text-align:center">x = x + 5</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">x -= 5</td><td style="text-align:center">x = x - 5</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">x *= 5</td><td style="text-align:center">x = x * 5</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">x /= 5</td><td style="text-align:center">x = x / 5</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">x %= 5</td><td style="text-align:center">x = x % 5</td><td style="text-align:center">O</td></tr></tbody></table><p>An assignment operation is an expression that evaluates to a single value. The assignment expression is evaluated to the assigned value.</p><h1 id="Comparison-Operator"><a href="#Comparison-Operator" class="headerlink" title="Comparison Operator"></a>Comparison Operator</h1><p>Comparison Operator compares the left and right operands, and then returns a Boolean value. Comparison operators are often used in conditional expressions of control statements such as if statements and for statements.</p><h2 id="Loose-Equality-Operator-and-Strict-Equality-Operator"><a href="#Loose-Equality-Operator-and-Strict-Equality-Operator" class="headerlink" title="Loose Equality Operator and  Strict Equality Operator"></a>Loose Equality Operator and  Strict Equality Operator</h2><p>Loose equality operator and  strict equality operator are both returns the Boolean value by comparing whether the left operand and the right operand have the same value. </p><ul><li>Loose equality operator (==) : loose comparison</li><li>Strict equality operator (===) : strict comparison</li></ul><table><thead><tr><th style="text-align:center">Equality Operator</th><th style="text-align:center">Meaning</th><th style="text-align:center">Example</th><th style="text-align:center">Explanation</th><th style="text-align:center">Side Effect</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">Loose equality comparison</td><td style="text-align:center">x == y</td><td style="text-align:center">values of x and y are equal</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">===</td><td style="text-align:center">Strict equality comparison</td><td style="text-align:center">x === y</td><td style="text-align:center">both value and type of x and y are equal</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">Loose inequality comparison</td><td style="text-align:center">x != y</td><td style="text-align:center">values of x and y are different</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">!==</td><td style="text-align:center">Strict inequality comparison</td><td style="text-align:center">x !== y</td><td style="text-align:center">value and type of x and y are different</td><td style="text-align:center">X</td></tr></tbody></table><p>Loose equality operator (==) compares the types by implicit type conversion and then compares them with the same value. Thus, the loose equality operator returns true if the operand of the left and right terms is the same value after the implicit type conversion, even if the type is different.</p><p>Strict equality operator (===) return false if the types of operands are different. But NaN is the only value that does not match itself.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// NaN is the only value that does not match itself.</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span> === <span class="hljs-literal">NaN</span>);<span class="hljs-comment">//false</span></span><br></pre></td></tr></table></figure><p>Use the built-in function <code>isNaN</code> to check if a number is NaN.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">NaN</span>));<span class="hljs-comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><table><thead><tr><th style="text-align:center">Relational Operator</th><th style="text-align:center">Name</th><th style="text-align:center">Example</th><th style="text-align:center">Side Effect</th></tr></thead><tbody><tr><td style="text-align:center">&gt;</td><td style="text-align:center">Greater than operator</td><td style="text-align:center">x &gt; y</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">Less than operator</td><td style="text-align:center">x &lt; y</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">>=</td><td style="text-align:center">Greater than or equal operator</td><td style="text-align:center">x &gt;= y</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">Less than or equal operator</td><td style="text-align:center">x &lt;= y</td><td style="text-align:center">X</td></tr></tbody></table><h1 id="Conditional-Ternary-Operator"><a href="#Conditional-Ternary-Operator" class="headerlink" title="Conditional Ternary Operator"></a>Conditional Ternary Operator</h1><p>The ternary operator determines the value to return based on the evaluation of the conditional expression. It is the only ternary operator in JavaScript and has no side effects.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conditional expression ? return value when the conditional expression is true : return value when the conditional expression is false</span><br></pre></td></tr></table></figure><p>If the evaluation result of the conditional expression is not a Boolean value, it is implicitly typed as a Boolean value.</p><p>Conditional ternary operator expressions are expressions that can be evaluated as values. Therefore, the conditional ternary operator expression can be part of another expression and is very useful.</p><h1 id="Logical-Operator"><a href="#Logical-Operator" class="headerlink" title="Logical Operator"></a>Logical Operator</h1><ul><li><p>OR ||</p></li><li><ul><li>Return true if only one operand is true</li></ul></li><li><p>AND &amp;&amp;</p></li><li><ul><li>Return false if any operand is false</li></ul></li><li><p>NOT !</p></li><li><ul><li>Return true if operand is false, Return false if operand is true</li></ul></li><li><p>The logical OR operator and logical AND operator do not return only the boolean result of the operation. It returns one of the operands.</p></li><li><p>But the NOT operator must return a boolean.</p></li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Cat'</span> &amp;&amp; <span class="hljs-string">'Dog'</span>); <span class="hljs-comment">// 'Dog'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Cat'</span> || <span class="hljs-string">'Dog'</span>);<span class="hljs-comment">// 'Cat'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(!<span class="hljs-string">'Cat'</span>); <span class="hljs-comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="Comma-Operator"><a href="#Comma-Operator" class="headerlink" title="Comma Operator"></a>Comma Operator</h1><p>Comma(,) operator evaluate from the left operand in turn, return the result of the last operand and return the result.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x, y, z;</span><br><span class="line">x = <span class="hljs-number">1</span>, y = <span class="hljs-number">2</span>, z = <span class="hljs-number">3</span>;</span><br></pre></td></tr></table></figure><h1 id="Group-Operator"><a href="#Group-Operator" class="headerlink" title="Group Operator"></a>Group Operator</h1><p>Group operator <code>()</code>  evaluates the expression that is the operand first. Therefore, group operators can be used to control the priority of operators.</p><h1 id="typeof-Operator"><a href="#typeof-Operator" class="headerlink" title="typeof Operator"></a>typeof Operator</h1><p>The typeof operator returns the string as the data type of the operand after itself. The string returned by the typeof operator does not match the 7 data types.</p><p>The typeof operator returns one of the 7 strings “string”, “number”, “boolean”, “undefined”, “symbol”, “object”, or “function” It does not return “null”; it returns “function” for functions.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-string">''</span>              <span class="hljs-comment">// "string"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>               <span class="hljs-comment">// "number"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span>             <span class="hljs-comment">// "number"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>            <span class="hljs-comment">// "boolean"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>       <span class="hljs-comment">// "undefined"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>()        <span class="hljs-comment">// "symbol"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>            <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> []              <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> &#123;&#125;              <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()      <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> /test/gi        <span class="hljs-comment">// "object"</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;  <span class="hljs-comment">// "function"</span></span><br></pre></td></tr></table></figure><ul><li><p>Since typeof null is an object, when checking null, use === operator.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> foo = <span class="hljs-literal">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo === <span class="hljs-literal">null</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(foo === <span class="hljs-literal">null</span>);        <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>If an identifier not declared by the typeof operator is computed, it returns “undefined”.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Expression-and-Operator&quot;&gt;&lt;a href=&quot;#Expression-and-Operator&quot; class=&quot;headerlink&quot; title=&quot;Expression and Operator&quot;&gt;&lt;/a&gt;Expression and Op
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Expression" scheme="https://sub2n.github.io/tags/Expression/"/>
    
      <category term="Statement" scheme="https://sub2n.github.io/tags/Statement/"/>
    
      <category term="Operater" scheme="https://sub2n.github.io/tags/Operater/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Find The Parity Outlier</title>
    <link href="https://sub2n.github.io/2019/05/01/CodeWars-6kyu-Find-The-Parity-Outlier/"/>
    <id>https://sub2n.github.io/2019/05/01/CodeWars-6kyu-Find-The-Parity-Outlier/</id>
    <published>2019-05-01T06:11:42.000Z</published>
    <updated>2019-05-02T06:20:59.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Find-The-Parity-Outlier"><a href="#CodeWars-6kyu-Find-The-Parity-Outlier" class="headerlink" title="CodeWars 6kyu. Find The Parity Outlier"></a><a href="https://www.codewars.com/kata/5526fc09a1bbd946250002dc" target="_blank" rel="noopener">CodeWars 6kyu. Find The Parity Outlier</a></h2><p>Find one odd / even number in last all even / odd numbers.</p><a id="more"></a><blockquote><p>You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this “outlier” N.</p></blockquote><blockquote><p>Examples</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 0, 100, 4, 11, 2602, 36]</span><br><span class="line">Should return: 11 (the only odd number)</span><br><span class="line"></span><br><span class="line">[160, 3, 1719, 19, 11, 13, -21]</span><br><span class="line">Should return: 160 (the only even number)</span><br></pre></td></tr></table></figure><h2 id="First-Solution"><a href="#First-Solution" class="headerlink" title="First Solution"></a>First Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/57058944-b1f23400-6ced-11e9-882d-2e346bbc23af.png" alt="Solution1 submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOutlier</span>(<span class="hljs-params">integers</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> isOdd = <span class="hljs-literal">true</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">0</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">    <span class="hljs-comment">// even</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">      <span class="hljs-comment">// even even</span></span><br><span class="line">      isOdd = <span class="hljs-literal">false</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">      <span class="hljs-comment">// even odd</span></span><br><span class="line">      <span class="hljs-keyword">if</span>(integers[<span class="hljs-number">2</span>]%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>)&#123;</span><br><span class="line">        <span class="hljs-comment">// if even odd even, return odd</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">1</span>];</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-comment">// else if even odd odd, return even</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">    <span class="hljs-comment">// odd</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">      <span class="hljs-comment">// odd even</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">2</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">        <span class="hljs-comment">// if odd even even, return odd</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">0</span>];</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-comment">// if odd even odd, return even</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span>(isOdd == <span class="hljs-literal">true</span>)&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>; i&lt;integers.length; i++)&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(integers[i]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> integers[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>; i&lt;integers.length; i++)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(integers[i]%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> integers[i];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Second-Solution"><a href="#Second-Solution" class="headerlink" title="Second Solution"></a>Second Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/57058974-d0f0c600-6ced-11e9-9735-00208b67e603.png" alt="Solution2 submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOutlier</span>(<span class="hljs-params">integers</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> even = integers.filter(<span class="hljs-function"><span class="hljs-params">a</span>=&gt;</span>a%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">var</span> odd = integers.filter(<span class="hljs-function"><span class="hljs-params">a</span>=&gt;</span>a%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> even.length == <span class="hljs-number">1</span> ? <span class="hljs-built_in">Number</span>(even) : <span class="hljs-built_in">Number</span>(odd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Find-The-Parity-Outlier&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Find-The-Parity-Outlier&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Find The Parity Outlier&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/5526fc09a1bbd946250002dc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Find The Parity Outlier&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Find one odd / even number in last all even / odd numbers.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190430-TIL</title>
    <link href="https://sub2n.github.io/2019/04/30/190430-TIL/"/>
    <id>https://sub2n.github.io/2019/04/30/190430-TIL/</id>
    <published>2019-04-30T12:46:10.000Z</published>
    <updated>2019-05-01T00:08:59.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Algorithm study</p><p>Studied history, variable, data type and operation of JavaScript</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Algorithm study&lt;/p
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
</feed>
