<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>수빈 개발블로그</title>
  
  <subtitle>Sub2n Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sub2n.github.io/"/>
  <updated>2019-05-24T12:46:46.634Z</updated>
  <id>https://sub2n.github.io/</id>
  
  <author>
    <name>Subin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>190524-TIL</title>
    <link href="https://sub2n.github.io/2019/05/24/190524-TIL/"/>
    <id>https://sub2n.github.io/2019/05/24/190524-TIL/</id>
    <published>2019-05-24T12:23:39.000Z</published>
    <updated>2019-05-24T12:46:46.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FDS12-Pair-Hackaton"><a href="#FDS12-Pair-Hackaton" class="headerlink" title="FDS12 Pair Hackaton"></a>FDS12 Pair Hackaton</h2><p>오늘 약 5일간 기획하고 준비한 페어 해커톤을 마쳤다. 오전 10시부터 오후 5시까지 약 7시간동안 하나의 결과물을 내는 것이다. <strong>내 생애 첫 해커톤에서 1등을 했다.</strong> 오늘은 이론을 공부하지는 않았으나 그것보다 훨씬 더 많은 것을 배웠다.</p><p>우선 나는 프로젝트 경험이 적어 개발 능력에 자신감이 없는 편이었는데 이번 해커톤으로 자신감을 많이 얻었다. 그리고 무엇보다 내가 생각한대로 기능을 구현하는 것이 너무나 재미있었다.<br>삐그덕거리던 프로그램을 차근차근 고쳐서 모든 게 맞아 돌아가게끔 할 때의 쾌감이란! 확실히 개발은 재미있다. 고통 속에서 느끼는 희열이 있다. 그리고 기획이 얼마나 중요한 것인지도 알았다. 비지니스적인 시야가 넓은 팀원의 주제 제안과 꼼꼼한 기획 덕에 완성도 있고 의미 있는 프로젝트를 할 수 있었다. 또한 디자인적인 감각을 키우는 것도 내가 해야할 공부 중 하나라는 것을 깨달았다.</p><p>두번째로 아직 내가 가야할 길이 멀다는 것을 배웠다. <strong>무언가 엄청나게 멋있(어 보이는)는 것</strong>을 만들기에 시간은 한없이 모자랐다. 마음이 조급해지니 중간에 혼잣말로 징징거리기도 많이 했다. 결국 프로젝트는 원하던 것의 80%정도밖에 구현하지 못했다. 아쉽지만 분명히 미래의 나에게 좋은 밑거름이 될거라 믿는다.</p><p>마지막으로, 나는 발표를 할 때 긴장을 참 많이 한다. 막상 앞에 나가서 무슨 정신인지 여유로운 척 농담을 하고 발표를 했지만 끝나고 돌아와 앉는 순간까지 손과 다리가 떨리는 게 느껴졌다. 오늘도 발표를 하고 들어왔는데 어떻게 한 건지 정신이 하나 없었다. 그런데 같은 스쿨 분들이 안 떤 것처럼 느껴졌다고, 잘 했다고 말해줘서 많이 안심했다. 내가 막연하게 무서워하는 것들. 막연하게 내가 못 할 거라고 단정지었던 것들은 사실 내가 충분히 해낼 수 있는 거였다. 오늘의 경험을 잊지 않고 앞으로 나아가기 위해 기록한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FDS12-Pair-Hackaton&quot;&gt;&lt;a href=&quot;#FDS12-Pair-Hackaton&quot; class=&quot;headerlink&quot; title=&quot;FDS12 Pair Hackaton&quot;&gt;&lt;/a&gt;FDS12 Pair Hackaton&lt;/h2&gt;&lt;p&gt;오늘
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
      <category term="FDS12" scheme="https://sub2n.github.io/tags/FDS12/"/>
    
      <category term="Hackaton" scheme="https://sub2n.github.io/tags/Hackaton/"/>
    
  </entry>
  
  <entry>
    <title>30. Event</title>
    <link href="https://sub2n.github.io/2019/05/22/30-Event/"/>
    <id>https://sub2n.github.io/2019/05/22/30-Event/</id>
    <published>2019-05-22T12:01:02.000Z</published>
    <updated>2019-05-23T07:42:46.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Event"><a href="#1-Event" class="headerlink" title="1. Event"></a>1. Event</h3><p>브라우저의 이벤트는 사용자의 동작에 따라 어느 시점에 발생할 지 미리 알 수 없고 순서 또한 예측할 수 없다. 브라우저에서는 이벤트를 감지할 수 있고 이벤트 발생 시 통지를 해서 사용자와 웹 페이지의 Interaction이 가능케 한다.</p><p>이벤트 발생시 실행될 함수를 등록할 수 있다. 이벤트와 함수를 연결하면 함수는 이벤트 발생 전에는 실행되지 않닥 이벤트가 발생하면 실행된다. 이런 함수를 Event Handler 또는 Event Listener라고 한다.</p><blockquote><h4 id="Synchronous-amp-Asynchronous-Processing-Model"><a href="#Synchronous-amp-Asynchronous-Processing-Model" class="headerlink" title="Synchronous &amp; Asynchronous Processing Model"></a>Synchronous &amp; Asynchronous Processing Model</h4><ul><li>Synchronous<ul><li>프로세스가 직렬적, 즉 순차적으로 task를 처리하는 처리 모델</li><li>따라서 중간에 시간이 오래 걸리는 작업이 있으면 다음 작업은 대기한다.</li><li>서버에서 데이터를 요청받아야할 I/O 작업이 실행될 경우에 이후의 작업들은 Block되어 대기한다. 이를 I/O Blocking이라고 한다.</li></ul></li><li>Asynchronous<ul><li>Non-Blocking Process Model이라고도 하는 Asyncoronous 처리 모델</li><li>어떤 task가 종료되지 않은 상태라고 해도 대기하지 않고(Non-Blocking) 즉시 다음 task로 넘어간다.</li><li>대부분의 Event를 Asncronous하게 처리한다.</li></ul></li></ul></blockquote><h3 id="2-Event-Loop-and-Concurrency"><a href="#2-Event-Loop-and-Concurrency" class="headerlink" title="2. Event Loop and Concurrency"></a>2. Event Loop and Concurrency</h3><p>브라우저는 Single-thread에서 Event-driven 방식으로 동작한다.</p><h4 id="Single-thread"><a href="#Single-thread" class="headerlink" title="Single-thread"></a>Single-thread</h4><p>Single thread는 하나의 thread만을 사용하기 때문에 어느 한 순간에 하나의  task만을 처리할 수 있다는 것을 의미한다. 그러나 브라우저를 사용하는 사용자는 동시에 여러 웹 애플리케이션을 실행하고 있는 것처럼 느낄 것이다. <strong>Event Loop</strong>가 자바스크립트의 동시성(Concurrency)을 지원하기 때문이다.</p><h4 id="Call-Stack"><a href="#Call-Stack" class="headerlink" title="Call Stack"></a>Call Stack</h4><p>스택은 기본적으로 FIFO(First In First Out)으로, 요청된 task를 순차적으로 처리한다. 자바스크립트는 하나의 Call Stack을 사용한다. 이는 어떤 task가 종료하기 전에 다른 task는 수행될 수 없음을 의미한다.</p><h4 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h4><p>Dynamic하게 생성된 Object Instance가 할당되는 영역</p><h4 id="Event-Queue-Task-Queue"><a href="#Event-Queue-Task-Queue" class="headerlink" title="Event Queue(Task Queue)"></a>Event Queue(Task Queue)</h4><p>Asynchronous process function의 callback 함수, asynchronous event handler, Timer 함수의 callback 함수가 보관되는 영역.</p><p>Event Loop에 의해 Call Stack이 비었을 때 순차적으로 Call Stack으로 이동해서 실행된다. </p><p>이벤트 발생시 이벤트 핸들러는 Event Queue에 들어갔다가 Call Stack이 비면 Event Loop에 의해서 Call Stack에 진입해 실행된다.</p><h4 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h4><p>Event Loop는 Call Stack의 task와 Event Queue의 task를 주기적으로 확인한다. Call Stack이 비어있는 시점에 Event Queue 내의 Task를 Call Stcak으로 이동시켜 실행하게 한다. </p><p>Event Loop가 빠르게 돌며 task를 순간순간 전환하기 때문에 사용자는 여러개의 task를 동시에 실행하고 있다고 느끼는 것이다. 이렇게 한 번에 하나의 task을 처리하면서 마치 동시에 처리하는 것처럼 동작시키는 방법을 Pseudo Parallel이라고 한다.</p><h3 id="3-Type-of-Events"><a href="#3-Type-of-Events" class="headerlink" title="3. Type of Events"></a>3. Type of Events</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">Event Reference</a></p><h3 id="4-Register-Event-Handler"><a href="#4-Register-Event-Handler" class="headerlink" title="4. Register Event Handler"></a>4. Register Event Handler</h3><ul><li>인라인 이벤트 핸들러</li><li>이벤트 팬들러 프로퍼티</li><li>addEventListener 메소드</li></ul><h4 id="4-1-Inline-Event-Handler"><a href="#4-1-Inline-Event-Handler" class="headerlink" title="4.1. Inline Event Handler"></a>4.1. Inline Event Handler</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"foo()"</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">const</span> $button = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.btn'</span>);</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-actionscript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Clicked!'</span>);</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML element의 이벤트 핸들러 attribute에 inline으로 핸들러를 등록</p><h4 id="4-2-Event-Handler-Property"><a href="#4-2-Event-Handler-Property" class="headerlink" title="4.2. Event Handler Property"></a>4.2. Event Handler Property</h4><p><img src="https://user-images.githubusercontent.com/48080762/58231568-4c381b80-7d72-11e9-8e07-7d111af4fe39.png" alt="EventHandler Property"></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">const</span> $button = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.btn'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  $button.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Clicked!'</span>);</span></span><br><span class="line"><span class="hljs-undefined">  &#125;;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML과 JavaScript 코드가 섞이지 않지만 한 개의 Event Handler 프로퍼티에 하나의 Event Handler만을 바인딩할 수 있다.</p><h4 id="4-3-addEventListener-Method"><a href="#4-3-addEventListener-Method" class="headerlink" title="4.3. addEventListener Method"></a>4.3. addEventListener Method</h4><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">const</span> $button = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.btn'</span>);</span></span><br><span class="line"><span class="hljs-actionscript">  $button.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Clicked!'</span>);</span></span><br><span class="line"><span class="hljs-undefined">  &#125;);</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EventTarget.addEventListener(eventType, functionName[, useCapture])</p><ul><li>EventTarget : 대상 element</li><li><code>eventTarget</code>: 대상 element에 바인딩될 이벤트 (String)</li><li><code>fuinctionName</code>: 이벤트 발생 시 호출될 함수 명, 또는 함수 정의</li><li><code>useCapture</code>(option): capture 사용 여부<ul><li>Dafault: false (Bubbling)</li><li>true: capturing</li></ul></li></ul><p>addEventListener의 장점</p><ol><li>하나의 이벤트에 여러 개의 이벤트 핸들러를 추가할 수 있다.</li><li>캡처링을 사용할 수 있다.</li><li>HTML element 뿐만 아니라 DOM 요소(HTML, XML, SVG)에도 동작한다.</li></ol><p>IE9 이상에서 동작하므로 IE8 이하에서는 attachEvent 메소드를 사용한다.</p><h3 id="5-this-in-Event-Handler"><a href="#5-this-in-Event-Handler" class="headerlink" title="5. this in Event Handler"></a>5. this in Event Handler</h3><ol><li><p>인라인 이벤트 핸들러 방식</p><p>이벤트 핸들러가 일반 함수로 호출되므로 내부의 this는 전역 객체 window이다.</p></li><li><p>이벤트 핸들러 프로퍼티</p><p>이벤트 핸들러가 메소드이므로 내부의 this는 이벤트에 바인딩된 element를 가리킨다. event 객체의 currentTarget 프로퍼티 값과 같다.</p></li><li><p>addEventListener 메소드</p><p>이벤트 핸들러 내의 this는 addEventListener 메소드를 호출한 element, 즉 이벤트 리스너에 바인딩된 element를 가리킨다. event 객체의 currentTarget 프로퍼티 값과 같다.</p></li></ol><h3 id="6-Event-Flow"><a href="#6-Event-Flow" class="headerlink" title="6. Event Flow"></a>6. Event Flow</h3><h4 id="Event-Propagation"><a href="#Event-Propagation" class="headerlink" title="Event Propagation"></a>Event Propagation</h4><p>HTML element에 이벤트가 발생할 경우 속한 계층을 따라서 이벤트가 전파(Event Propagation)된다.</p><ul><li>Event Capturing : child element에서 발생한 이벤트가 parent element부터 시작해서 이벤트를 발생시킨 child element까지 도달하는 것</li><li>Event Bubbling : child element에서 발생한 이벤트가 parent element까지 전이되는 것</li></ul><p>버블링과 캡처링은 둘 중 하나만 발생하는 것이 아니라 <strong>캡처링으로 시작해 버블링으로 끝난다.</strong></p><p>addEventListener 메소드의 세번째 argument를 true로 주면 캡처링으로 이동하는 이벤트를 캐치하고, flase 또는 주지 않으면 default로 버블링으로 이동하는 이벤트를 캐치한다.</p><h3 id="7-Event-Object"><a href="#7-Event-Object" class="headerlink" title="7. Event Object"></a>7. Event Object</h3><p>이벤트 발생시 event 객체가 동적으로 생성되어 이벤트를 처리할 핸들러에 argument로 전달된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eventHandler</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(e.clientX, e.clientY);</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(<span class="hljs-string">'click'</span>, eventHandler);</span><br></pre></td></tr></table></figure><h4 id="Event-target"><a href="#Event-target" class="headerlink" title="Event.target"></a>Event.target</h4><p>e.target은 <strong>실제로 이벤트를 발생시킨 element</strong>를 가리킨다. Event.target은 this와 반드시 일치하지 않는다.</p><h4 id="Event-currentTarget"><a href="#Event-currentTarget" class="headerlink" title="Event.currentTarget"></a>Event.currentTarget</h4><p><strong>이벤트에 바인딩된 DOM element</strong>를 가리킨다. addEventListener로 지정한 이벤트 핸들러 내부의 this와 일치한다.</p><h3 id="8-Event-Elegation"><a href="#8-Event-Elegation" class="headerlink" title="8. Event Elegation"></a>8. Event Elegation</h3><p>여러 child element의 이벤트를 캐치하고 싶을 때 이벤트 위임을 이용해서 parent element에 이벤트 핸들러를 바인딩한다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Event&quot;&gt;&lt;a href=&quot;#1-Event&quot; class=&quot;headerlink&quot; title=&quot;1. Event&quot;&gt;&lt;/a&gt;1. Event&lt;/h3&gt;&lt;p&gt;브라우저의 이벤트는 사용자의 동작에 따라 어느 시점에 발생할 지 미리 알 수 없고 순서
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Event" scheme="https://sub2n.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>190522-TIL</title>
    <link href="https://sub2n.github.io/2019/05/22/190522-TIL/"/>
    <id>https://sub2n.github.io/2019/05/22/190522-TIL/</id>
    <published>2019-05-22T10:52:13.000Z</published>
    <updated>2019-05-22T12:39:56.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h3><ul><li>JavaScript의 Class, super 키워드에 대해서 공부했다.</li><li>해커톤 자료구조를 설계하고 사용할 카카오맵 API를 테스트했다.</li><li>JavaScript Event에 대해서 읽어보았다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JavaScript의 
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>29. DOM</title>
    <link href="https://sub2n.github.io/2019/05/22/29.%20DOM/"/>
    <id>https://sub2n.github.io/2019/05/22/29. DOM/</id>
    <published>2019-05-22T07:58:06.000Z</published>
    <updated>2019-05-23T06:17:59.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-DOM-Document-Object-Model"><a href="#1-DOM-Document-Object-Model" class="headerlink" title="1. DOM (Document Object Model)"></a>1. DOM (Document Object Model)</h3><ul><li><p>DOM : DOM Tree + DOM API</p><ul><li><p>브라우저의 렌더링 엔진이 웹 문서를 파싱해서 메모리에 저장한 결과물</p></li><li><p>즉, DOM이란 모든  element와 element의 attribute, text를 각각의 객체로 만들고 이 객체들을 부모-자식 관계를 나타낼 수 있는 트리 구조로 구성한 것</p></li><li>DOM은 자바스크립트를 통해 동적으로 변경할 수 있고 변경된 DOM은 브라우저 렌더링에 반영된다.</li><li>DOM API(Application Programming Interface) : 웹 문서의 동적 변경을 위해서 DOM에 접근할 수 있도록 제공하는 자바스크립트 객체의 프로퍼티와 메소드의 집합. DOM API를 통해서 DOM에 접근하고 변경해서 웹 페이지를 동적으로 변경할 수 있다.</li></ul><blockquote><h4 id="DOM-tree-HTML-문서에-대한-모델-구성"><a href="#DOM-tree-HTML-문서에-대한-모델-구성" class="headerlink" title="DOM tree | HTML 문서에 대한 모델 구성"></a>DOM tree | HTML 문서에 대한 모델 구성</h4><p>브라우저가 HTML 문서를 로드한 후 해당 문서에 대한 모델을 트리 구조로 메모리에 생성한 것</p><h4 id="DOM-API-ㅣ-HTML-문서-내의-각-요소에-접근-수정"><a href="#DOM-API-ㅣ-HTML-문서-내의-각-요소에-접근-수정" class="headerlink" title="DOM API ㅣ HTML 문서 내의 각 요소에 접근, 수정"></a>DOM API ㅣ HTML 문서 내의 각 요소에 접근, 수정</h4><p>모델 내의 각 객체에 접근하고 수정할 수 있도록 DOM이 제공하는 프로퍼티와 메소드. DOM이 수정되면 브라우저를 통해 웹페이지의 내용이 변경된다.</p></blockquote></li><li><p>jQuery</p><ul><li>DOM 객체를 보다 직관적으로 조작</li><li>SPA에는 안 맞음</li></ul></li><li><p>SPA(Single Page Application) </p><ul><li>SPA Framework : Angular, React</li><li>html 문서를 하나를 계속 씀</li><li>JavaScript로 html 다시 그림</li></ul></li></ul><h3 id="2-DOM-tree"><a href="#2-DOM-tree" class="headerlink" title="2. DOM tree"></a>2. DOM tree</h3><p>HTML 문서 내부에서 element의 중첩 관계는 트리에서 부모-자식 관계로 표현된다.</p><p>HTML Element 별로 다른 속성을 표현하기 위해서 브라우저에서는 DOM Parsing시 Element의 정보를 DOM 객체의 상속관계로 표현한다.</p><p><img src="https://user-images.githubusercontent.com/48080762/58159094-c30fde80-7cb6-11e9-998d-85c3a3c791b9.png" alt="Proprties"></p><p>DOM Element(node)는 HTML Element의 상태를 보관한다.</p><p>DOM tree는 4 종류의 노드로 구성된다.</p><h4 id="Document-Node"><a href="#Document-Node" class="headerlink" title="Document Node"></a>Document Node</h4><p>트리의 최상위 루트(root). 각 Element, Attribute, Text node에 접근하기 위해서는 트리의 루트인 Document Node를 시작으로 검색해야 한다.</p><h4 id="Element-Node"><a href="#Element-Node" class="headerlink" title="Element Node"></a>Element Node</h4><p>Element node는 HTML element를 표현한다. HTML element는 nesting(중첩)에 의해서 부모-자식 관계를 가지며 이를 통해서 정보를 구조화한다. 따라서 Element Node는 문서의 구조를 표현한다. Attribute, Text node에 접근하기 위해서는 우선 Element node에 접근해야 한다. </p><p>각 Element의 특성을 표현하기 위해서 객체의 상속을 이용한다. 이 때 모든 Element node는 HTMLElement 객체를 상속한다.</p><h4 id="Attribute-Node"><a href="#Attribute-Node" class="headerlink" title="Attribute Node"></a>Attribute Node</h4><p>Attribute Node는 HTML element의 attribute를 표현. Attribute Node는 자신을 가지는 <strong>Element의 자식이 아니라 형제(sibling)</strong>로 표현된다.</p><h4 id="Text-Node"><a href="#Text-Node" class="headerlink" title="Text Node"></a>Text Node</h4><p>Text Node는 HTML element의 텍스트를 표현한다. <strong>Text Node는 Element node의 자식</strong>이며 자신의 자식을 가질 수 없다. 즉 DOM tree의 단말 노드이다.</p><h3 id="3-DOM-Query"><a href="#3-DOM-Query" class="headerlink" title="3. DOM Query"></a>3. DOM Query</h3><p>DOM을 통해 웹페이지를 조작하기 위해서는 우선 DOM 객체(element)에 접근할 수 있어야 한다.</p><p>DOM API를 이용해서 DOM Element에 접근할 수 있다.  document 객체에 DOM API가 정의되어있다.</p><blockquote><h4 id="HTML-element에-id-사용을-자제해야하는-이유"><a href="#HTML-element에-id-사용을-자제해야하는-이유" class="headerlink" title="HTML element에 id 사용을 자제해야하는 이유"></a>HTML element에 id 사용을 자제해야하는 이유</h4><ol><li>중복되면 안되지만 중복되어도 에러가 나지 않는다.</li><li>HTML element의 id는 전역변수이다.</li></ol><p>되도록 class를 사용하는 것이 좋다.</p></blockquote><h4 id="document-getElementById-id"><a href="#document-getElementById-id" class="headerlink" title="document.getElementById(id)"></a>document.getElementById(id)</h4><ul><li><p><code>id</code> attribute 값으로  Element Node 하나를 선택한다. id가 중복될 경우 첫번째 element만 리턴한다.</p></li><li><p>Return: HTMLElement를 상속받은 객체</p></li><li><p>모든 브라우저에서 동작한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .red  &#123; <span class="hljs-attr">color</span>: red; &#125;</span><br><span class="line">      .blue &#123; <span class="hljs-attr">color</span>: blue; &#125;</span><br><span class="line">      .yellow &#123; <span class="hljs-attr">color</span>: yellow; &#125;</span><br><span class="line">    &lt;<span class="hljs-regexp">/style&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Cities&lt;<span class="hljs-regexp">/h1&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li id="one" class="red"&gt;Seoul&lt;/</span>li&gt;</span><br><span class="line">        &lt;li id=<span class="hljs-string">"two"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"blue"</span>&gt;London&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;li id="three" class="red"&gt;Newyork&lt;/</span>li&gt;</span><br><span class="line">        &lt;li id=<span class="hljs-string">"four"</span>&gt;Tokyo&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;/u</span>l&gt;</span><br><span class="line">    &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;script type="text/</span>javascript<span class="hljs-string">"&gt;</span></span><br><span class="line"><span class="hljs-string">      const elem = document.getElementById('one');</span></span><br><span class="line"><span class="hljs-string">      elem.className = 'yellow';</span></span><br><span class="line"><span class="hljs-string">      </span></span><br><span class="line"><span class="hljs-string">console.log(elem); // &lt;li id="</span>one<span class="hljs-string">" class="</span>blue<span class="hljs-string">"&gt;Seoul&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">console.log(elem.__proto__);           // HTMLLIElement</span></span><br><span class="line"><span class="hljs-string">console.log(elem.__proto__.__proto__); // HTMLElement</span></span><br><span class="line"><span class="hljs-string">console.log(elem.__proto__.__proto__.__proto__);           // Element</span></span><br><span class="line"><span class="hljs-string">console.log(elem.__proto__.__proto__.__proto__.__proto__); // Node</span></span><br><span class="line"><span class="hljs-string">    &lt;/script&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/body&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>  <img src="https://user-images.githubusercontent.com/48080762/58170933-c19ee000-7ccf-11e9-8b2b-f1f05fbd35c3.png" alt="Proto Chain"></p><h4 id="document-querySelector-cssSelector"><a href="#document-querySelector-cssSelector" class="headerlink" title="document.querySelector(cssSelector)"></a>document.querySelector(cssSelector)</h4><ul><li><strong>CSS Selector를 사용</strong>해서 Element Node를 한 개 선택한다. 여러 개가 선택되면 첫번째 element만 리턴한다.</li><li>Return: HTMLElement를 상속받은 객체</li><li>IE8 이상 브라우저에서 동작 <a href="https://caniuse.com/#search=document.querySelector" target="_blank" rel="noopener">Can I use document.querySelector ?</a></li><li>getElement계열보다 querySelector를 쓰자.</li><li>조건에 부합하는 대상이 없을 경우 null 리턴</li></ul><h4 id="document-getElementByClassName-class"><a href="#document-getElementByClassName-class" class="headerlink" title="document.getElementByClassName(class)"></a>document.getElementByClassName(class)</h4><ul><li><p><code>class</code> attribute 값으로  Element Node를 모두 선택. id가 중복될 경우 첫번째 element만 리턴</p></li><li><p>Return: (live)HTMLCollection</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Cities&lt;<span class="hljs-regexp">/h1&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;li id="one" class="red"&gt;Seoul&lt;/</span>li&gt;</span><br><span class="line">      &lt;li id=<span class="hljs-string">"two"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"red"</span>&gt;London&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">      &lt;li id="three" class="red"&gt;Newyork&lt;/</span>li&gt;</span><br><span class="line">      &lt;li id=<span class="hljs-string">"four"</span>&gt;Tokyo&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">  &lt;script type="text/</span>javascript<span class="hljs-string">"&gt;</span></span><br><span class="line"><span class="hljs-string">   const elems = document.getElementsByClassName('red');</span></span><br><span class="line"><span class="hljs-string">   console.log(elems);</span></span><br><span class="line"><span class="hljs-string">   for (let i = 0; i &lt; elems.length; i++) &#123;</span></span><br><span class="line"><span class="hljs-string">     elems[i].className = 'yellow';</span></span><br><span class="line"><span class="hljs-string">   &#125;</span></span><br><span class="line"><span class="hljs-string">  &lt;/script&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>HTMLCollection이란, 배열이 아닌 유사배열 객체(array-like object)이다. HTMLCollection은 실시간으로 Node의 상태가 변경될 때마다 Collection에 반영하기 때문에 liveHTMLCollection이라고도 한다.</p><p><img src="https://user-images.githubusercontent.com/48080762/58171787-ba78d180-7cd1-11e9-8a92-e9a745831533.png" alt="Result Page"></p><p>위 코드의 실행 결과로 두번째와 네번째 Element의 색이 바뀌지 않은 것은  elems가 참조하는 HTMLCollection이 실시간으로 변경되어 누락되었기 때문이다.</p><ol><li>for 문을 역방향으로 돌리기</li><li>while 문 사용</li><li>HTMLCollection을 배열로 변경</li><li><code>querySelectorAll</code> 메소드를 사용해서 non-live NodeList를 리턴하게 함</li></ol><p>등으로 이런 현상을 방지할 수 있다.</p></li><li><p>IE9 이상의 브라우저에서 동작</p></li></ul><h4 id="document-getElementsByTagName-tagName"><a href="#document-getElementsByTagName-tagName" class="headerlink" title="document.getElementsByTagName(tagName)"></a>document.getElementsByTagName(tagName)</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="hljs-keyword">const</span> elems = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'li'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(elems); <span class="hljs-comment">// HTMLCollection(4) [li#one.red, li#two.red, li#three.red, li#four, one: li#one.red, two: li#two.red, three: li#three.red, four: li#four]</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; elems.length; i++) &#123;</span><br><span class="line">        elems[i].className = <span class="hljs-string">'blue'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="hljs-regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><code>getElementsByTagName</code> 메소드도 HTMLCollection을 리턴한다고 명세에 써있으나 Webkit에서는 NodeList를 리턴한다. 크롬에서는 NodeList를 리턴한다.</p><p><img src="https://user-images.githubusercontent.com/48080762/58172154-b5685200-7cd2-11e9-9bc1-802293274981.png" alt="Result Page"></p><h3 id="document-querySelectorAll-selector"><a href="#document-querySelectorAll-selector" class="headerlink" title="document.querySelectorAll(selector)"></a>document.querySelectorAll(selector)</h3><ul><li><strong>CSS Selector를 사용</strong>하여 Element Node를 모두 선택.</li><li>Return: <a href="https://developer.mozilla.org/ko/docs/Web/API/NodeList" target="_blank" rel="noopener">NodeList</a> (non-live)</li><li>IE8 이상 브라우저에서 동작</li><li>여러개 선택할 때는 getElements 대신 querySelectorAll을 쓰자.</li><li>조건에 부합하는 대상이 없을 경우 빈 NodeList [] 리턴</li></ul><h4 id="element-className"><a href="#element-className" class="headerlink" title="element.className"></a>element.className</h4><p><code>class=&quot;red blue&quot;</code>에서 ‘red blue’를 의미. class를 한 번에 전부 수정하는 데에 좋다. 하나를 추가하고 싶을 때는 아래와 같이 쓴다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> elem = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#one'</span>);</span><br><span class="line">elem.className += <span class="hljs-string">'yellow'</span>;</span><br></pre></td></tr></table></figure><p>추가나 삭제에는 classList의 method를 사용하는 것이 편리하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> elem = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#one'</span>);</span><br><span class="line">elem.classList.add(<span class="hljs-string">'blue'</span>);</span><br><span class="line">elem.classList.remove(<span class="hljs-string">'blue'</span>);</span><br></pre></td></tr></table></figure><h3 id="DOM-Traversal"><a href="#DOM-Traversal" class="headerlink" title="DOM Traversal"></a>DOM Traversal</h3><h3 id="parentNode"><a href="#parentNode" class="headerlink" title="parentNode"></a>parentNode</h3><p>자신의 parent 노드를 탐색. HTMLElement를 상속받은 객체를 리턴하며 모든 브라우저에서 동작한다.</p><h4 id="firstChild-lastChild"><a href="#firstChild-lastChild" class="headerlink" title="firstChild, lastChild"></a>firstChild, lastChild</h4><p>자신의 첫번째 child, 마지막 child 노드를 탐색. HTMLELement를 상속받은 객체를 리턴하며 IE9 이상의 브라우저에서 동작한다.</p><p>IE를 제외한 대부분의 브라우저에서는 element 사이의 공백과 줄바꿈을 Text Node로 취급하기 때문에 주의해야 한다.</p><h4 id="hasChildNodes"><a href="#hasChildNodes" class="headerlink" title="hasChildNodes()"></a>hasChildNodes()</h4><p>child 노트가 있는지 확인하고 Boolean을 리턴. 모든 브라우저에서 동작</p><h4 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h4><p>child 노드의 Collection을 리턴. NodeList(non-live)가 리턴됨. 모든 브라우저에서 동작</p><h4 id="children"><a href="#children" class="headerlink" title="children"></a>children</h4><p>child 노드의 Collection을 리턴. <strong>HTMLCollection(live)가 리턴</strong>됨. IE9 이상 브라우저에서 동작.  childNodes 대신 children을 쓰자</p><h4 id="previousSibling-nextSibling"><a href="#previousSibling-nextSibling" class="headerlink" title="previousSibling, nextSibling"></a>previousSibling, nextSibling</h4><p>Text Node를 포함한 모든 형제 노드를 탐색. HTMLElement를 상속받은 객체가 리턴됨. 모든 브라우저에서 동작</p><h4 id="previosElementSibling-nextElementSibling"><a href="#previosElementSibling-nextElementSibling" class="headerlink" title="previosElementSibling, nextElementSibling,"></a>previosElementSibling, nextElementSibling,</h4><p>Element type의 형제 노드만을 탐색. HTMLElement를 상속받은 객체가 리턴됨. IE9 이상 브라우저에서 동작</p><h2 id="4-DOM-Manipulation"><a href="#4-DOM-Manipulation" class="headerlink" title="4. DOM Manipulation"></a>4. DOM Manipulation</h2><h3 id="1-Text-Node-Access-and-Manipulation"><a href="#1-Text-Node-Access-and-Manipulation" class="headerlink" title="1. Text Node Access and Manipulation"></a>1. Text Node Access and Manipulation</h3><ol><li>Text Node의 parent인  Element Node를 선택한다.</li><li>firstChild 프로퍼티로 Text Node를 탐색한다.</li><li>Text Node의 프로퍼티 <code>nodeValue</code>를 이용해서 텍스트에 접근하고 수정한다.</li></ol><h3 id="2-Attribute-Node-Access-and-Manipulation"><a href="#2-Attribute-Node-Access-and-Manipulation" class="headerlink" title="2. Attribute Node Access and Manipulation"></a>2. Attribute Node Access and Manipulation</h3><h4 id="hasAttribute-attribute"><a href="#hasAttribute-attribute" class="headerlink" title="hasAttribute(attribute)"></a>hasAttribute(attribute)</h4><h4 id="getAttribute-attribute"><a href="#getAttribute-attribute" class="headerlink" title="getAttribute(attribute)"></a>getAttribute(attribute)</h4><h4 id="setAttribute-attribute-value"><a href="#setAttribute-attribute-value" class="headerlink" title="setAttribute(attribute, value)"></a>setAttribute(attribute, value)</h4><h4 id="removeAttribute-attribute"><a href="#removeAttribute-attribute" class="headerlink" title="removeAttribute(attribute)"></a>removeAttribute(attribute)</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-DOM-Document-Object-Model&quot;&gt;&lt;a href=&quot;#1-DOM-Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;1. DOM (Document Object Model)&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="DOM" scheme="https://sub2n.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>28. Module</title>
    <link href="https://sub2n.github.io/2019/05/22/28-Module/"/>
    <id>https://sub2n.github.io/2019/05/22/28-Module/</id>
    <published>2019-05-22T07:16:28.000Z</published>
    <updated>2019-05-22T07:44:31.664Z</updated>
    
    <content type="html"><![CDATA[<p>원래 모듈화를 하거나 파일을 분리하면 각 모듈, 파일 별로 개별적인 스코프를 가져야하는데 자바스크립트는 파일을 분리해서 함께 사용할 때 하나의 전역 스코프만을 가진다. 즉, 여러 개의 js 파일에서 식별자 명이 겹칠 경우 의도한 바와 다르게 동작할 수 있다.</p><p>이전에는 각 파일을 IIFE(Imediately Invoked Function Expression)로 감쌌으나 근본적인 해결책은 아니다. 특정 클래스나 함수를 외부에 노출시키고 싶지 않을 때는 클로저를 사용해서 선택적으로 노출했다.</p><p>ES6에서 클라이언트 사이드 자바스크립트에서도 동작하는 모듈 기능이 추가되었다. script tag에 <code>type=&quot;module&quot;</code> 어트리뷰트 추가시 해당 자바스크립트 파일은 모듈로 동작하며 파일 스코프를 가진다. 모듈화된 자바스크립트 파일을 사용할 때는 확장자 명을 <code>.mjs</code>라고 한다.</p><p>그러나 아직까지 문법이 엄격하고 구형 브라우저(IE 등)에서는 ES6 모듈을 지원하지 않는 문제가 있다. 그러니까 아직은 바벨 / 웹팩 등을 사용해서 개발해야한다.</p><blockquote><p>바벨: ES6 이상의 문법을 사용해서 코딩하더라도 ES5의 문법으로 다운그레이드해서 구형 브라우저에서 돌아갈 수 있게 함</p><p>웹팩: 여러 파일을 import하면 하나의 파일로 압축해줌</p></blockquote><h3 id="1-File-Scope"><a href="#1-File-Scope" class="headerlink" title="1. File Scope"></a>1. File Scope</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib.js</span></span><br><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.js</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>모듈을 사용하지 않을 경우 정상적으로 코드가 돌아가지만 <code>type=&quot;module&quot;</code> 사용시 각 파일마다 스코프가 분리되어 app.js에서 lib.js의 x에 접근할 수 없다.</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./lib.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./app.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-export-Keyword"><a href="#2-export-Keyword" class="headerlink" title="2. export Keyword"></a>2. export Keyword</h3><p>ES6의 모듈을 쓰면 각각 파일이 파일 스코프를 가지기 때문에 다른 파일에 공개할 변수나 함수, 클래스 앞에 <code>export</code> 키워드를 붙여서 선택적으로 노출할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib.js</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="3-import-Keyword"><a href="#3-import-Keyword" class="headerlink" title="3. import Keyword"></a>3. import Keyword</h3><p>다른 파일에서 <code>export</code> 키워드로 노출한 변수, 함수, 클래스 등을 <code>import</code> 키워드를 사용함으로써 사용할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; x &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./lib.js'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>모듈에서 하나만 export할 때는 default 키워드를 사용할 수 있음</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>;</span><br></pre></td></tr></table></figure><p>default 키워드로 export한 모듈은 import할 때 {} 없이 받아올 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> y <span class="hljs-keyword">from</span> <span class="hljs-string">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;원래 모듈화를 하거나 파일을 분리하면 각 모듈, 파일 별로 개별적인 스코프를 가져야하는데 자바스크립트는 파일을 분리해서 함께 사용할 때 하나의 전역 스코프만을 가진다. 즉, 여러 개의 js 파일에서 식별자 명이 겹칠 경우 의도한 바와 다르게 동작
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Modlue" scheme="https://sub2n.github.io/tags/Modlue/"/>
    
  </entry>
  
  <entry>
    <title>27. Class</title>
    <link href="https://sub2n.github.io/2019/05/21/27-Class/"/>
    <id>https://sub2n.github.io/2019/05/21/27-Class/</id>
    <published>2019-05-21T07:56:56.000Z</published>
    <updated>2019-05-23T04:20:14.332Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트는 Prototype-based 객체지향 언어이다. Prototype-based 프로그래밍은 클래스 없이 프로토타입과 클로저 등으로 상속, 캡슐화 등의 개념을 구현할 수 있다.</p><p>대부분의 객체 지향 언어가 클래스 기반인 점을 고려하여 ES6에서 클래스를 도입했다. 그러나 그 <strong>클래스도 사실은 함수</strong>이고 기존의 프로토타입 기반 객체지향 패턴으로 동작한다.</p><h3 id="1-Calss-Definition"><a href="#1-Calss-Definition" class="headerlink" title="1. Calss Definition"></a>1. Calss Definition</h3><p>ES6 클래스는 다른 언어들과 같이 class 키워드를 사용해 정의한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// constructor</span></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// default method definition: class's prototype method</span></span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hi! <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>._name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> mimi = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'Mimi'</span>);</span><br><span class="line">mimi.sayHello(); <span class="hljs-comment">// Hi! Mimi</span></span><br></pre></td></tr></table></figure><p>표현식으로도 클래스를 정의할 수 있으나 일반적이지 않다. 클래스 표현식에서 사용한 클래스 이름은 외부 코드에서 접근할 수 없기 때문이다. 클래스가 함수처럼 동작하는 것은 사실 클래스도 함수이기 때문이다.</p><h3 id="2-Creation-of-Instance"><a href="#2-Creation-of-Instance" class="headerlink" title="2. Creation of Instance"></a>2. Creation of Instance</h3><p>Class의 instance를 생성하기 위해서는 new 연산자와 함께 constuctor를 호출한다. 클래스 선언식으로 정의한 클래스의 이름은 constructor와 동일하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Foo === Foo.prototype.constructor); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Foo === <span class="hljs-built_in">Object</span>.getPrototypeOf(foo).constructor); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> foo2 = Foo(); <span class="hljs-comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure><p>new 연산자를 사용하지 않고 constructor를 호출하면 TypeError가 발생한다. 즉, <strong>클래스의 constructor는 new 연산자 없이 호출할 수 없다.</strong> new 연산자 없이 호출시 오류 없이 생성자 대신 일반 함수로 호출되던 생성자 함수와 다른 점이다.</p><h3 id="3-Constructor"><a href="#3-Constructor" class="headerlink" title="3. Constructor"></a>3. Constructor</h3><p>constructor는 인스턴스를 생성하고 클래스 필드를 초기화하는 특수한 메소드이다.</p><blockquote><h4 id="Class-Field"><a href="#Class-Field" class="headerlink" title="Class Field"></a>Class Field</h4><p>= Data Member, Member Variable. 클래스 내부의 캡슐화된 변수. Instance의 프로퍼티 또는 Static  프로퍼티를  Class field 라고 한다.</p></blockquote><ul><li>class 내에는 최대 한 개의 constructor만 존재할 수 있다.</li><li>new 연산자와 constructor로 인스턴스 생성시 constructor의 파라미터로 전달한 값으로 클래스의 필드를 초기화한다.</li><li>class 내부에 constructor 정의를 생략하면 default로 <code>constructor() {}</code> 가 동작한다. 즉, 빈 객체 { }를 생성한다.</li><li>constructor는 인스턴스의 생성과 동시에 클래스 필드의 생성과 초기화를 실행한다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(num) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> Foo();</span><br><span class="line"><span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// Foo &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> Bar(<span class="hljs-number">200</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(bar); <span class="hljs-comment">// Bar &#123;num: 200&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-Class-Field"><a href="#4-Class-Field" class="headerlink" title="4. Class  Field"></a>4. Class  Field</h3><p>클래스 내부에는 메소드만 선언할 수 있다. 모든 프로퍼티(인스턴스의  멤버 변수)는 <strong>반드시 constructor 내부에 선언</strong>해야 한다.</p><blockquote><h4 id="Class-Field-Declarations-Proposal"><a href="#Class-Field-Declarations-Proposal" class="headerlink" title="Class Field Declarations Proposal"></a>Class Field Declarations Proposal</h4><p>아직 표준은 아니지만 stage3 단계에 Class FIeld 선언 관련된 표준안이 있다.</p><ul><li>Field Declaration</li><li>Private Field</li><li>Static Public Fields</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;</span><br><span class="line">&gt;   x = <span class="hljs-number">1</span>; <span class="hljs-comment">// 생성자 함수 밖에서도 field 선언 가능</span></span><br><span class="line">&gt;   #p = 2; // private field</span><br><span class="line">&gt;   <span class="hljs-keyword">static</span> y = <span class="hljs-number">3</span>; <span class="hljs-comment">// Static puplic field</span></span><br><span class="line">&gt;   <span class="hljs-comment">// 현재 field declaration만 chrome에 구현됨</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// default 값 설정</span></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(name = '') &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hi! <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>._name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor 내부의 this는 클래스가 생성할 인스턴스이다. constructor는 this, 즉 생성할 인스턴스에 선언한 프로퍼티를 바인딩한다. 이런 방식으로  constructor는 클래스가 생성할 인스턴스와 인스턴스의 프로퍼티를 생성하고 초기화한다. </p><p>클래스 프로퍼티는 언제나 <code>public</code>이다. 생성된 인스턴스를 통해서 클래스 외부에서도 클래스 내부의 프로퍼티에 접근할 수 있다.</p><p>ES6의 클래스는 다른 객체지향 언어처럼 private, public, protect 등의 Access Modifier(접근 제한자)를 지원하지 않는다.</p><h3 id="5-Hoisting"><a href="#5-Hoisting" class="headerlink" title="5. Hoisting"></a>5. Hoisting</h3><p>클래스는 ES6에서 추가 도입된 <code>let</code>, <code>const</code>와 같이 Hoisting 되지 않는 것처럼 동작한다. 선언 이전에 참조하면 ReferenceError가 발생한다.</p><blockquote><h4 id="Hoisting-되지-않는-것처럼-동작한다는-것"><a href="#Hoisting-되지-않는-것처럼-동작한다는-것" class="headerlink" title="Hoisting 되지 않는 것처럼 동작한다는 것"></a>Hoisting 되지 않는 것처럼 동작한다는 것</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-comment">// x 선언 없이 참조</span></span><br><span class="line">&gt; <span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">// ReferenceError: x is not defined</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>코드 전역에서 x의 선언 없이 x를 참조하면 x is not defined, 즉 정의되지 않았다는 참조 에러가 뜬다.</p><p>그러나 let으로 선언하기 전에 x를 참조하면 다르게 동작한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-comment">// x를 참조하고 밑에서 let 키워드로 선언</span></span><br><span class="line">&gt; x; <span class="hljs-comment">// ReferenceError: Cannot access 'x' before initialization</span></span><br><span class="line">&gt; <span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>위와 같이 x가 정의되지 않았다고 하지 않고, initialization 전에 x에 접근할 수 없다는 참조 에러가 뜬다. 왜일까?</p><p><code>var</code> 키워드와 다르게 <code>let</code>, <code>const</code> 키워드는 런타임 이전에 자바스크립트 엔진이 선언문을 미리 실행할 때, 1. 선언 단계(Declaration Phase)와 2. 초기화 단계(Initialization Phase)가 함께 진행되지 않는다. <code>let</code>, <code>const</code> 키워드로 선언한 변수는 1. 선언 단계만 미리 실행되어 스코프에 변수 명이 등록되지만 2. 초기화 단계는 런타임에 선언문이 실행될 때 실행된다. 2. 초기화 단계는 변수의 값을 위한 메모리 공간을 할당하고 undefined라는 값을 암묵적으로 넣어주는 것이다. 이런 초기화 단계를 진행하지 않았으니 참조 에러가 나는 것이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-comment">// 클래스 Gee를 선언하기 전에 참조</span></span><br><span class="line">&gt; <span class="hljs-keyword">const</span> f = <span class="hljs-keyword">new</span> Gee(); <span class="hljs-comment">// ReferenceError: Cannot access 'Gee' before initialization</span></span><br><span class="line">&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gee</span> </span>&#123;&#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>마찬가지로 class도 <code>let</code>이나 <code>const</code> 키워드로 선언한 변수처럼 동작한다. 호이스팅을 하지 <strong>않는 것처럼</strong> 동작한다고 하는 이유는, 런타임 이전에 1. 선언 단계가 진행되어 정말로 선언되지 않은 변수를 참조했을 때 발생하는 is not defined와는 다른 에러가 발생하기 때문이다.</p><p>ES6의  class도 사실은 함수이지만, function 키워드로 선언한 함수 선언식은 호이스팅 되는 반면 class로 선언한 함수는 호이스팅 되지 않는다. 즉, 선언만 해놓고 초기화를 하지 않아 호이스팅되지 않는 것처럼 동작한다.</p><p><code>let</code>이나 <code>const</code> 나 class 등의 선언문 이전을 TDZ(Temporal Dead Zone)이라고 한다. 선언만 되고 초기화되지 않아 참조할 수 없는 구간을 말한다.</p></blockquote><h3 id="6-getter-setter"><a href="#6-getter-setter" class="headerlink" title="6. getter, setter"></a>6. getter, setter</h3><p>객체 지향 언어에서 클래스를 사용하는 목적은 내부 상태(내부 데이터)에 접근하는 방법을 제한하고 최소한의 인터페이스를 제공해서 데이터의 캡슐화를 구현하기 위함이다. 접근자 프로퍼티 (getter, setter)를 사용하는 이유도 이와 같다. 클래스 내의 프로퍼티를 참조할 때는 get 함수, 프로퍼티를 설정할 때는 set 함수만을 이용할 수 있도록 구현해야 한다.</p><h4 id="6-1-getter"><a href="#6-1-getter" class="headerlink" title="6.1. getter"></a>6.1. getter</h4><p>getter는 클래스 프로퍼티에 접근할 때 사용한다. getter는 메소드 이름 앞에 <code>get</code> 키워드를 사용해서 정의한다. 이 때 메소드 이름은 클래스 프로퍼티 키처럼 사용된다. 즉, getter는 호출하는 것이 아니라 <strong>프로퍼티처럼 참조하는 것이고, 참조할 때 메소드가 호출</strong>된다. getter는 데이터를 얻기위해(get) 사용하므로 반드시 무언가를 리턴해야 한다.</p><h4 id="6-2-setter"><a href="#6-2-setter" class="headerlink" title="6.2. setter"></a>6.2. setter</h4><p>setter는 클래스 프로퍼티에 값을 할당할 때 사용한다. setter는 메소드 이름 앞에 <code>set</code> 키워드를 사용해서 정의한다. get 메소드와 마찬가지로 메소드 이름은 클래스 <strong>프로퍼티 키로 사용되어 참조되는 형식으로 메소드를 호출</strong>한다. setter는 데이터를 할당하기 위해서 호출하는 것이므로 메소드를 사용해서 할당할 때 set 메소드가 호출된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// default 값 설정</span></span><br><span class="line">    <span class="hljs-keyword">constructor</span>(firstname = '', lastname = '') &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.firstname = firstname;</span><br><span class="line">        <span class="hljs-keyword">this</span>.lastname = lastname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">get</span> fullName() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.firstname&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.lastname&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">set</span> fullName(fullname) &#123;</span><br><span class="line">        [<span class="hljs-keyword">this</span>.firstname, <span class="hljs-keyword">this</span>.lastname] = fullname.split(<span class="hljs-string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> mimi = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'Mimi'</span>, <span class="hljs-string">'Kim'</span>); </span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 메소드를 직접 호출하는 것이 아니라 프로퍼티에 접근하는 방식으로 getter, setter를 내부적으로 호출한다.</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(mimi.fullName); <span class="hljs-comment">// Mimi Kim (getter)</span></span><br><span class="line"></span><br><span class="line">mimi.fullName = <span class="hljs-string">'Mimi Park'</span>;<span class="hljs-comment">// setter</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(mimi.fullName); <span class="hljs-comment">// Mimi Park (getter)</span></span><br></pre></td></tr></table></figure><h3 id="7-Static-Method"><a href="#7-Static-Method" class="headerlink" title="7. Static Method"></a>7. Static Method</h3><p>Class는 static 메소드를 정의할 때 <code>static</code> 키워드를 사용한다. 정적 메소드는 인스턴스가 아니라 클래스 이름으로 호출하는 메소드이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(prop) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.prop = prop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> staticMethod() &#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    정적 메소드는 this를 사용할 수 없다.</span></span><br><span class="line"><span class="hljs-comment">    정적 메소드 내부에서 this는 클래스의 인스턴스가 아닌 클래스 자신을 가리킨다.</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'staticMethod'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prototypeMethod() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Foo.staticMethod()); <span class="hljs-comment">// staticMethod</span></span><br></pre></td></tr></table></figure><p>정적 메소드는 클래스의 인스턴스 생성 없이 클래스 이름으로 호출하며 클래스의 인스턴스로는 호출할 수 없다.</p><h3 id="8-Class-Inheritance"><a href="#8-Class-Inheritance" class="headerlink" title="8. Class Inheritance"></a>8. Class Inheritance</h3><h4 id="8-1-extends-Keyword"><a href="#8-1-extends-Keyword" class="headerlink" title="8.1. extends Keyword"></a>8.1. <code>extends</code> Keyword</h4><p><code>extends</code> 키워드는 parent 클래스를 생속받는 child 클래스를 정의할 때 사용한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// parent class</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(radius) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getDiameter() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * <span class="hljs-keyword">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getArea() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.PI * (<span class="hljs-keyword">this</span>.radius ** <span class="hljs-number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// child class</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cylinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(radius, height) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(radius);</span><br><span class="line">    <span class="hljs-keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// parent class Circle의 getArea overriding</span></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.height * <span class="hljs-keyword">super</span>.getPerimeter()) + (<span class="hljs-number">2</span> * <span class="hljs-keyword">super</span>.getArea());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 자신의 메소드 정의</span></span><br><span class="line">  getVolume() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getArea() * <span class="hljs-keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Cylinder class는 Circle class를 상속한다.</span></span><br><span class="line">Cylinder.__proto__ === Circle <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-comment">// Cylinder의 prototype은 Circle의 prototype을 상속한다.</span></span><br><span class="line">Cylinder.prototype.__proto__ === Circle.prototype</span><br></pre></td></tr></table></figure><h4 id="8-2-super-Keyword"><a href="#8-2-super-Keyword" class="headerlink" title="8.2. super Keyword"></a>8.2. <code>super</code> Keyword</h4><p><code>super</code> 키워드는 <strong>parent 클래스를 참조</strong>하거나  <strong>parent 클래스의 constructor를 호출</strong>할 때 사용한다.</p><ol><li><p>super 클래스가 메소드로 사용될 때는 parent 클래스의 constructor를 호출한다. <strong>child 클래스의 constructor에서 super()를 호출하지 않으면 this에 대한 ReferenceError가 발생한다.</strong></p><p>child 클래스의 인스턴스를 만들 때 parent 클래스의 인스턴스를 우선 만들고 상속한다. </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// parent 클래스의 constructor를 호출한다.</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cylinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(radius, height) &#123;</span><br><span class="line">    <span class="hljs-comment">// super가 parent class의 constructor처럼 사용됨</span></span><br><span class="line">    <span class="hljs-keyword">super</span>(radius);</span><br><span class="line">    <span class="hljs-keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/58225537-6c111480-7d5d-11e9-9cbb-45fc8d66a2ff.png" alt="super"></p><p>ECMAScript의 스펙을 살펴보면 super가 argument를 전달받으며 호출될 때는 내부적으로 자신의 parent 클래스의 constructor를 호출하여 constructor가 리턴한 this 객체를 child 클래스 constructor의 this(child 클래스가 생성할 인스턴스)에 바인딩한다.</p></li><li><p>super 클래스가 객체로 사용될 때는 parent 클래스를 참조한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// super가 parent class Circle처럼 사용됨</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// parent class Circle의 getArea overriding</span></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.height * <span class="hljs-keyword">super</span>.getPerimeter()) + (<span class="hljs-number">2</span> * <span class="hljs-keyword">super</span>.getArea());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 자신의 메소드 정의</span></span><br><span class="line">  getVolume() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getArea() * <span class="hljs-keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="8-3-Inheritance-of-Static-Method-and-Prototype-Method"><a href="#8-3-Inheritance-of-Static-Method-and-Prototype-Method" class="headerlink" title="8.3. Inheritance of Static Method and Prototype Method"></a>8.3. Inheritance of Static Method and Prototype Method</h4><p>Child 클래스의 static 메소드 내부에서 super 키워드를 사용하면 parent 클래스의 static 메소드를 호출할 수 있다. child 클래스는 프로토타입 체인에서 parent 클래스의 정적 메소드를 참조할 수 있기 때문이다.</p><p>그러나 child 클래스의 일반 메소드(prototype  메소드) 내부에서는 super 키워드를 사용해서 parent 클래스의 static 메소드를 호출할 수 없다. 이는 child 클래스의 <strong>인스턴스</strong>는 프로토타입 체인에 의해 parent 클래스의 static 메소드를 참조할 수 없기 때문이다. child 클래스의 인스턴스는 프로토타입 체인 상에 parent 클래스가 아니라 parent 클래스의 prototype만 가지고 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(prop) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.prop = prop;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">static</span> staticMethod() &#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    정적 메소드는 this를 사용할 수 없다.</span></span><br><span class="line"><span class="hljs-comment">    정적 메소드 내부에서 this는 클래스의 인스턴스가 아닌 클래스 자신을 가리킨다.</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'staticMethod'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  prototypeMethod() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> staticMethod2() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.staticMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    prototypeMethod() &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.staticMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(Bar.staticMethod2()); <span class="hljs-comment">// staticMethod</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> bar = <span class="hljs-keyword">new</span> Bar();</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(bar.prototypeMethod()); <span class="hljs-comment">// TypeError: (intermediate value).staticMethod is not a function</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바스크립트는 Prototype-based 객체지향 언어이다. Prototype-based 프로그래밍은 클래스 없이 프로토타입과 클로저 등으로 상속, 캡슐화 등의 개념을 구현할 수 있다.&lt;/p&gt;
&lt;p&gt;대부분의 객체 지향 언어가 클래스 기반인 점을
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="https://sub2n.github.io/tags/Javascript/"/>
    
      <category term="Class" scheme="https://sub2n.github.io/tags/Class/"/>
    
  </entry>
  
  <entry>
    <title>26. Destructuring</title>
    <link href="https://sub2n.github.io/2019/05/21/26-Destructuring/"/>
    <id>https://sub2n.github.io/2019/05/21/26-Destructuring/</id>
    <published>2019-05-21T07:16:23.000Z</published>
    <updated>2019-05-22T07:15:43.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h3><p>구조화된 배열 / 객체를 풀어서(destructure) 개별적인 변수에 할당하는 것. 배열 / 객체 리터럴에서 필요한 값을 추출해서 변수에 할당하거나 리턴할 때 유용</p><h3 id="1-Array-Destructuring"><a href="#1-Array-Destructuring" class="headerlink" title="1. Array Destructuring"></a>1. Array Destructuring</h3><p>ES6의 배열 디스트럭처링은 배열의 각 요소를 배열에서 추출해 변수 리스트에 할당한다. 배열 인덱스를 기준으로 추출, 할당한다. </p><p>이 때 할당 연산자(=)의 왼 쪽에 <strong>배열 형태의 변수 리스트</strong>가 와야한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> [one, two, three] = arr;</span><br><span class="line"><span class="hljs-comment">// const [one, two, three] = [1, 2, 3];</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(one, two, three); <span class="hljs-comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p>배열의 인덱스를 기준으로 <strong>오른쪽의 배열</strong>에서 왼쪽의 <strong>변수 리스트</strong>로 할당된다. 그러므로 변수의 <strong>순서가 중요</strong>하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> x, y, z;</span><br><span class="line"></span><br><span class="line">[x, y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; </span><br><span class="line"><span class="hljs-built_in">console</span>.log([x, y]); <span class="hljs-comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line">[x, y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; </span><br><span class="line"><span class="hljs-built_in">console</span>.log([x, y]); <span class="hljs-comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line">[x, y] = [<span class="hljs-number">1</span>]; </span><br><span class="line"><span class="hljs-built_in">console</span>.log([x, y]); <span class="hljs-comment">// [1, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// default 설정</span></span><br><span class="line">[x, y = <span class="hljs-number">3</span>, z = <span class="hljs-number">4</span>] = [<span class="hljs-number">1</span>];</span><br><span class="line"><span class="hljs-built_in">console</span>.log([x, y, z]); <span class="hljs-comment">// [1, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="2-Object-Destructuring"><a href="#2-Object-Destructuring" class="headerlink" title="2. Object Destructuring"></a>2. Object Destructuring</h3><p>ES6의 객체 디스트럭처링은 객체의 각 프로퍼티를 객체로부터 추출해서 변수 리스트에 할당한다. 할당 기준은 <strong>프로퍼티 키</strong>이다. 할당 연산자 왼쪽에는 <strong>객체 형태의 변수 리스트</strong>가 필요하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6 Destructuring</span></span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">firstName</span>: <span class="hljs-string">'Subin'</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">'Park'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> &#123;firstName, lastName &#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(firstName, lastName); <span class="hljs-comment">// Subin Park</span></span><br></pre></td></tr></table></figure><p>객체 destructing의 경우 할당 기준이 프로퍼티 키이므로 <strong>프로퍼티 키를 명시해주지 않으려면 변수명과 프로퍼티 키가 같아야 한다</strong>. 순서는 상관 없다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">prop1</span>: p1, <span class="hljs-attr">prop2</span>: p2 &#125; = &#123; <span class="hljs-attr">prop1</span>: <span class="hljs-string">'a'</span>, <span class="hljs-attr">prop2</span>: <span class="hljs-string">'b'</span> &#125;;</span><br><span class="line"><span class="hljs-comment">// 변수명을 prop1, prop2가 아닌 p1, p2로 하기 위해서 pro1: p1 등으로 구분해줌</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(p1, p2); <span class="hljs-comment">// a, b</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(&#123; <span class="hljs-attr">prop1</span>: p1, <span class="hljs-attr">prop2</span>: p2 &#125;); <span class="hljs-comment">// &#123; prop1: 'a', prop2: 'b' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Shorthand(변수명을 프로퍼티 명과 같게 함) &amp; default 설정</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; prop1, prop2, prop3 = <span class="hljs-string">'c'</span> &#125; = &#123; <span class="hljs-attr">prop1</span>: <span class="hljs-string">'a'</span>, <span class="hljs-attr">prop2</span>: <span class="hljs-string">'b'</span> &#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(&#123; prop1, prop2, prop3 &#125;); <span class="hljs-comment">// &#123;prop1: "a", prop2: "b", prop3: "c"&#125;</span></span><br></pre></td></tr></table></figure><p>객체 디스트럭처링으로 객체에서 필요한 프로퍼티 키의 값만을 추출해낼 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> parts = [</span><br><span class="line">    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">department</span>: <span class="hljs-string">'Human Resource'</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">department</span>: <span class="hljs-string">'Development'</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">department</span>: <span class="hljs-string">'Management'</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span> &#125;    </span><br><span class="line">];</span><br><span class="line"><span class="hljs-comment">// parts 배열의 객체 element 중에서 checked 프로퍼티의 값만을 checked라는 이름의 변수(parameter)로 받는다.</span></span><br><span class="line"><span class="hljs-keyword">const</span> checkedParts = parts.filter(<span class="hljs-function">(<span class="hljs-params">&#123;checked&#125;</span>) =&gt;</span> checked);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(checkedParts); <span class="hljs-comment">//  &#123; id: 2, department: 'Development', checked: true &#125;</span></span><br></pre></td></tr></table></figure><p>위의 예제에서 filter 함수의 callback은 argument 로 parts의 객체 element를 하나씩 받는다. parameter에 {checked} 를 정의했다는 것은 내부적으로</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; checked &#125; = &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">department</span>: <span class="hljs-string">'Human Resource'</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span> &#125;;</span><br></pre></td></tr></table></figure><p>가 실행되는 것과 같다. callback 함수 내에서는 checked라는 parameter 변수에 객체 element의 checked 프로퍼티의 값이 할당되어있다. 따라서 filter 실행시배열의 element 중 checked 프로퍼티의 값을 할당한 변수 checked 가 true인 객체 element만 필터링된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        zipCode: <span class="hljs-string">'12345'</span>,</span><br><span class="line">        city: <span class="hljs-string">'NewYork'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">address</span>: &#123; city &#125; &#125; = student;</span><br><span class="line"><span class="hljs-comment">// 왼 쪽의 city 변수에 student 객체의 address 프로퍼티의 값 객체의 city 프로퍼티의 값 'NeyWork'이 할당됨 (프로퍼티 추출)</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(city); <span class="hljs-comment">// 'NewYork'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Destructuring&quot;&gt;&lt;a href=&quot;#Destructuring&quot; class=&quot;headerlink&quot; title=&quot;Destructuring&quot;&gt;&lt;/a&gt;Destructuring&lt;/h3&gt;&lt;p&gt;구조화된 배열 / 객체를 풀어서(destruct
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Javascript" scheme="https://sub2n.github.io/tags/Javascript/"/>
    
      <category term="Destructuring" scheme="https://sub2n.github.io/tags/Destructuring/"/>
    
  </entry>
  
  <entry>
    <title>25. Enhanced Object property</title>
    <link href="https://sub2n.github.io/2019/05/21/25-Enhanced-Object-property/"/>
    <id>https://sub2n.github.io/2019/05/21/25-Enhanced-Object-property/</id>
    <published>2019-05-21T06:52:28.000Z</published>
    <updated>2019-05-21T07:15:44.237Z</updated>
    
    <content type="html"><![CDATA[<p>ES6에서 객체 리터럴 프로퍼티 기능이 확장되었다.</p><h3 id="1-Object-Property-Value-Shorthand"><a href="#1-Object-Property-Value-Shorthand" class="headerlink" title="1. Object Property Value Shorthand"></a>1. Object Property Value Shorthand</h3><p>ES5에서는 프로퍼티 값으로 변수를 할당하더라도 프로퍼티 키와 값을 써주어야 한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> y = <span class="hljs-number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">    x: x,</span><br><span class="line">    y: y</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;x: 1, y: 2&#125;</span></span><br><span class="line">obj.x === obj[<span class="hljs-string">'x'</span>]; <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><p>ES6에서는 프로퍼티 값으로 변수를 사용하는 경우에는 프로퍼티 키를 생략할 수 있다. (Property Shorthand) 프로퍼티 키는 변수의 이름으로 자동 생성된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">let</span> y = <span class="hljs-number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123; x, y &#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(obj); <span class="hljs-comment">// &#123;x: 1, y: 2&#125;</span></span><br><span class="line">obj.x === obj[<span class="hljs-string">'x'</span>] <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-Dynamic-Property-Keys"><a href="#2-Dynamic-Property-Keys" class="headerlink" title="2. Dynamic Property Keys"></a>2. Dynamic Property Keys</h3><p>ES5에서는 변수를 사용해서 프로퍼티 키를 생성하기 위해서는 두 단계를 거쳐야했지만 ES6에서는 프로퍼티 키를 동적으로 생성할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES5</span></span><br><span class="line"><span class="hljs-keyword">var</span> pass = <span class="hljs-string">'pw'</span></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">    id: <span class="hljs-number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[pass] = <span class="hljs-string">'1234'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6</span></span><br><span class="line"><span class="hljs-keyword">const</span> pass = <span class="hljs-string">'pw'</span></span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    id: <span class="hljs-number">1</span>,</span><br><span class="line">    [pass]: <span class="hljs-string">'1234'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-Object-Method-Shorthand"><a href="#3-Object-Method-Shorthand" class="headerlink" title="3. Object Method Shorthand"></a>3. Object Method Shorthand</h3><p>ES5와 다르게 ES6에서는 메소드를 선언할 때 function 키워드를 생략하고 메소드 축약 표현을 사용할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ES6</span></span><br><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span>,</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.getName(); <span class="hljs-comment">// Park</span></span><br></pre></td></tr></table></figure><p>ES6의 화살표 함수(Arrow Function)와 메소드 축약 표현으로 생성된 함수는 constructor를 가지지 않는 non-constructor이다.</p><h3 id="4-Inheritance-by-proto-Property"><a href="#4-Inheritance-by-proto-Property" class="headerlink" title="4. Inheritance by __proto__ Property"></a>4. Inheritance by __proto__ Property</h3><p>ES5에서 어떤 객체를 상속받기 위해서는 Object.create() 함수를 사용한다. Object.create의 argument로 전달하는 객체를 생성되는 객체의 프로토타입으로 지정하는 것이다. 이를 프로토타입 패턴 상속이라고 한다.</p><p>ES6에서는 객체 리터럴 내부에서 __proto__ 프로퍼티를 직접 바인딩해서 상속을 표현할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> parent = &#123;</span><br><span class="line">    name: <span class="hljs-string">'parent'</span>,</span><br><span class="line">    getName() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> child = &#123;</span><br><span class="line">    __proto__: parent,</span><br><span class="line">    name: <span class="hljs-string">'child'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">parent.getName(); <span class="hljs-comment">// parent</span></span><br><span class="line">child.getName(); <span class="hljs-comment">// child</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES6에서 객체 리터럴 프로퍼티 기능이 확장되었다.&lt;/p&gt;
&lt;h3 id=&quot;1-Object-Property-Value-Shorthand&quot;&gt;&lt;a href=&quot;#1-Object-Property-Value-Shorthand&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://sub2n.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>190521-TIL</title>
    <link href="https://sub2n.github.io/2019/05/21/190521-TIL/"/>
    <id>https://sub2n.github.io/2019/05/21/190521-TIL/</id>
    <published>2019-05-21T04:18:01.000Z</published>
    <updated>2019-05-22T04:56:50.942Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h4><ul><li>해커톤 웹 애플리케이션에 사용할 자료를 조사하고 분류하는 작업을 했다.</li><li>자바스크립트의 클래스, 디스트럭처링, 객체 프로퍼티 등을 공부했다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;해커톤 웹 애플리케이션
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190520-TIL</title>
    <link href="https://sub2n.github.io/2019/05/20/190520-TIL/"/>
    <id>https://sub2n.github.io/2019/05/20/190520-TIL/</id>
    <published>2019-05-20T04:17:52.000Z</published>
    <updated>2019-05-22T04:47:48.693Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h4><ul><li>고차 함수, 배열 메소드를 공부했다.</li><li>알고리즘 문제를 풀었다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;고차 함수, 배열 메소
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>24. Higher Order Function</title>
    <link href="https://sub2n.github.io/2019/05/20/24-Higher-Order-Function/"/>
    <id>https://sub2n.github.io/2019/05/20/24-Higher-Order-Function/</id>
    <published>2019-05-20T01:21:56.000Z</published>
    <updated>2019-05-21T06:52:55.579Z</updated>
    
    <content type="html"><![CDATA[<h4 id="고차-함수-Higher-order-function"><a href="#고차-함수-Higher-order-function" class="headerlink" title="고차 함수(Higher order function)"></a>고차 함수(Higher order function)</h4><p>함수를 인자(paremeter)로 전달받거나 함수를 결과로 반환하는 함수.</p><p>고차 함수는 parameter로 받은 함수를 필요한 시점에 호출하거나 <strong>클로저</strong>를 생성해서 리턴한다. 자바스크립트에서 함수는 FIrst-class object이므로 값처럼 parameter 로 전달하고 리턴할 수 있다. </p><p>고차 함수는 외부에서 전달되는 보조 함수(Helper function)에 따라서 다른 동작을 수행할 수 있다. 함수는 선언된 위치의 스코프를 기억하므로 고차 함수가 클로저를 리턴하고 끝나도 클로저에 의해 참조되고 있는 고차 함수 내부의 변수는 소멸하지 않는다. 이렇게 클로저가 참조하고 있어 스코프가 유지되는 변수를 자유 변수(Free variable)라고 한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeAdder</span>(<span class="hljs-params">x</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> y = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">z</span>) </span>&#123;</span><br><span class="line">    y = <span class="hljs-number">100</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> x + y + z;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> add5 = makeAdder(<span class="hljs-number">5</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> add10 = makeAdder(<span class="hljs-number">10</span>);</span><br></pre></td></tr></table></figure><h4 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h4><ul><li>불변성(Immutability)  지향 : 외부 상태 변경이나 가변(mutable) 데이터를 피함</li><li>순수 함수(Pure function) 사용 : 외부 상태를 변경하지 않는 순수 함수를 통해서 side effect를 최대한 억제</li></ul><p>고차 함수는 순수 함수와 보조 함수의 조합을 통해 프로그램의 안정성을 높이는 함수형 프로그래밍에 기반을 두고 있다.</p><h2 id="1-Array-prototype-sort"><a href="#1-Array-prototype-sort" class="headerlink" title="1. Array.prototype.sort()"></a>1. Array.prototype.sort()</h2><p>숫자 배열 정렬</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> points = [<span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 숫자 배열 오름차순 정렬</span></span><br><span class="line"><span class="hljs-comment">// 비교 함수의 반환값이 0보다 작은 경우, a를 우선하여 정렬한다.</span></span><br><span class="line">points.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> a - b; &#125;);</span><br><span class="line"><span class="hljs-comment">// ES6 화살표 함수</span></span><br><span class="line"><span class="hljs-comment">// points.sort((a, b) =&gt; a - b);</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(points); <span class="hljs-comment">// [ 1, 2, 5, 10, 25, 40, 100 ]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 숫자 배열에서 최소값 취득</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(points[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 숫자 배열 내림차순 정렬</span></span><br><span class="line"><span class="hljs-comment">// 비교 함수의 반환값이 0보다 큰 경우, b를 우선하여 정렬한다.</span></span><br><span class="line">points.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123; <span class="hljs-keyword">return</span> b - a; &#125;);</span><br><span class="line"><span class="hljs-comment">// ES6 화살표 함수</span></span><br><span class="line"><span class="hljs-comment">// points.sort((a, b) =&gt; b - a);</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(points); <span class="hljs-comment">// [ 100, 40, 25, 10, 5, 2, 1 ]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 숫자 배열에서 최대값 취득</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(points[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 100</span></span><br></pre></td></tr></table></figure><p>객체 배열 정렬</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> todos = [</span><br><span class="line">  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">'JavaScript'</span> &#125;,</span><br><span class="line">  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">'HTML'</span> &#125;,</span><br><span class="line">  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">'CSS'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 비교 함수</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">key</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 프로퍼티 값이 문자열인 경우, - 산술 연산으로 비교하면 NaN이 나오므로 비교 연산을 사용한다.</span></span><br><span class="line">    <span class="hljs-keyword">return</span> a[key] &gt; b[key] ? <span class="hljs-number">1</span> : (a[key] &lt; b[key] ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// id를 기준으로 정렬</span></span><br><span class="line">todos.sort(compare(<span class="hljs-string">'id'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(todos);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// content를 기준으로 정렬</span></span><br><span class="line">todos.sort(compare(<span class="hljs-string">'content'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(todos);</span><br></pre></td></tr></table></figure><h2 id="2-Array-prototype-forEach-callback-currentValue-index-array-thisArg"><a href="#2-Array-prototype-forEach-callback-currentValue-index-array-thisArg" class="headerlink" title="2. Array.prototype.forEach(callback(currentValue[, index[, array]])[, thisArg])"></a>2. Array.prototype.forEach(callback(currentValue[, index[, array]])[, thisArg])</h2><blockquote><h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p><strong><code>callback</code>(currentValue[, index, array])</strong></p><ul><li><code>currentValue</code> : 현재 처리할 요소 값</li><li><code>index</code>(option) : 현재 처리할 요소의 인덱스</li><li><code>array</code>(option) : forEach()를 호출한 배열</li></ul><p><strong><code>thisArg</code> (option)</strong></p><p>​    <code>callback</code>이 실행될 때 <code>this</code>로 사용할 값</p><h3 id="Return-Value"><a href="#Return-Value" class="headerlink" title="Return Value"></a>Return Value</h3><p><code>undefined</code></p></blockquote><ul><li>forEach 메소드는  for 문 대신 사용 가능</li><li>for 문보다 성능이 좋지는 않지만 가독성이 좋으므로 사용이 권장된다.</li><li>break 문을 사용할 수 없어 중단 없이 배열의 모든 요소를 순회한다.</li><li>IE 9 이상에서 정상 동작</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-keyword">let</span> pows = [];</span><br><span class="line"></span><br><span class="line">numbers.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> pows.push(item ** <span class="hljs-number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(pows);</span><br></pre></td></tr></table></figure><ul><li>forEach 메소드는 this를 수정할 수 없지만 callback 함수는 세 번째 인자로 넘겨받은 원본 배열과 forEach 메소드의 두번째 인자로 넘겨받은 this를 수정할 수 있다.</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Square</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.array = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Square.prototype.multiply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// multiply가 메소드로 호출되었으므로 this는 square 객체 : Square &#123; array: [] &#125;</span></span><br><span class="line">  arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, array2</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">// Square &#123; array: [] &#125; (1.에서 바인딩된 this)</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(array2); <span class="hljs-comment">// [1, 2, 3]</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.array.push(item * item);</span><br><span class="line">  &#125;, <span class="hljs-keyword">this</span>);<span class="hljs-comment">// 1. this를 callback의 this로 바인딩</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> square = <span class="hljs-keyword">new</span> Square(); <span class="hljs-comment">// Square &#123; array: [] &#125;</span></span><br><span class="line">square.multiply([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(square.array); <span class="hljs-comment">// [ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure><h2 id="3-Array-prototype-map-callback-currentValue-index-array-thisArg"><a href="#3-Array-prototype-map-callback-currentValue-index-array-thisArg" class="headerlink" title="3. Array.prototype.map(callback(currentValue[, index[, array]])[, thisArg])"></a>3. Array.prototype.map(callback(currentValue[, index[, array]])[, thisArg])</h2><blockquote><h3 id="Parameter-1"><a href="#Parameter-1" class="headerlink" title="Parameter"></a>Parameter</h3><p><strong><code>callback</code>(currentValue[, index, array])</strong></p><ul><li><code>currentValue</code> : 현재 처리할 요소 값</li><li><code>index</code>(option) : 현재 처리할 요소의 인덱스</li><li><code>array</code>(option) : forEach()를 호출한 배열</li></ul><p><strong><code>thisArg</code> (option)</strong></p><p>​    <code>callback</code>이 실행될 때 <code>this</code>로 사용할 값</p><h3 id="Return-Value-1"><a href="#Return-Value-1" class="headerlink" title="Return Value"></a>Return Value</h3><p>배열의 각 요소에 대해 실행한  callback의 <strong>리턴 값</strong>(리턴 필수)으로 이루어진 새로운 배열</p></blockquote><h2 id="4-Array-prototype-filter-callback-currentValue-index-array-thisArg"><a href="#4-Array-prototype-filter-callback-currentValue-index-array-thisArg" class="headerlink" title="4. Array.prototype.filter(callback(currentValue[, index[, array]])[, thisArg])"></a>4. Array.prototype.filter(callback(currentValue[, index[, array]])[, thisArg])</h2><blockquote><h3 id="Parameter-2"><a href="#Parameter-2" class="headerlink" title="Parameter"></a>Parameter</h3><p><strong><code>callback</code>(currentValue[, index, array])</strong></p><ul><li><code>currentValue</code> : 현재 처리할 요소 값</li><li><code>index</code>(option) : 현재 처리할 요소의 인덱스</li><li><code>array</code>(option) : forEach()를 호출한 배열</li></ul><p><strong><code>thisArg</code> (option)</strong></p><p>​    <code>callback</code>이 실행될 때 <code>this</code>로 사용할 값</p><h3 id="Return-Value-2"><a href="#Return-Value-2" class="headerlink" title="Return Value"></a>Return Value</h3><p><code>callback</code> 테스트를 통과한 요소로 이루어진 새로운 배열. 조건에 부합하지 않아 리턴된 요소가 없으면 빈 배열을 리턴</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> result = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, self</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`[<span class="hljs-subst">$&#123;index&#125;</span>] = <span class="hljs-subst">$&#123;item&#125;</span>`</span>);</span><br><span class="line">  <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span>; <span class="hljs-comment">// return true인 item만 새로운 배열에 추가한다.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// [ 1, 3, 5 ]</span></span><br></pre></td></tr></table></figure><h2 id="5-Array-prototype-reduce-callback-initialValue"><a href="#5-Array-prototype-reduce-callback-initialValue" class="headerlink" title="5.  Array.prototype.reduce(callback[, initialValue])"></a>5.  Array.prototype.reduce(callback[, initialValue])</h2><blockquote><h3 id="Parameter-3"><a href="#Parameter-3" class="headerlink" title="Parameter"></a>Parameter</h3><p><code>callback</code></p><ul><li><code>accumulator</code> : accumulator(누산기)는 callback의 리턴값을 누적한다. imitialValue가 제공된 경우에는 initialValue로 초기화되어 시작하고, 아닌 경우 callback의 이전 리턴값이다.</li><li><code>currentValue</code> : 현재 처리할 요소 값</li><li><code>currentIndex</code>(option) : 현재 처리할 요소의 인덱스. initialValue가 제공된 경우 0. 아니면 1부터 시작</li><li><code>array</code>(option) : reduce()를 호출한 배열</li></ul><p><code>initialValue</code>(option)</p><p>​    <code>callback</code>의 최초 호출에서 첫번째 argument에 제공하는 초기값. 초기값을 제공하지 않을 경우 배열의 첫번쨰 요소를 사용. (빈 배열에서 초기값 없이 reduce() 호출시 에러)</p><h3 id="Return-Value-3"><a href="#Return-Value-3" class="headerlink" title="Return Value"></a>Return Value</h3><p>누적 계산 결과 값</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">previousValue: 이전 콜백의 반환값</span></span><br><span class="line"><span class="hljs-comment">currentValue : 현재 처리할 배열 요소의 값</span></span><br><span class="line"><span class="hljs-comment">currentIndex : 현재 처리할 배열 요소의 인덱스</span></span><br><span class="line"><span class="hljs-comment">array        : 메소드를 호출한 배열</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-keyword">const</span> sum = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">previousValue, currentValue, currentIndex, array</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(previousValue + <span class="hljs-string">'+'</span> + currentValue + <span class="hljs-string">'='</span> + (previousValue + currentValue));</span><br><span class="line">  <span class="hljs-keyword">return</span> previousValue + currentValue; <span class="hljs-comment">// 결과는 다음 콜백의 첫번째 인자로 전달된다</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">1+2=3</span></span><br><span class="line"><span class="hljs-comment">3+3=6</span></span><br><span class="line"><span class="hljs-comment">6+4=10</span></span><br><span class="line"><span class="hljs-comment">10+5=15</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(sum); <span class="hljs-comment">// 15: 1~5까지의 합</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> max = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> prev &gt; cur ? prev : cur;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(max); <span class="hljs-comment">// 5: 최대값</span></span><br></pre></td></tr></table></figure><h2 id="6-Array-prototype-some-callback-thisArg-boolean"><a href="#6-Array-prototype-some-callback-thisArg-boolean" class="headerlink" title="6. Array.prototype.some(callback [, thisArg]): boolean"></a>6. Array.prototype.some(callback [, thisArg]): boolean</h2><p>배열 내 <strong>일부 요소</strong>가 콜백 함수의 테스트를 통과하는지 확인해서 결과를 boolean으로 반환한다.</p><h2 id="7-Array-prototype-every-callback-thisArg-boolean"><a href="#7-Array-prototype-every-callback-thisArg-boolean" class="headerlink" title="7. Array.prototype. every(callback [, thisArg]): boolean"></a>7. Array.prototype. every(callback [, thisArg]): boolean</h2><p>배열 내 <strong>모든 요소</strong>가 콜백 함수의 테스트를 통과하는지 확인해서 결과를 boolean으로 반환한다.</p><h2 id="8-Array-prototype-find-callback-thisArg"><a href="#8-Array-prototype-find-callback-thisArg" class="headerlink" title="8. Array.prototype.find(callback[, thisArg])"></a>8. Array.prototype.find(callback[, thisArg])</h2><blockquote><h3 id="Parameter-4"><a href="#Parameter-4" class="headerlink" title="Parameter"></a>Parameter</h3><p><strong><code>callback</code></strong></p><ul><li><code>element</code> : 현재 처리할 요소</li><li><code>index</code>(option) : 현재 처리할 요소의 인덱스</li><li><code>array</code>(option) : find()를 호출한 배열</li></ul><p><strong><code>thisArg</code> (option)</strong></p><p>​    <code>callback</code>이 실행될 때 <code>this</code>로 사용할 객체</p><h3 id="Return-Value-4"><a href="#Return-Value-4" class="headerlink" title="Return Value"></a>Return Value</h3><p><code>callback</code> 테스트를 통과한 첫번째 요소의 값. 못 찾으면 <code>undefined</code></p></blockquote><hr><h2 id="Object-assign-target-…sources"><a href="#Object-assign-target-…sources" class="headerlink" title="Object.assign(target, …sources)"></a>Object.assign(target, …sources)</h2><blockquote><h3 id="Parameter-5"><a href="#Parameter-5" class="headerlink" title="Parameter"></a>Parameter</h3><p><code>target</code> : 대상 객체</p><p><code>sources</code> : 하나 이상의  source 객체</p><h3 id="Return-Value-5"><a href="#Return-Value-5" class="headerlink" title="Return Value"></a>Return Value</h3><p> target(대상 객체)</p></blockquote><p>동일한 키가 존재할 경우 target 객체의 프로퍼티는 source 객체의 프로퍼티로 덮어쓰여진다.</p><p>Object.assign() 메소드는 enumarable한 source 객체의 프로퍼티만  target 객체의 프로퍼티로 덮어쓴다. source 객체의 프로퍼티가 <code>null</code>이나 <code>undefined</code>이어도 에러를 내지 않는다.</p><blockquote><h3 id="Parameter-6"><a href="#Parameter-6" class="headerlink" title="Parameter"></a>Parameter</h3><p><strong><code>callback</code>(currentValue[, index, array])</strong></p><ul><li><code>currentValue</code> : 현재 처리할 요소 값</li><li><code>index</code> : 현재 처리할 요소의 인덱스</li><li><code>array</code> : forEach()를 호출한 배열</li></ul><p><strong><code>thisArg</code> (option)</strong></p><p><code>callback</code>이 실행될 때 <code>this</code>로 사용할 값</p><h3 id="Return-Value-6"><a href="#Return-Value-6" class="headerlink" title="Return Value"></a>Return Value</h3><p><code>undefined</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;고차-함수-Higher-order-function&quot;&gt;&lt;a href=&quot;#고차-함수-Higher-order-function&quot; class=&quot;headerlink&quot; title=&quot;고차 함수(Higher order function)&quot;&gt;&lt;/a&gt;고차 함
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Higher Order Function" scheme="https://sub2n.github.io/tags/Higher-Order-Function/"/>
    
  </entry>
  
  <entry>
    <title>23. Array</title>
    <link href="https://sub2n.github.io/2019/05/19/23-Array/"/>
    <id>https://sub2n.github.io/2019/05/19/23-Array/</id>
    <published>2019-05-19T08:05:12.000Z</published>
    <updated>2019-05-19T03:43:00.078Z</updated>
    
    <content type="html"><![CDATA[<p>자바스크립트에서는 배열(Array)도 객체이다. 배열은 Array 생성자로 생성된 Array type의 객체이며 프로토타입 객체로 Array.prototype을 가진다.</p><h1 id="1-Creation-of-Array"><a href="#1-Creation-of-Array" class="headerlink" title="1. Creation of Array"></a>1. Creation of Array</h1><h2 id="1-1-Array-Literal"><a href="#1-1-Array-Literal" class="headerlink" title="1.1. Array Literal"></a>1.1. Array Literal</h2><p>Array literal은 0개 이상의 값을 쉼표(,)로 구분하여 대괄호([])로 묶는다. 배열은 index를 가지며, 첫번째 값은 index 0으로 읽을 수 있다. 존재하지 않는 index로 접근하면 <code>undefined</code>를 리턴한다.</p><p>배열은 순회할 수 있으므로 길이를 나타내는 length 프로퍼티를 가진다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">1</span>]); <span class="hljs-comment">// undefined</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(arr.length); <span class="hljs-comment">// 0</span></span><br></pre></td></tr></table></figure><p>객체가 프로퍼티의 키와 값을 가지고 프로퍼티 키로 값에 접근하는 반면 배열은 요소의 index로 요소의 값에 접근할 수 있다. Index는 0부터 시작한다.</p><p>다른 프로그래밍 언어와 다르게 자바스크립트의 배열은 서로 다른 데이터 타입의 원소들을 함께 포함할 수 있다.</p><h2 id="1-2-Array-Constructor-Function"><a href="#1-2-Array-Constructor-Function" class="headerlink" title="1.2. Array() Constructor Function"></a>1.2. Array() Constructor Function</h2><p>배열은 보통 배열 리터럴 방식으로 생성하지만 Array 생성자 함수를 사용해서 생성할 수도 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;자바스크립트에서는 배열(Array)도 객체이다. 배열은 Array 생성자로 생성된 Array type의 객체이며 프로토타입 객체로 Array.prototype을 가진다.&lt;/p&gt;
&lt;h1 id=&quot;1-Creation-of-Array&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Array" scheme="https://sub2n.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>22. Regular Expression</title>
    <link href="https://sub2n.github.io/2019/05/19/22-Regular-Expression/"/>
    <id>https://sub2n.github.io/2019/05/19/22-Regular-Expression/</id>
    <published>2019-05-19T03:37:56.000Z</published>
    <updated>2019-05-20T08:15:47.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h1><p>정규 표현식은 문자열에서 특정 내용을 찾거나 바꾸거나 뽑아내는 데에 사용된다.</p><p>아이디나 이메일, 비밀번호 등의 유효성 검사에 정규 표현식을 사용할 수 있다. 자주 사용하는 정규 표현식은 간단한 구글 검색으로 찾을 수 있지만, 표현식 구성법에 대해서 우선 정리해볼 것이다.</p><h2 id="How-to-make-Regular-Expression"><a href="#How-to-make-Regular-Expression" class="headerlink" title="How to make Regular Expression?"></a>How to make Regular Expression?</h2><p>정규 표현식을 생성하는 가장 간단한 방법은 리터럴 표기법이다.</p><p>RegExp.prototype.exec, RegExp.prototype.test, String.prototype.match, String.prototype.replace, String.prototype.search, String.prototype.split 등의 메소드에서 정규 표현식을 사용할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// '/(pattern)/(flag: i, g, m)'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> targetStr = <span class="hljs-string">'I like koala.'</span></span><br><span class="line"><span class="hljs-keyword">const</span> regExp = <span class="hljs-regexp">/k/ig</span>;<span class="hljs-comment">// 정규 표현식</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// RegExp.prototype methods</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(regExp.exec(targetStr)); <span class="hljs-comment">// ["k", index: 4, input: "I like koala.", groups: undefined]</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(regExp.test(targetStr)); <span class="hljs-comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// String.prototype methods</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(targetStr.match(regExp)); <span class="hljs-comment">// (2) ["k", "k"]</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(targetStr.replace(regExp, <span class="hljs-string">'K'</span>)); <span class="hljs-comment">// I liKe Koala.</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(targetStr.search(regExp)); <span class="hljs-comment">// 4</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(targetStr.splitgExp)); <span class="hljs-comment">// (3) ["I li", "e ", "oala."]</span></span><br></pre></td></tr></table></figure><h2 id="1-1-Flag"><a href="#1-1-Flag" class="headerlink" title="1.1. Flag"></a>1.1. Flag</h2><p>정규 표현식의 플래그에는 다음과 같은 종류가 있다.</p><ul><li>i <ul><li>Ignore Case</li><li>대소문자를 구별하지 않고 검색</li></ul></li><li>g<ul><li>Globl</li><li>문자열 내의 모든 패턴을 검색</li></ul></li><li>m<ul><li>Multi Line</li><li>문자열의 행이 바뀌더라도 계속 검색</li></ul></li></ul><p>플래그는 옵션으로, 플래그를 사용하지 않으면 첫번째 매칭된 대상만 검색하고 끝낸다.</p><h2 id="1-2-Pattern"><a href="#1-2-Pattern" class="headerlink" title="1.2. Pattern"></a>1.2. Pattern</h2><p>정규 표현식의 패턴으로 검색할 문자열을 지정한다. 패턴은 특별한 의미를 가진 Meta Character 또는 기호로 표현할 수 있다.</p><ol><li><code>.</code> : 임의의 문자 한 개</li><li>[A-Z] : A ~ Z가 한 번 이상 반복되는 문자열. <code>[]</code> 안에 <code>-</code> 쓰면 범위 지정</li><li><code>*</code> / <code>+</code><ul><li><code>*</code> : 0개 이상 반복되는 패턴</li><li><code>+</code> : 1개 이상 반복되는 패턴</li></ul></li><li><code>[]</code> : [] 내의 문자는 or로 동작</li><li><code>{2, 3}</code> : 2 ~ 3 자리</li><li>\d, \D<ul><li>\d : 숫자</li><li>\D : 숫자가 아닌 문자</li></ul></li><li>\w, \W<ul><li>\w : 알파벳과 숫자</li><li>\W : 알파벳과 숫자가 아닌 문자</li></ul></li><li>\s<ul><li>여러가지 공백 문자 (space, tab 등) [\t\r\n\v\f]</li></ul></li><li><code>^</code><ul><li><code>[^]</code>는 not</li><li><code>[]</code> 밖의 <code>^</code>는 문자열의 처음을 의미</li></ul></li><li><code>$</code><ul><li>문자열의 끝을 의미</li></ul></li></ol><h2 id="1-3-Well-Used-Reguler-Expression"><a href="#1-3-Well-Used-Reguler-Expression" class="headerlink" title="1.3. Well Used Reguler Expression"></a>1.3. Well Used Reguler Expression</h2><p>특정 단어로 시작하는지 검사</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 문자열이 'http'로 시작하는지 검사</span></span><br><span class="line"><span class="hljs-keyword">const</span> regexr = <span class="hljs-regexp">/^http/</span>;</span><br></pre></td></tr></table></figure><p>특정 단어로 끝나는지 검사</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 문자열이 'html'로 끝나는지 검사</span></span><br><span class="line"><span class="hljs-keyword">const</span> regexr = <span class="hljs-regexp">/html$/</span>;</span><br></pre></td></tr></table></figure><p>아이디 유효성 검사</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 알파벳 대소문자 또는 숫자로 시작하고 끝나며 4 ~10자리인지 검사</span></span><br><span class="line"><span class="hljs-comment">// &#123;4,10&#125;: 4 ~ 10자리</span></span><br><span class="line"><span class="hljs-keyword">const</span> regexr = <span class="hljs-regexp">/^[A-Za-z0-9]&#123;4,10&#125;$/</span>;</span><br></pre></td></tr></table></figure><p>메일 주소 유효성 검사</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> regexr = <span class="hljs-regexp">/^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$/</span>;</span><br></pre></td></tr></table></figure><p>핸드폰 번호 유효성 검사</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> regexr = <span class="hljs-regexp">/^\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;$/</span>;</span><br></pre></td></tr></table></figure><p>특수 문자 포함 여부 검사</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// A-Za-z0-9 이외의 문자가 있는지 검사</span></span><br><span class="line"><span class="hljs-keyword">let</span> regexr = <span class="hljs-regexp">/[^A-Za-z0-9]/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 아래 방식도 동작한다. 이 방식의 장점은 특수 문자를 선택적으로 검사할 수 있다.</span></span><br><span class="line">regexr = <span class="hljs-regexp">/[\&#123;\&#125;\[\]\/?.,;:|\)*~`!^\-_+&lt;&gt;@\#$%&amp;\\\=\(\'\"]/gi</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h1&gt;&lt;p&gt;정규 표현식
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="RegExp" scheme="https://sub2n.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>190517-TIL</title>
    <link href="https://sub2n.github.io/2019/05/17/190517-TIL/"/>
    <id>https://sub2n.github.io/2019/05/17/190517-TIL/</id>
    <published>2019-05-17T07:46:21.000Z</published>
    <updated>2019-05-17T08:19:02.037Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h4><ul><li><p>this가 바인딩되는 방식에 대해서 팀원들과 토론했다.</p><p>💛<a href="https://github.com/Sub2n/JavaScript-Study/blob/master/190517-brain-stretching.md" target="_blank" rel="noopener">190517 Brain Stretching</a> </p></li><li><p>Math, String, Number 객체의 메소드를 응용한 알고리즘 연습 문제를 풀었다.</p><p>💛 <a href="https://github.com/Sub2n/FDS12-Algorithm/blob/master/190517.js" target="_blank" rel="noopener">풀이 보러가기</a></p></li><li><p>자바스크립트 Array에 대해서 배웠다.</p></li></ul><hr><h4 id="주말에-할-일"><a href="#주말에-할-일" class="headerlink" title="주말에 할 일"></a>주말에 할 일</h4><ul><li>자바스크립트 String 자주 쓰이는 method 정리하기</li><li>자바스크립트  Array 정리하기</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;this가 바인딩
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190516-TIL</title>
    <link href="https://sub2n.github.io/2019/05/16/190516-TIL/"/>
    <id>https://sub2n.github.io/2019/05/16/190516-TIL/</id>
    <published>2019-05-16T09:48:57.000Z</published>
    <updated>2019-05-16T09:52:47.241Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h4><ul><li>Prototype 포스팅을 하면서 다시 한 번 정리 했다.</li><li>String, Number, Math, Date 객체의 프로퍼티와 메소드를 공부했다.</li><li><a href="https://github.com/Sub2n/JavaScript-Study/blob/master/190516_problems.js" target="_blank" rel="noopener">String, Number, Math, Date 연습문제</a>를 풀었다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Prototype 포스
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>21. Number, Math and String Object</title>
    <link href="https://sub2n.github.io/2019/05/15/21-Number-Math-Date-and-String-Object/"/>
    <id>https://sub2n.github.io/2019/05/15/21-Number-Math-Date-and-String-Object/</id>
    <published>2019-05-15T10:23:44.000Z</published>
    <updated>2019-05-19T03:43:14.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Number-wrapper-object"><a href="#1-Number-wrapper-object" class="headerlink" title="1. Number wrapper object"></a>1. Number wrapper object</h1><p>Number 객체 : primitive type number를 다룰 때 유용한 프로퍼티와 메소드를 제공하는 wrapper 객체. 변수 또는 객체의 프로퍼티의 값이 숫자라면 Number 객체를 별도로 생성하지 않고 Number 객체의 프로퍼티와 메소드를 사용할 수 있다.</p><p>Primitive type이 wrapper 객체의 메소드를 사용할 수 있는 이유: primitive type으로 wrapper 객체의 프로퍼티나 메소드를 호출할 때 일시적으로 해당 타입과 연관된 wrapper 객체로 변환해 프로토타입 객체를 공유하기 때문.</p><h2 id="1-1-Number-Constructor"><a href="#1-1-Number-Constructor" class="headerlink" title="1.1 Number Constructor"></a>1.1 Number Constructor</h2><p>Number 객체는 Number() 생성자 함수를 통해 생성한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> x = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">123</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> y = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">'123'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> z = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">'string'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">// 123</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(y); <span class="hljs-comment">// 123</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(z); <span class="hljs-comment">// NaN</span></span><br></pre></td></tr></table></figure><p>new 연산자 없이 Number() 함수를 사용하면 Number 객체가 아니라 primitive type number를 반환한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> x = <span class="hljs-built_in">Number</span>(<span class="hljs-number">123</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> y = <span class="hljs-built_in">Number</span>(<span class="hljs-string">'123'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> z = <span class="hljs-built_in">Number</span>(<span class="hljs-string">'string'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x); <span class="hljs-comment">// 123</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(y); <span class="hljs-comment">// 123</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(z); <span class="hljs-comment">// NaN</span></span><br></pre></td></tr></table></figure><p>이를 이용해 형변환을 할 수 있다.</p><h2 id="1-2-Number-Property"><a href="#1-2-Number-Property" class="headerlink" title="1.2. Number Property"></a>1.2. Number Property</h2><p>Number 객체의 프로퍼티는 static property로, Number 객체를 생성할 필요 없이 Number.propertyName의 형태로 사용한다.</p><blockquote><h4 id="Static-Property"><a href="#Static-Property" class="headerlink" title="Static Property"></a>Static Property</h4><p>Static method는 생성자 함수로 인스턴트 객체를 만들지 않아도 생성자 함수의 메소드로 직접 호출 가능하며, 생성자 함수가 생성한 인스턴스 객체에서는 사용할 수 없다.</p></blockquote><h3 id="1-2-1-Number-EPSILONES6"><a href="#1-2-1-Number-EPSILONES6" class="headerlink" title="1.2.1. Number.EPSILONES6"></a>1.2.1. Number.EPSILON<sup>ES6</sup></h3><p>Number.EPSILON은 JavaScript에서 표현할 수 있는 가장 작은 수를 나타낸다. EPSILON은 컴퓨터에서 부동소숫점을 표현하는 데에 한계가 있기 때문에 발생하는 오차이다. </p><p>컴퓨터가 표현할 수있는 어떤 임의의 수와, 그 바로 다음으로 표현할 수 있는 수와의 차이를 EPSILON이라고 한다. </p><p>컴퓨터에서 부동소숫점 수를 비교할 때는 Number.EPSILON을 사용하여 두 수의 차이가 최소 오차인 Number.EPSILON보다 작으면 같은 수로 인정한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> === <span class="hljs-number">0.3</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-comment">// 0.1 + 0.2 = 0.30000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEqual</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(a - b) &lt; <span class="hljs-built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(isEqual(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>)); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-Number-MAX-VALUEES1"><a href="#1-2-2-Number-MAX-VALUEES1" class="headerlink" title="1.2.2. Number.MAX_VALUEES1"></a>1.2.2. Number.MAX_VALUE<sup>ES1</sup></h3><p>Number.MAX_VALUE는 JavaScript에서 사용 가능한 가장 큰 숫자를 반환한다. MAX_VALUE보다 큰 숫자는 Infinity이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.MAX_VALUE; <span class="hljs-comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="hljs-keyword">const</span> num = <span class="hljs-built_in">Number</span>.MAX_VALUE + <span class="hljs-number">1</span>; <span class="hljs-comment">// num = Number.MAX_VALUE</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">Infinity</span> &gt; <span class="hljs-built_in">Number</span>.MAX_VALUE); <span class="hljs-comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-Number-MIN-VALUEES1"><a href="#1-2-3-Number-MIN-VALUEES1" class="headerlink" title="1.2.3. Number.MIN_VALUEES1"></a>1.2.3. Number.MIN_VALUE<sup>ES1</sup></h3><p>Number.MIN_VALUE는 JavaScript에서 사용 가능한 가장 작은 숫자를 반환한다. MIN_VALUE는 0에 가장 가까운 양수 값이다. MIN_VALUE보다 작은 숫자는 0으로 변환된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.MIN_VALUE; <span class="hljs-comment">// 5e-324</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MinEpsilon</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.MIN_VALUE &gt; <span class="hljs-built_in">Number</span>.EPSILON) &#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'MIN_VALUE &gt; EPSILON'</span>);</span><br><span class="line"> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.MIN_VALUE &lt; <span class="hljs-built_in">Number</span>.EPSILON) &#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'MIN_VALUE &lt; EPSILON'</span>);</span><br><span class="line"> &#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'MIN_VALUE = EPSILON'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MinEpsilon(); <span class="hljs-comment">// MIN_VALUE &lt; EPSILON</span></span><br></pre></td></tr></table></figure><h3 id="1-2-4-Number-POSITIVE-INFINITYES1"><a href="#1-2-4-Number-POSITIVE-INFINITYES1" class="headerlink" title="1.2.4. Number.POSITIVE_INFINITYES1"></a>1.2.4. Number.POSITIVE_INFINITY<sup>ES1</sup></h3><p>Number.POSITIVE_INFINITY는 양의 무한대 <code>Infinity</code>를 반환한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.POSITIVE_INFINITY <span class="hljs-comment">// Infinity</span></span><br></pre></td></tr></table></figure><h3 id="1-2-5-Number-NEGATIVE-INFINITYES1"><a href="#1-2-5-Number-NEGATIVE-INFINITYES1" class="headerlink" title="1.2.5. Number.NEGATIVE_INFINITYES1"></a>1.2.5. Number.NEGATIVE_INFINITY<sup>ES1</sup></h3><p>Number.NEGTIVE_INFINITY는 음의 무한대 <code>-Infinity</code>를 반환한다</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.NEGATIVE_INFINITY <span class="hljs-comment">// -Infinity</span></span><br></pre></td></tr></table></figure><h3 id="1-2-6-Number-NaNES1"><a href="#1-2-6-Number-NaNES1" class="headerlink" title="1.2.6. Number.NaNES1"></a>1.2.6. Number.NaN<sup>ES1</sup></h3><p>Number.NaN은 Not-a-Number를 나타내는 숫자값이다. Number.NaN 프로퍼티는 window.NaN 프로퍼티와 같다. NaN의 type은 number임을 명심하자.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>(<span class="hljs-string">'abc'</span>); <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span>; <span class="hljs-comment">// number</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="isNaN-method"><a href="#isNaN-method" class="headerlink" title="isNaN method"></a>isNaN method</h4><p>NaN은 ==나 === 연산자로 NaN인지 판변할 수 없다. 어떤 숫자가 NaN인지 알기 위해서는 isNaN 메소드를 써야하는데, 2가지 종류가 있으며 다르게 동작하니 알아두면 좋다.</p><ul><li>isNaN() (window.isNaN) : built-in 메소드로, 특이한 형변환을 수행한다.<ul><li>argument가 Number 형이 아닐 경우 값을 순간적으로 Number로 형변환 한 후 NaN인지 검사한다.</li><li>즉, argument가 Number로 강제 형변환 될 경우의 NaN 여부를 반환한다.</li></ul></li><li>Number.isNaN() : 위의 global isNaN()의 보다 엄격한 버전으로, 주어진 값이 NaN인지 검사한다.<ul><li>개선된 점으로 argument가 Number 형이고 값이 NaN일 때만 true를, 아니면 false를 반환한다.</li><li>즉, argument를 강제로 Number 형으로 변환하지 않고 Number 형이 아닌 argument를 전달받을 경우 false를 반환한다.</li></ul></li></ul></blockquote><h2 id="1-3-Number-Method"><a href="#1-3-Number-Method" class="headerlink" title="1.3. Number Method"></a>1.3. Number Method</h2><p>Number 객체의 메소드</p><h3 id="1-3-1-Number-isFinite-testValue-number-boolean-ES6"><a href="#1-3-1-Number-isFinite-testValue-number-boolean-ES6" class="headerlink" title="1.3.1. Number.isFinite(testValue: number): boolean ES6"></a>1.3.1. Number.isFinite(testValue: number): boolean <sup>ES6</sup></h3><p>Number.isFinite() 메소드는 parameter에 전달된 값이 정상적인 유한수인지를 검사하고 결과를 Boolean으로 리턴한다.</p><p>Number.isFinite()는 전역 함수 isFinite()와 달리 argument를 숫자로 강제 형변환 하지 않는다. 숫자가 아닌 argument가 들어오면 언제나 false를 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">Infinity</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-built_in">Number</span>.EPSILON); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-number">0</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-string">'0'</span>); <span class="hljs-comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// isFinite()와 Number.isFinite()</span></span><br><span class="line"><span class="hljs-built_in">isFinite</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">null</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-Number-isInteger-testValue-number-boolean-ES6"><a href="#1-3-2-Number-isInteger-testValue-number-boolean-ES6" class="headerlink" title="1.3.2. Number.isInteger(testValue: number): boolean ES6"></a>1.3.2. Number.isInteger(testValue: number): boolean <sup>ES6</sup></h3><p>Number.isInteger() 메소드는 parameter에 전달된 값이 정수(Integer)인지 검사하고 결과를 Boolean으로 리턴한다. 이 또한 검사 전에 argument를 강제로 Number 형으로 변환하지 않는다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-number">3.0000</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-number">3</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isInteger(<span class="hljs-string">'string'</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-Number-isNaN-testValue-number-boolean-ES6"><a href="#1-3-3-Number-isNaN-testValue-number-boolean-ES6" class="headerlink" title="1.3.3. Number.isNaN(testValue: number): boolean ES6"></a>1.3.3. Number.isNaN(testValue: number): boolean <sup>ES6</sup></h3><p>Number.isNaN() 메소드는 parameter에 전달된 값이 NaN인지를 검사하고 결과를 Boolean으로 리턴한다. 검사 전에 argument를 숫자로 변환하지 않는다. global isNaN()과 다르다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">true</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">null</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">Infinity</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-number">37</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">NaN</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-string">'string'</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-Number-isSafeInteger-testValue-number-boolean-ES6"><a href="#1-3-4-Number-isSafeInteger-testValue-number-boolean-ES6" class="headerlink" title="1.3.4. Number.isSafeInteger(testValue: number): boolean ES6"></a>1.3.4. Number.isSafeInteger(testValue: number): boolean <sup>ES6</sup></h3><p>Number.isSafeInteger() 메소드는 parameter에 전달된 값이 정수 표현 범위 내의 안전한 정수 값인지 검사하고 결과를 Boolean으로 리턴한다. 역시 검사 전에 argument를 숫자로 변환하지 않는다.</p><p>안전한 정수 값은  -(2<sup>53</sup> - 1) 이상 (2<sup>53</sup> - 1) 이하의 정수를 말한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Number</span>.isSafeInteger(<span class="hljs-number">2</span>**<span class="hljs-number">53</span>); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isSafeInteger(<span class="hljs-number">2</span>**<span class="hljs-number">53</span> - <span class="hljs-number">1</span>); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isSafeInteger(-(<span class="hljs-number">2</span>**<span class="hljs-number">53</span>)); <span class="hljs-comment">// false</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isSafeInteger(-(<span class="hljs-number">2</span>**<span class="hljs-number">53</span> - <span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Number</span>.isSafeInteger(<span class="hljs-literal">Infinity</span>); <span class="hljs-comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-Number-prototype-toExponential-fractionDigits-number-string-ES3"><a href="#1-3-5-Number-prototype-toExponential-fractionDigits-number-string-ES3" class="headerlink" title="1.3.5. Number.prototype.toExponential(fractionDigits?: number): string ES3"></a>1.3.5. Number.prototype.toExponential(fractionDigits?: number): string <sup>ES3</sup></h3><p>Number.prototype.toExponential() 메소드는 호출 대상을 지수 표기법으로 변환하여 문자열로 리턴한다. 지수 표기법(Exponential Notation)이란 큰 숫자를 표기할 때 e(Exponent) 앞에 있는 숫자에 10의 n 제곱을 하는 형식으로 수를 나타내는 방식이다.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12345 = 1.2345e+3</span><br><span class="line"></span><br><span class="line">0.0000891 = 8.91e-5</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-number">0.0000891</span>.toExponential() <span class="hljs-comment">// "8.91e-5"</span></span><br><span class="line"><span class="hljs-number">12345.</span>toExponential() <span class="hljs-comment">// SyntaxError: Invalid or unexpected token</span></span><br><span class="line"><span class="hljs-number">12345</span> .toExponential() <span class="hljs-comment">// "1.2345e+4"</span></span><br><span class="line"><span class="hljs-number">12345.0</span>.toExponential() <span class="hljs-comment">// "1.2345e+4"</span></span><br></pre></td></tr></table></figure><p><code>12345.toExponential()</code>이 SyntaxError를 발생시키는 이유는 무엇일까? 다른 객체와 달리 숫자값 뒤의 <code>.</code>는 2가지 의미를 가진다.</p><ol><li>부동소숫점의 소숫점 구분 기호</li><li>객체 프로퍼티에 접근하기 위한 마침표 표기법(Dot Notation)</li></ol><p>자바스크립트 엔진은 숫자 뒤의 <code>.</code>를 부동 소숫점 숫자의 일부로 해석한다. 따라서 12345.<code>toExponential()</code>이 숫자가 아니기 때문에 문법 오류로 SyntaxError가 발생하는 것이다.</p><p>그렇다면 <code>12345 .toExponential()</code>이 에러를 발생시키지 않는 이유는 무엇일까? <code>.</code>가 숫자 바로 뒤에 오는 것이 아니기 때문에 객체 프로퍼티 접근을 위한 Dot Notation으로 해석했기 때문이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Object</span>         .prototype === <span class="hljs-built_in">Object</span>.prototype; <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-built_in">Object</span>.                 prototype === <span class="hljs-built_in">Object</span>.prototype; <span class="hljs-comment">//true</span></span><br><span class="line"><span class="hljs-built_in">Object</span>         .     prototype === <span class="hljs-built_in">Object</span>.prototype; <span class="hljs-comment">// true</span></span><br><span class="line"><span class="hljs-comment">// 띄어쓰기는 Dot Notation에 영향을 주지 않지만 굳이 그렇게 써야할 필요가 없다.</span></span><br></pre></td></tr></table></figure><p>정수 리터럴에 Number.prototype의 메소드를 사용할 경우 아래처럼 괄호로 묶는 것이 권장된다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-number">12345</span>).toExponential()</span><br></pre></td></tr></table></figure><h3 id="1-3-6-Number-prototype-toFixed-fractionDigits-number-string-ES3"><a href="#1-3-6-Number-prototype-toFixed-fractionDigits-number-string-ES3" class="headerlink" title="1.3.6. Number.prototype.toFixed(fractionDigits?: number): string ES3"></a>1.3.6. Number.prototype.toFixed(fractionDigits?: number): string <sup>ES3</sup></h3><p>Number.prototype.toFixed() 메소드는 parameter로 지정된 소숫점 자리를 반올림해서 문자열로 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> num = <span class="hljs-number">12345.6789</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// default: 0</span></span><br><span class="line"><span class="hljs-comment">// 소숫점 이하 반올림</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toFixed()); <span class="hljs-comment">// '12346'</span></span><br><span class="line"><span class="hljs-comment">// 소숫점 이하 1자리수에서 반올림</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">1</span>)); <span class="hljs-comment">// '12345.7'</span></span><br><span class="line"><span class="hljs-comment">// 소숫점 이하 2자리수에서 반올림</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">2</span>)); <span class="hljs-comment">// '12345.68'</span></span><br><span class="line"><span class="hljs-comment">// 소숫점 이하 3자리수에서 반올림</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">3</span>)); <span class="hljs-comment">// '12345.679'</span></span><br><span class="line"><span class="hljs-comment">// 소숫점 이하 4자리수에서 반올림</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">4</span>)); <span class="hljs-comment">// '12345.6789'</span></span><br></pre></td></tr></table></figure><h2 id="1-3-7-Number-prototype-toPrecision-precision-number-string-ES3"><a href="#1-3-7-Number-prototype-toPrecision-precision-number-string-ES3" class="headerlink" title="1.3.7. Number.prototype.toPrecision(precision?: number): string ES3"></a>1.3.7. Number.prototype.toPrecision(precision?: number): string <sup>ES3</sup></h2><p>Number.prototype.toPrecision() 메소드는 parameter로 지정된 전체 자릿수(소숫점 자리 아님)까지만 유효하도록 나머지 자릿수를 반올림해서 문자열로 리턴한다. 표현할 수 없는 경우 지수 표기법(Exponential Notation)으로 결과를 반올림한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> num = <span class="hljs-number">12345.6789</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// default: 전체 자릿수</span></span><br><span class="line"><span class="hljs-comment">// 전체 자릿수 유효</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toPrecision()); <span class="hljs-comment">// '12345.6789'</span></span><br><span class="line"><span class="hljs-comment">// 전체 1 자릿수만 유효</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">1</span>)); <span class="hljs-comment">// '1e+4'</span></span><br><span class="line"><span class="hljs-comment">// 전체 2 자릿수만 유효</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">2</span>)); <span class="hljs-comment">// '1.2e+4'</span></span><br><span class="line"><span class="hljs-comment">// 전체 3 자릿수만 유효</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">3</span>)); <span class="hljs-comment">// '1.23e+4'</span></span><br><span class="line"><span class="hljs-comment">// 전체 4 자릿수만 유효</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">4</span>)); <span class="hljs-comment">// '1.235e+4'</span></span><br><span class="line"><span class="hljs-comment">// 전체 5 자릿수만 유효</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">5</span>)); <span class="hljs-comment">// '12346'</span></span><br></pre></td></tr></table></figure><h3 id="1-3-8-Number-prototype-toString-radix-number-string-ES1"><a href="#1-3-8-Number-prototype-toString-radix-number-string-ES1" class="headerlink" title="1.3.8. Number.prototype.toString(radix?: number): string ES1"></a>1.3.8. Number.prototype.toString(radix?: number): string <sup>ES1</sup></h3><p>Number.prototype.toString() 메소드는 숫자를 문자열로 변환해서 리턴한다. radix로 진법(2 ~ 36: 기본 10진수)을 지정할 수 있지만 생략 가능하다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> num = <span class="hljs-number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toString()); <span class="hljs-comment">// '17'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">2</span>)); <span class="hljs-comment">// '10001'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">8</span>)); <span class="hljs-comment">// '21'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">16</span>)); <span class="hljs-comment">// '11'</span></span><br></pre></td></tr></table></figure><h3 id="1-3-9-Number-prototype-valueOf-number-ES1"><a href="#1-3-9-Number-prototype-valueOf-number-ES1" class="headerlink" title="1.3.9. Number.prototype.valueOf(): number ES1"></a>1.3.9. Number.prototype.valueOf(): number <sup>ES1</sup></h3><p>Number.prototype.valueOf() 메소드는 Number 객체의 primitive value를 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> numObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">'30'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> num = numObj.valueOf();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typeof</span> numObj; <span class="hljs-comment">// object</span></span><br><span class="line"><span class="hljs-keyword">typeof</span> num; <span class="hljs-comment">// number</span></span><br></pre></td></tr></table></figure><h1 id="2-Math-Object"><a href="#2-Math-Object" class="headerlink" title="2. Math Object"></a>2. Math Object</h1><p>Math Object : 수학 상수와 함수를 위한 프로퍼티와 메소드를 제공하는 built-in 객체.</p><p>Math 객체의 프로퍼티와 메소드는 전부 static 프로퍼티와 메소드이다. 생성자 함수 또한 존재하지 않아 직접 Math.property, Math.method()로 호출하면 된다.</p><h2 id="2-1-Math-Property"><a href="#2-1-Math-Property" class="headerlink" title="2.1. Math Property"></a>2.1. Math Property</h2><h2 id="2-1-1-Math-PI"><a href="#2-1-1-Math-PI" class="headerlink" title="2.1.1.Math.PI"></a>2.1.1.Math.PI</h2><p>Math.PI는 PI값(&pi;)을 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.PI; <span class="hljs-comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Math-Method"><a href="#2-2-Math-Method" class="headerlink" title="2.2. Math Method"></a>2.2. Math Method</h2><h3 id="2-2-1-Math-abs-x-number-number-ES1"><a href="#2-2-1-Math-abs-x-number-number-ES1" class="headerlink" title="2.2.1. Math.abs(x: number): number ES1"></a>2.2.1. Math.abs(x: number): number <sup>ES1</sup></h3><p>Math.abs() 메소드는 숫자의 절댓값(Absolute Value)을 리턴한다. Number.prototype의 메소드처럼 엄격한 type 검사를 하지 않는다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.abs(<span class="hljs-number">-1</span>); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(<span class="hljs-string">'-1'</span>); <span class="hljs-comment">// 1</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(-<span class="hljs-literal">Infinity</span>); <span class="hljs-comment">// Infinity</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(<span class="hljs-string">'-Infinity'</span>); <span class="hljs-comment">// Infinity</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs([]); <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(&#123;&#125;); <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(<span class="hljs-string">'string'</span>); <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.abs(); <span class="hljs-comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-Math-round-x-number-number-ES1"><a href="#2-2-2-Math-round-x-number-number-ES1" class="headerlink" title="2.2.2. Math.round(x: number): number ES1"></a>2.2.2. Math.round(x: number): number <sup>ES1</sup></h3><p>Math.round() 메소드는 숫자를 가장 인접한 정수로 올림 또는 내림 한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.round(<span class="hljs-number">10.4</span>); <span class="hljs-comment">// 10</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.round(<span class="hljs-number">10.499999999999999</span>); <span class="hljs-comment">// 10</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.round(<span class="hljs-number">10.4999999999999992</span>); <span class="hljs-comment">// 11</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.round(<span class="hljs-number">-10.5</span>); <span class="hljs-comment">// -10</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.round(<span class="hljs-number">-10.500000000000001</span>); <span class="hljs-comment">// -11</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.round(<span class="hljs-number">-10.6</span>); <span class="hljs-comment">// -11</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-Math-sqrt-x-number-number-ES1"><a href="#2-2-3-Math-sqrt-x-number-number-ES1" class="headerlink" title="2.2.3. Math.sqrt(x: number): number ES1"></a>2.2.3. Math.sqrt(x: number): number <sup>ES1</sup></h3><p>Math.sqrt() 메소드는 숫자의 양의 제곱근(square root)을 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-number">16</span>); <span class="hljs-comment">// 4</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-number">-16</span>); <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-string">'16'</span>); <span class="hljs-comment">// 4</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-literal">Infinity</span>); <span class="hljs-comment">// Infinity</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.sqrt([]); <span class="hljs-comment">// 0</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.sqrt(&#123;&#125;); <span class="hljs-comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-Math-ceil-x-number-number-ES1"><a href="#2-2-4-Math-ceil-x-number-number-ES1" class="headerlink" title="2.2.4. Math.ceil(x: number): number ES1"></a>2.2.4. Math.ceil(x: number): number <sup>ES1</sup></h3><p>Math.ceil() 메소드는 숫자를  자신과 가장 가까우면서 큰 정수로 올림한다. Ceil은 천장을 뜻하니 올림한다고 생각하자.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">3.14</span>); <span class="hljs-comment">// 4</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">-3.14</span>); <span class="hljs-comment">// -3</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-Math-floor-x-number-number-ES1"><a href="#2-2-5-Math-floor-x-number-number-ES1" class="headerlink" title="2.2.5. Math.floor(x: number): number ES1"></a>2.2.5. Math.floor(x: number): number <sup>ES1</sup></h3><p>Math.floor() 메소드는 숫자를 자신과 가장 가까우면서 작은 정수로 내림한다. Floor는 바닥을 뜻한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">3.14</span>); <span class="hljs-comment">//3</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">-3.14</span>); <span class="hljs-comment">// -4</span></span><br></pre></td></tr></table></figure><h3 id="2-2-6-Math-random-number-ES1"><a href="#2-2-6-Math-random-number-ES1" class="headerlink" title="2.2.6. Math.random(): number ES1"></a>2.2.6. Math.random(): number <sup>ES1</sup></h3><p>Math.random() 메소드는 0 이상 1 미만의 임의의 숫자를 리턴한다. 0은 포함하지만 1은 포함하지 않는다는 것에 유의하자. Math.random() 메소드의 결과에 원하는 숫자를 곱해서 PesudoRandom 수를 자유자재로 얻을 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.random(); <span class="hljs-comment">// 0 이상 1 미만의 소수</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1부터 10까지의 랜덤 정수</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-7-Math-pow-x-number-y-number-number-ES1"><a href="#2-2-7-Math-pow-x-number-y-number-number-ES1" class="headerlink" title="2.2.7. Math.pow(x: number, y: number): number ES1"></a>2.2.7. Math.pow(x: number, y: number): number <sup>ES1</sup></h3><p>Math.pow(base, exponent) 메소드는 첫번째 argument를 밑(base), 두번째 argument를 지수(exponent)로 한 거듭제곱을 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// 256</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ES7 Exponentiation Operator</span></span><br><span class="line"><span class="hljs-number">2</span> ** <span class="hljs-number">8</span>; <span class="hljs-comment">// 256</span></span><br></pre></td></tr></table></figure><h3 id="2-2-8-Math-max-…-values-number-number-ES1"><a href="#2-2-8-Math-max-…-values-number-number-ES1" class="headerlink" title="2.2.8. Math.max(… values: number[]): number ES1"></a>2.2.8. Math.max(… values: number[]): number <sup>ES1</sup></h3><p>Math.max() 메소드는 argument들 중 가장 큰 수를 리턴한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Math</span>.max(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 5</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.max([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]); <span class="hljs-comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, arr); <span class="hljs-comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ES6 Spread Opertator</span></span><br><span class="line"><span class="hljs-built_in">Math</span>.max( ... arr); <span class="hljs-comment">// 5</span></span><br></pre></td></tr></table></figure><p>Math.max 의 argument로 배열을 전달할 수 없기 때문에 Function.prototype.apply() 메소드를 이용해서 배열 argument를 전달할 수 있었다.</p><p>그러나 ES6에서는 Spread Operator의 도입으로 apply() 메소드를 사용하지 않아도 배열을 열거된 list argument처럼 풀어서 전달할 수 있다.</p><h3 id="2-2-9-Math-min-…-values-number-number-ES1"><a href="#2-2-9-Math-min-…-values-number-number-ES1" class="headerlink" title="2.2.9. Math.min(… values: number[]): number ES1"></a>2.2.9. Math.min(… values: number[]): number <sup>ES1</sup></h3><p>Math.min() 메소드는 argument들 중 가장 작은 수를 리턴한다. 사용법은 Math.max와 같다.</p><h1 id="3-String-Object"><a href="#3-String-Object" class="headerlink" title="3. String Object"></a>3. String Object</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Number-wrapper-object&quot;&gt;&lt;a href=&quot;#1-Number-wrapper-object&quot; class=&quot;headerlink&quot; title=&quot;1. Number wrapper object&quot;&gt;&lt;/a&gt;1. Number wrappe
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Number" scheme="https://sub2n.github.io/tags/Number/"/>
    
      <category term="Math" scheme="https://sub2n.github.io/tags/Math/"/>
    
      <category term="String" scheme="https://sub2n.github.io/tags/String/"/>
    
      <category term="Wrapper" scheme="https://sub2n.github.io/tags/Wrapper/"/>
    
  </entry>
  
  <entry>
    <title>190515-TIL</title>
    <link href="https://sub2n.github.io/2019/05/15/190515-TIL/"/>
    <id>https://sub2n.github.io/2019/05/15/190515-TIL/</id>
    <published>2019-05-15T07:38:04.000Z</published>
    <updated>2019-05-15T08:51:59.648Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h4><ul><li>자바스크립트의 Strict Mode, 전역 객체 window, this 바인딩에 대해서 배웠다.</li><li>Underscore의 each 메소드를 구현했다.</li><li>자바스크립트 알고리즘 문제 3개를 풀었다.<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// if문 사용</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evenOrOdd</span>(<span class="hljs-params">num</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span>) &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">'Odd'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-string">'Even'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3항 연산자 사용</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evenOrOdd2</span>(<span class="hljs-params">num</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> ? <span class="hljs-string">'Odd'</span> : <span class="hljs-string">'Even'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(evenOrOdd(<span class="hljs-number">42</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(evenOrOdd(<span class="hljs-number">55</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(evenOrOdd2(<span class="hljs-number">288</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(evenOrOdd2(<span class="hljs-number">25</span>));</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// #2. 1 ~ 10,000의 숫자 중 8이 등장하는 횟수 구하기 (Google)</span></span><br><span class="line"><span class="hljs-comment">// 1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가? 이를 구하는 함수를 완성하라.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 단, 8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다. 예를 들어 8808은 3, 8888은 4로 카운팅 해야 한다.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// (hint) 문자열 중 n번째에 있는 문자 : str.charAt(n) or str[n]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCount8</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">let</span> concatString = <span class="hljs-string">''</span>;</span><br><span class="line"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10001</span>; i++) &#123;</span><br><span class="line">  concatString += i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; concatString.length; j++) &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (concatString[j] === <span class="hljs-string">'8'</span>) &#123;</span><br><span class="line">    count += <span class="hljs-number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(getCount8()); <span class="hljs-comment">// 4000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3. 문자열 다루기</span></span><br><span class="line"><span class="hljs-comment">// alphaString46 함수는 문자열 s를 매개변수로 입력받는다. s의 길이가 4 ~ 6이고, 숫자로만 구성되어 있는지 확인하는 alphaString46 함수를 완성하라.</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 예를 들어 s가 'a234'이면 false를 리턴하고 '1234'라면 true를 리턴한다.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">alphaString46</span>(<span class="hljs-params">s</span>) </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (s === <span class="hljs-literal">undefined</span> || s.length &lt; <span class="hljs-number">4</span> || s.length &gt; <span class="hljs-number">6</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">  <span class="hljs-comment">// eslint-disable-next-line no-restricted-globals</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(s[i])) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(alphaString46(<span class="hljs-string">'1234'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(alphaString46(<span class="hljs-string">'9014'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(alphaString46(<span class="hljs-string">'723'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(alphaString46(<span class="hljs-string">'a234'</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(alphaString46(<span class="hljs-string">''</span>));</span><br><span class="line"><span class="hljs-built_in">console</span>.log(alphaString46());</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;자바스크립트의 Stri
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Underscore: each</title>
    <link href="https://sub2n.github.io/2019/05/15/Underscore-each/"/>
    <id>https://sub2n.github.io/2019/05/15/Underscore-each/</id>
    <published>2019-05-15T04:08:16.000Z</published>
    <updated>2019-05-16T09:49:08.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/48080762/57747874-59ba2980-7712-11e9-8a09-b7f1825254e4.png" alt="each pass"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_.each = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">collection, iterator</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(collection)) &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; collection.length; index++) &#123;</span><br><span class="line">      iterator(collection[index], <span class="hljs-built_in">Number</span>(index), collection);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> collection) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (key !== <span class="hljs-string">'someProperty'</span>)</span><br><span class="line">        iterator(collection[key], key, collection);</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/48080762/57747874-59ba2980-7712-11e9-8a09-b7f1825254e4.png&quot; alt=&quot;each pass&quot;&gt;&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="UnderScore" scheme="https://sub2n.github.io/categories/Algorithm/UnderScore/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>20. this</title>
    <link href="https://sub2n.github.io/2019/05/15/20-this/"/>
    <id>https://sub2n.github.io/2019/05/15/20-this/</id>
    <published>2019-05-15T03:45:06.000Z</published>
    <updated>2019-05-16T05:53:03.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-this-Keyword"><a href="#1-this-Keyword" class="headerlink" title="1. this Keyword"></a>1. this Keyword</h1><p>this는 객체가 자신의 프로퍼티나 메소드를 참조하기 위한 자기 참조 변수(Self-referencing variable)이다. 함수 호출시 arguments 객체와 this가 암묵적으로 함수 내부에 전달된다. arguments 객체와 this는 함수 내부에서 지역 변수처럼 사용할 수 있다. this가 가리키는 값은 <strong>함수 호출 방식에 의해 동적으로 결정</strong>된다.</p><p>C++, Java와 같은 클래스 기반 언어에서 this는 항상 클래스로부터 생성되는 인스턴스를 가리킨다. 그러나 자바스크립트의 this는 함수가 호출되는 방식에 따라서 this에 바인딩될 객체가 동적으로 결정된다.</p><blockquote><h4 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h4><p>바인딩이란 식별자와 값을 연결하는 과정을 의미한다.</p></blockquote><p>객체 리터럴은 할당 단계에 평가되므로 객체의 식별자를 this 대신 사용할 수 있지만, 일반적이지 않다. 생성자를 이용해서 객체를 생성할 때는 인스턴트를 가리킬 식별자를 미리 알 수 없기 때문이다.</p><p>this는 객체의 프로퍼티나 메소드를 참조하기 위한 변수이므로 객체의 메소드 또는 생성자 함수에서만 의미가 있다. strict mode가 적용된 일반 함수 내부의 this에는 undefined가 바인딩 된다. 적용되지 않을 경우 일반 함수 내부에서 this는 전역 객체 window를 가리킨다.</p><blockquote><h4 id="strict-mode"><a href="#strict-mode" class="headerlink" title="strict mode"></a>strict mode</h4><p>‘use strict’;  strict mode는 자바스크립트 언어의 문법을 보다 엄격히 적용하여 기존에는 무시되던 오류를 발생시킬 가능성이 높거나 자바스크립트 엔진의 최적화 작업에 문제를 일으킬 수 있는 코드에 대해 명시적인 에러를 발생시킨다.</p></blockquote><h1 id="2-Function-call-types-and-this-Binding"><a href="#2-Function-call-types-and-this-Binding" class="headerlink" title="2. Function call types and this Binding"></a>2. Function call types and this Binding</h1><p><strong>스코프</strong>의 경우 렉시컬 스코프(Lexical Scope)는 <strong>함수 정의가 평가되어 함수 객체가 생성되는 시점</strong>에 상위 스코프가 결정된다. <strong>this</strong>에 바인딩될 객체는 <strong>함수 호출 시점</strong>에 결정된다.</p><p>함수 호출 방식은 다음과 같다.</p><ol><li>일반 함수 호출 : this는 window</li><li>메소드 호출 : this는 메소드를 호출한 객체</li><li>생성자 함수 호출 : this는 생성할 instance</li><li>Function.prototype.apply/call/bind 메소드에 의한 간접 호출 (??)</li></ol><h2 id="2-1-General-Function-Call"><a href="#2-1-General-Function-Call" class="headerlink" title="2.1. General Function Call"></a>2.1. General Function Call</h2><p><strong>일반 함수로 호출된 함수 내부의 this</strong>에는 <strong>전역 객체(Global Object)</strong>가 바인딩된다.</p><p>전역 함수는 물론 <strong>중첩 함수를 일반 함수로 호출했을 때에도 함수 내부의 this에는 전역 객체가 바인딩</strong>된다. 일반 함수에서는 this로 객체의 프로퍼티나 메소드를 참조할 일이 없으므로 this에 의미가 없다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo this: '</span>, <span class="hljs-keyword">this</span>);<span class="hljs-comment">// window</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar this: '</span>, <span class="hljs-keyword">this</span>);<span class="hljs-comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>메소드 내에서 정의한 중첩 함수일지라도 <strong>일반 함수로 호출되면 중첩 함수의 this는 전역 객체</strong>이다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo this: '</span>, <span class="hljs-keyword">this</span>);<span class="hljs-comment">// &#123;foo: f&#125;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar this: '</span>, <span class="hljs-keyword">this</span>);<span class="hljs-comment">// window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// 메소드 내부에서 정의한 중첩 함수라도 일반 함수로 호출하면 this에 전역 객체가 바인딩된다.</span></span><br><span class="line">    bar();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo();</span><br></pre></td></tr></table></figure><p>마찬가지로 콜백 함수 내부의 this에도 전역 객체가 바인딩된다. 정리하면 일반 함수로 호출된 모든 함수(중첩 함수, 콜백 함수 포함) 내부의 this에는 전역 객체가 바인딩된다.</p><p>메소드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메소드의 this 바인딩과 일치시키기 위한 방법은 다음과 같다.</p><ol><li><p>this를 변수에 저장하고 콜백 함수의 this를 변수로 대체 </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="hljs-number">100</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    cosnt that = <span class="hljs-keyword">this</span>;</span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(that.value); <span class="hljs-comment">// 100</span></span><br><span class="line">    &#125;, <span class="hljs-number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>Function.prototype.apply, Function.prototype.call, Function.prototype.bind 메소드 이용</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="hljs-number">100</span>,</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="hljs-comment">// bind method의 argument를 콜백 함수의 this로 바인딩한다.</span></span><br><span class="line">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value); <span class="hljs-comment">// 100</span></span><br><span class="line">    &#125;.bind(<span class="hljs-keyword">this</span>), <span class="hljs-number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-Method-Call"><a href="#2-2-Method-Call" class="headerlink" title="2.2. Method Call"></a>2.2. Method Call</h2><p><strong>메소드 내부의 this는 메소드를 호출한 객체</strong>, 즉 메소드 호출시 (.) 연산자 앞에 오는 객체에 바인딩된다.</p><p>메소드를 소유한 객체가 아닌, 메소드를 호출한 객체에 바인딩된다는 것을 주의해야 한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> me = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'Park'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> you = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Kim'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">you.getName = me.getName;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(me.getName()); <span class="hljs-comment">// "Park"</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(you.getName()); <span class="hljs-comment">// "Kim"</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Constructor-Function-Call"><a href="#2-3-Constructor-Function-Call" class="headerlink" title="2.3. Constructor Function Call"></a>2.3. Constructor Function Call</h2><p>생성자 함수 내부의 this에는 생성자 함수가 생성할 instance가 바인딩된다.</p><p>생성자 함수는 객체(instance)를 생성하는 함수로, new 연산자와 함께 호출되면 빈 객체를 만들고 this에 바인딩한다. 연산을 하며 this 객체를 완성시킨 후 this를 리턴한다.</p><p>함수가 new 연산자와 함께 호출되지 않아 일반 함수로 동작할 경우 this는 전역 객체를 가리킨다.</p><h2 id="2-4-Indirect-Call-by-Function-prototype-apply-call-bind-method"><a href="#2-4-Indirect-Call-by-Function-prototype-apply-call-bind-method" class="headerlink" title="2.4. Indirect Call by Function.prototype.apply / call / bind method"></a>2.4. Indirect Call by Function.prototype.apply / call / bind method</h2><h3 id="apply-call"><a href="#apply-call" class="headerlink" title="apply, call"></a>apply, call</h3><p>Function.prototype의 메소드 apply와 call은 argument로 this와 arguments list를 전달받아 함수를 호출한다. Function 생성자 함수를 constructor 프로퍼티로 가리키는 모든 함수가 Function.prototype.apply와 call을 상속받아 사용할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 주어진 this 바인딩과 인수 리스트 배열을 사용하여 함수를 호출한다.</span></span><br><span class="line"><span class="hljs-comment"> * @param thisArg - this로 사용될 객체</span></span><br><span class="line"><span class="hljs-comment"> * @param argsArray - 함수에게 전달할 인수 리스트 배열</span></span><br><span class="line"><span class="hljs-comment"> * @returns 호출된 함수의 반환값</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-built_in">Function</span>.prototype.apply(thisArg, [argsArray]))</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * 주어진 this 바인딩과 인수 리스트를 사용하여 함수를 호출한다.</span></span><br><span class="line"><span class="hljs-comment"> * @param thisArg - this로 사용될 객체</span></span><br><span class="line"><span class="hljs-comment"> * @param arg1, arg2, ... - 함수에게 전달할 인수 리스트</span></span><br><span class="line"><span class="hljs-comment"> * @returns 호출된 함수의 반환값</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-built_in">Function</span>.prototype.call(thisArg, arg1, arg2, ...))</span><br></pre></td></tr></table></figure><p>두 메소드의 차이는,</p><ul><li>apply 메소드는 호출할 함수의 arguments를 배열로 묶어 전달한다.</li><li>call 메소드는 호출할 함수의 arguments를 쉼표로 구분한 리스트 형식으로 전달한다.</li></ul><p>apply와 call은 호출할 함수에 argument를 전달하는 방식만 다를 뿐, this로 사용할 객체와 argument를 전달하며 함수를 호출한다.</p><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind 메소드는 메소드의 this와, 메소드 내부의 중첩함수 또는 콜백 함수의 this가 불일치하는 문제를 해결할 때 사용된다. 콜백 함수 foo는 외부 함수 callName을 돕는 헬퍼 함수(보조 함수)의 역할을 해야하기 때문에 외부 함수 내부의 this와 콜백함수 내부의 this가 다르면 문제가 발생한다.</p><p>이 때 bind 메소드를 사용해서 this를 일치시킨다. apply와 call 메소드 또한 사용할 수 있다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.callName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) </span>&#123;</span><br><span class="line">    callback.bind(<span class="hljs-keyword">this</span>)();</span><br><span class="line">    <span class="hljs-comment">// callback.apply(this);</span></span><br><span class="line">    <span class="hljs-comment">// callback.apply(this);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bind로 this를 전달한 callback을 실행할 수도 있고, apply나 call로 this를 전달하며 동시에 호출할 수도 있다.</p><p>정리하면 this 바인딩은 다음과 같이 실행된다.</p><table><thead><tr><th style="text-align:center">함수 호출 방식</th><th style="text-align:center">this 바인딩</th></tr></thead><tbody><tr><td style="text-align:center">일반 함수 호출</td><td style="text-align:center">전역 객체</td></tr><tr><td style="text-align:center">메소드 호출</td><td style="text-align:center">메소드를 호출한 객체</td></tr><tr><td style="text-align:center">생성자 함수 호출</td><td style="text-align:center">생성자 함수가 생성할 instance</td></tr><tr><td style="text-align:center">Function.prototype.apply/call/bind 메소드에 의한 간접 호출</td><td style="text-align:center">Function.prototype.apply/call/bind 메소드에 argument로 전달한 객체</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-this-Keyword&quot;&gt;&lt;a href=&quot;#1-this-Keyword&quot; class=&quot;headerlink&quot; title=&quot;1. this Keyword&quot;&gt;&lt;/a&gt;1. this Keyword&lt;/h1&gt;&lt;p&gt;this는 객체가 자신의 프로퍼티나 
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="this" scheme="https://sub2n.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>19. Global Object</title>
    <link href="https://sub2n.github.io/2019/05/15/19-Global-Object/"/>
    <id>https://sub2n.github.io/2019/05/15/19-Global-Object/</id>
    <published>2019-05-15T03:43:39.000Z</published>
    <updated>2019-05-15T06:03:04.310Z</updated>
    
    <content type="html"><![CDATA[<p>전역 객체는 어떤 객체보다도 먼저 생성하고 어느 객체에도 속하지 않는 최상위 객체.</p><ul><li><p>client side 환경(브라우저)에서는 window</p></li><li><p>server side 환경에서는 global 객체</p></li></ul><p>전역 객체는</p><ul><li>개발자가 의도적으로 생성할 수 없다.</li><li>전역 객체의 프로퍼티를 참조할 때 window를 생략할 수 있다.</li><li>전역 객체는 Object, String, Number,Boolean, Function, Array RegExp, Date, Math, Promise 등 모든 built-in 객체를 프로퍼티로 가지고 있다.</li><li>브라우저의 window 객체는 DOM, BOM, Canvas, XMLHttpRequest, Fetch, SVG, Web Storage 등 Client side Web API를 프로퍼티로 소유한다.</li><li>var 키워드로 선언한 전역 변수와 암묵적 전역 변수, 전역 함수는 전역 객체의 프로퍼티가 된다. (단, let이나 const 키워드로 선언한 전역 변수는 전역 객체  window의 프로퍼티가 아니다.)</li><li>전역 객체의 프로퍼티와 메소드는 window를 생략하고 참조/호출 할 수 있으므로 전역 함수처럼 사용할 수 있다.</li></ul><h1 id="1-Global-Property"><a href="#1-Global-Property" class="headerlink" title="1. Global Property"></a>1. Global Property</h1><p>전역 프로퍼티는 전역 객체의 프로퍼티이다.</p><h2 id="1-1-Infinity"><a href="#1-1-Infinity" class="headerlink" title="1.1. Infinity"></a>1.1. Infinity</h2><p>Infinity 프로퍼티는 양/음의 무한대를 나타내는 Number Infinity를 갖는다. 숫자를 0으로 나누면 NaN이 될 것 같지만 무한대를 나타낸다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>/<span class="hljs-number">0</span>);<span class="hljs-comment">// Infinity</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>/<span class="hljs-number">-0</span>);<span class="hljs-comment">// -Infinity</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">Infinity</span>);<span class="hljs-comment">// number</span></span><br></pre></td></tr></table></figure><h2 id="1-2-NaN"><a href="#1-2-NaN" class="headerlink" title="1.2. NaN"></a>1.2. NaN</h2><p>NaN(Not-a-Number) 프로퍼티는 숫자가 아님을 나타내는 Number NaN을 갖는다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">'string'</span>));<span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> * <span class="hljs-string">'string'</span>); <span class="hljs-comment">// NaN</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span>);<span class="hljs-comment">// number</span></span><br></pre></td></tr></table></figure><h2 id="1-3-undefined"><a href="#1-3-undefined" class="headerlink" title="1.3. undefined"></a>1.3. undefined</h2><p>undefined 프로퍼티는 primitive type undefined를 값으로 갖는다.</p><h1 id="2-Global-Function"><a href="#2-Global-Function" class="headerlink" title="2. Global Function"></a>2. Global Function</h1><p>전역 함수는 전역 객체의 메소드이다. 애플리케이션 전역에서 호출할 수 있다.</p><h2 id="2-1-eval"><a href="#2-1-eval" class="headerlink" title="2.1. eval"></a>2.1. eval</h2><p>문자열로 코드를 주면 그 코드를 실행하는데, 평가시 자신의 스코프를 만들고 상위 스코프로 변형시켜 비용이 많이 든다.</p><h2 id="2-2-isFinite"><a href="#2-2-isFinite" class="headerlink" title="2.2. isFinite"></a>2.2. isFinite</h2><p>parameter에 전달된 값이 정상적인 유한수인지 검사해서 Boolean을 리턴한다. 숫자가 아닌 값 전달받으면 숫자 타입으로 변환 후 검사를 수행한다.</p><h2 id="2-3-isNaN"><a href="#2-3-isNaN" class="headerlink" title="2.3. isNaN"></a>2.3. isNaN</h2><p>parameter에 전달된 값이 NaN인지 검사해서 Boolean을 리턴한다. 숫자가 아닌 값 전달받으면 숫자 타입으로 변환 후 검사를 수행한다.</p><h2 id="2-4-parseFloat"><a href="#2-4-parseFloat" class="headerlink" title="2.4. parseFloat"></a>2.4. parseFloat</h2><p>parameter에 전달된 <strong>String을 부동소숫점 숫자(floating point number)로</strong> 변환하여 반환한다.</p><h2 id="2-5-parseInt"><a href="#2-5-parseInt" class="headerlink" title="2.5. parseInt"></a>2.5. parseInt</h2><p>parameter에 전달된 <strong>String을 정수형 숫자(Integer)로</strong> parsing하여 리턴한다. 리턴값은 10진수이다.</p><p>10진수 숫자를 10진수가 아닌 수의 문자열로 변환하고 싶을 때는 Number.prototype.toString 메소드를 사용한다.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> x = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x.toString(<span class="hljs-number">2</span>));<span class="hljs-comment">// '1010'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x.toString(<span class="hljs-number">8</span>));<span class="hljs-comment">// '12'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x.toString(<span class="hljs-number">16</span>));<span class="hljs-comment">// 'a'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x.toString());<span class="hljs-comment">// '10'</span></span><br></pre></td></tr></table></figure><h2 id="2-6-encodeURI-decodeURI"><a href="#2-6-encodeURI-decodeURI" class="headerlink" title="2.6. encodeURI / decodeURI"></a>2.6. encodeURI / decodeURI</h2><p>encodeURI 함수는 paremeter로 전달된 URI(Uniform Resource Identifier)를 인코딩한다.</p><blockquote><h4 id="URI-Uniform-Resource-Identifier"><a href="#URI-Uniform-Resource-Identifier" class="headerlink" title="URI (Uniform Resource Identifier)"></a>URI (Uniform Resource Identifier)</h4><p>인터넷에 있는 자원을 나타내는 유일한 주소. URI의 하위 개념으로 URL, URN이 있다.</p><ul><li>Scheme(protocol) : 통신 방식</li><li>Host : 찾아갈 server의 주소<ul><li>localhost : 컴퓨터 한 대에서 client와 server를 동시에 돌릴 때 server를 의미. Port 번호로 server에 고유 번호를 매김</li></ul></li><li>Port : port 번호</li><li>Path : file 경로<ul><li>REST API : 서버와 통신시 메소드 호출방식처럼 사용</li></ul></li><li>Query Parameter : ?key=value&amp;key=value&amp;key=value</li><li>Fragment : # page 내 이동에서 씀</li></ul></blockquote><p>인코딩이랑 URI의 문자들을 Escape 처리 하는 것을 의미한다. Escape 처리는 네트워크를 통해 정보를 공유할 때 ASCII Character-set으로 변환하는 것이다. 한글은 %EC%9E%90 등과 같이 인코딩 된다.</p><p>decodeURI 함수는 paremeter로 전달된 encoded URI을 전달받아 escape 처리 되기 전으로 디코딩한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;전역 객체는 어떤 객체보다도 먼저 생성하고 어느 객체에도 속하지 않는 최상위 객체.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;client side 환경(브라우저)에서는 window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;server side 환경에서는 global 객
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="window" scheme="https://sub2n.github.io/tags/window/"/>
    
  </entry>
  
</feed>
