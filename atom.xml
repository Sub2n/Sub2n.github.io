<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>수빈 개발블로그</title>
  
  <subtitle>Sub2n Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sub2n.github.io/"/>
  <updated>2019-04-23T09:34:28.905Z</updated>
  <id>https://sub2n.github.io/</id>
  
  <author>
    <name>Subin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recursion</title>
    <link href="https://sub2n.github.io/2019/04/23/Recursion/"/>
    <id>https://sub2n.github.io/2019/04/23/Recursion/</id>
    <published>2019-04-23T09:31:17.000Z</published>
    <updated>2019-04-23T09:34:28.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Recursion-재귀"><a href="#Recursion-재귀" class="headerlink" title="Recursion (재귀)"></a>Recursion (재귀)</h1><ol><li>함수 호출 도중에 자기 자신을 다시 호출하는 것</li><li><p>Base case가 필수 (기초, 종료, 탈출 조건)</p><p> Base case가 없으면 무한으로 자기 자신을 호출해서 stack overflow가 된다.</p></li></ol><h2 id="재귀함수를-만드는-방법"><a href="#재귀함수를-만드는-방법" class="headerlink" title="재귀함수를 만드는 방법"></a>재귀함수를 만드는 방법</h2><ol><li>패턴을 찾는다. 즉, 점화식(Induction)을 만든다.</li><li>Base case를 만든다.</li></ol><h2 id="예제1-Factorial"><a href="#예제1-Factorial" class="headerlink" title="예제1: Factorial !"></a>예제1: Factorial !</h2><ul><li><p>Basis </p><p> 0! = 1! = 1</p></li><li><p>Induction Step </p><p>n! = (n-1) <em> (n-2) </em> (n-3) <em> … 3 </em> 2 * 1</p></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">factorial</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> n*factorial(n<span class="hljs-number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="예제2-Fibonacci"><a href="#예제2-Fibonacci" class="headerlink" title="예제2: Fibonacci"></a>예제2: Fibonacci</h2><ul><li><p>Basis</p><p>  fib(0) = fib(1) = 1</p></li><li><p>Induction Step</p><p>  fib(n) = fib(n-1) + fib(n-2)</p></li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-1</span>) + fib(n<span class="hljs-number">-2</span>)</span><br></pre></td></tr></table></figure><h2 id="Fibonacci-Dynamic-Programming"><a href="#Fibonacci-Dynamic-Programming" class="headerlink" title="Fibonacci Dynamic Programming"></a>Fibonacci Dynamic Programming</h2><ol><li>Memorization (Top Down)</li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = [<span class="hljs-number">-1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>)]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib_memorize</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> f[n] &gt; <span class="hljs-number">-1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> f[n]</span><br><span class="line">    <span class="hljs-keyword">elif</span> n &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">        f[n] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        f[n] = fib_memorize(n<span class="hljs-number">-1</span>) + fib_memorize(n<span class="hljs-number">-2</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><ol start="2"><li>Bottom Up</li></ol><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f2 = [<span class="hljs-number">-1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>)]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib_bottup</span><span class="hljs-params">(n)</span>:</span></span><br><span class="line">    f2[<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):</span><br><span class="line">        f[n] = f[n<span class="hljs-number">-1</span>] + f[n<span class="hljs-number">-2</span>]</span><br><span class="line">    <span class="hljs-keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><h2 id="예제3-Hanoi-Tower"><a href="#예제3-Hanoi-Tower" class="headerlink" title="예제3: Hanoi Tower"></a>예제3: Hanoi Tower</h2><p><a href="https://www.mathsisfun.com/games/towerofhanoi.html" target="_blank" rel="noopener">Play Tower of Hanoi</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Recursion-재귀&quot;&gt;&lt;a href=&quot;#Recursion-재귀&quot; class=&quot;headerlink&quot; title=&quot;Recursion (재귀)&quot;&gt;&lt;/a&gt;Recursion (재귀)&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;함수 호출 도중에 자기 자신을 다시 
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Computer-Engineering/Algorithm/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190423-TIL</title>
    <link href="https://sub2n.github.io/2019/04/23/190423-TIL/"/>
    <id>https://sub2n.github.io/2019/04/23/190423-TIL/</id>
    <published>2019-04-23T09:09:35.000Z</published>
    <updated>2019-04-23T09:27:41.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h3><ul><li>Big-O notation을 다시 한 번 정리하며 성능순으로 정리했다.</li></ul><ol><li>O(1) : 상수 시간<ul><li>엄청 빠름</li><li>array의 indexing, linked list의 insert, delete</li></ul></li><li>O(logn) : 로그 시간<ul><li>Binary Search Tree의 insert, search, delete</li></ul></li><li>O(n) : 선형 시간<ul><li>linked list의 search, 특정 array의 insert, delete</li></ul></li><li>O(nlogn) : 선형 로그 시간<ul><li>quicksort, merge sort</li><li>comparision sorting의 경우 quick sort보다 성능 좋을 수 없다.</li></ul></li><li>O(n<sup>2</sup>) : 지수시간(?)<ul><li>bubble sort, select sort, insert sort 등</li></ul></li></ol><ul><li><p>Memory | Performance of fbstring</p><p>Memory에 관련된 영상 하나를 보고 Memory 공부를 했다. <a href="https://www.youtube.com/watch?v=kPR8h4-qZdk" target="_blank" rel="noopener">Performance of fbstring</a></p><p>나는 전공 수업에서 OS를 들으며 배웠던 내용이라, 그 때 배웠던 것들을 처음부터 정리하며 복습 했다.</p></li><li><p>Process and Thread</p><p>어렵고 다룰 게 많은 주제인데 한 번에 후다닥 나가는 느낌이라 아쉬웠다. OS를 복습할 겸 Chapter 별로 정리해 포스팅할 계획을 세웠다.</p></li><li><p>Process와 Memory 개념 정리</p></li><li><p>Codewars 5kyu Sum of Pairs 문제를 풀었다. 자꾸 Timeout이 나서 성능을 좋게 만들려고 최대한 노력했다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190422-TIL</title>
    <link href="https://sub2n.github.io/2019/04/22/190422-TIL/"/>
    <id>https://sub2n.github.io/2019/04/22/190422-TIL/</id>
    <published>2019-04-22T12:09:23.000Z</published>
    <updated>2019-04-22T12:50:46.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h3><ul><li><p>Python Functions(호출 방식, stack, map filter 등)을 배우고 posting으로 정리했다.</p></li><li><p>LeetCode 알고리즘을 풀고, 알고리즘 스터디를 했다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>First-class Function</title>
    <link href="https://sub2n.github.io/2019/04/22/First-class-Function/"/>
    <id>https://sub2n.github.io/2019/04/22/First-class-Function/</id>
    <published>2019-04-22T12:05:45.000Z</published>
    <updated>2019-04-22T12:08:35.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="First-class-Function"><a href="#First-class-Function" class="headerlink" title="First-class Function"></a>First-class Function</h1><ul><li>프로그래밍 언어 중 함수를 다른 변수와 동일하게 다루는 언어를 함수우선순위(First-class Functions) 가졌다고 표현한다.</li><li>함수를 다른 함수의 argument로 사용하고, 함수에서 함수를 return하거나 변수의 값으로 함수를 할당할 수 있다.</li></ul><ol><li><p>변수에 함수를 할당</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"foobar"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// 변수를 사용하여 호출</span></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></li><li><p>함수를 인자로 전달</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeting</span>(<span class="hljs-params">helloMessage, name</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(helloMessage() + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// `sayHello`를 `greeting` 함수에 인자로 전달</span></span><br><span class="line">greeting(sayHello, <span class="hljs-string">"JavaScript!"</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li>다른 함수에 인자로 전달된 함수를 Call Back 함수라고 한다. </li><li>다른 언어들과 같이 sayHello()를 호출하면 바로 실행되지만, 위와 같이 greeting(satHello, “)의 인자로 전달된 sayHello의 경우 greeting 함수의 helloMessage parameter로 전달된 후에, 필요한 경우 helloMessage()에서 호출된다.</li><li>전달된 이후 나중에 호출되기 때문에 CallBack 함수라고 불린다.</li></ul><ol start="3"><li><p>함수를 return 값으로 전달 (함수 return)</p> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>함수가 함수를 반환하는 예시문. JavaScript에서는 함수를 변수처럼 취급하므로 함수를 return할 수 있다.</li><li>Higher-Order Function : 함수를 반환하는 함수</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;First-class-Function&quot;&gt;&lt;a href=&quot;#First-class-Function&quot; class=&quot;headerlink&quot; title=&quot;First-class Function&quot;&gt;&lt;/a&gt;First-class Function&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="Fisrt-class Function" scheme="https://sub2n.github.io/tags/Fisrt-class-Function/"/>
    
  </entry>
  
  <entry>
    <title>Call by Value, Call by Reference and Call by Object Reference</title>
    <link href="https://sub2n.github.io/2019/04/22/Call-by-Value-Call-by-Reference-and-Call-by-Object-Reference/"/>
    <id>https://sub2n.github.io/2019/04/22/Call-by-Value-Call-by-Reference-and-Call-by-Object-Reference/</id>
    <published>2019-04-22T11:28:15.000Z</published>
    <updated>2019-04-22T12:05:05.865Z</updated>
    
    <content type="html"><![CDATA[<p>우선 Parameter와 Argument의 차이를 짚고 가도록 한다.</p><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><p>The names given in the function definition are called Parameters.</p><h2 id="Argument"><a href="#Argument" class="headerlink" title="Argument"></a>Argument</h2><p>The values supplied in the function call are called Arguments.</p><h1 id="Call-by-Value"><a href="#Call-by-Value" class="headerlink" title="Call by Value"></a>Call by Value</h1><ul><li><p>함수를 호출할 때, 변수의 값을 복사하여 argument로 넘기는 것</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  x = val;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in change_value \n"</span>, *x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;</span><br><span class="line">  change_value(x, <span class="hljs-number">20</span>);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in main \n"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/56498729-04895e80-653e-11e9-9fcc-11c71a94318b.png" alt="Call by Value"></p><ul><li>위 코드에서는 단순히 x에 10이라는 값이 복사되어 들어가기 때문에, change_value(x, 20)에서 x를 변경하더라도 main 함수에서의 x에 영향을 미치지 못한다.</li></ul></li></ul><h1 id="Call-by-Reference"><a href="#Call-by-Reference" class="headerlink" title="Call by Reference"></a>Call by Reference</h1><ul><li>함수를 호출할 때 변수의 값을 넘기는 것이 아니라, 변수의 주소(변수의 위치)를 복사하여 함수에 넘긴다.</li><li><p>넘겨받은 주소로 실제 변수에 접근하고 값을 변경할 수 있다.</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_value</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * x, <span class="hljs-keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  *x = val;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in change_value \n"</span>, *x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;</span><br><span class="line">  change_value(&amp;x, <span class="hljs-number">20</span>);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"x : %d in main \n"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/56498618-76ad7380-653d-11e9-9dce-3b56346565ce.png" alt="Call by Reference"></p></li><li><p>주소값을 전달 (참조값을 전달) : 주소값을 알고 있으면 해당 memory 주소에 저장되어있는 값을 참조할 수 있다.</p></li><li><p>*x가 x를 참조하고 있다 : 가리키고 있다.</p><p>이를 이해하기 위해서는 pointer에 대한 이해가 필요하다.</p></li><li><p>Pointer </p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">int</span> *pnum;</span><br><span class="line"><span class="hljs-keyword">int</span> num = <span class="hljs-number">12345</span>;</span><br><span class="line">pnum = &amp;num <span class="hljs-comment">//num의 주소값을 return하여 pnum에 저장</span></span><br></pre></td></tr></table></figure><ul><li>변수를 만들 때 변수 이름 앞에 *를 붙이면 pointer 변수 됨</li><li>&amp;연산자: &amp;오른쪽에 오는 피연산자의 주소값을 반환</li><li>*연산자: 포인터가 가리키는 메모리 공간에 접근할 때 사용되는 연산자. 포인터 변수를 이용해 포인터 변수가 가리키는 변수의 값을 바꿀 수도 있다.</li></ul></li></ul><h1 id="Call-by-Assignment-Call-by-Object-Reference"><a href="#Call-by-Assignment-Call-by-Object-Reference" class="headerlink" title="Call by Assignment (Call by Object Reference)"></a>Call by Assignment (Call by Object Reference)</h1><blockquote><p>The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). [1] When a function calls another function, a new local symbol table is created for that call.</p></blockquote><p>이 문장이 나를 얼마나 헷갈리게 했는지 모른다. 그러니까 Python에서는 function의 argument가 call by value로 넘어오는데, 그 value는 언제나 object의 값이 아닌 object의 reference라는 것이다.</p><blockquote><p>Actually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list).</p></blockquote><p>정확하게는 call by object reference라는 설명이 더 맞다. 왜냐면 mutable 객체가 넘어올 때에는 call by reference처럼 원본 값을 변경할 수 있기 때문이다.</p><ul><li>파이썬은 모든 것이 object이고, Object에는 두 종류가 있다.</li></ul><ol><li>Immutable object<ul><li>int, float, str, tuple</li><li>Immtable 객체가 함수의 인자로 전달되면, 처음에는 call by reference로 받지만 값이 변경되면 call by value로 동작한다.</li><li>즉, 함수 내에서 formal parameter 값이 바뀌어도 actual parameter에는 영향이 없다.</li><li>함수 내부에서 값을 변경할 수 없다!</li><li>그래서 tuple은 변경하려면 함수에서 element와 tuple 인자로 넘겨 아예 새로 할당해줘야 함</li></ul></li><li>Mutable object<ul><li>list, dict, set</li><li>Mutable 객체가 함수의 인자로 넘어가면 call by reference도 동작한다. 즉, object referene가 전달되어 actual parameter의 값에 영향을 미칠 수도 있다.</li><li>새로운 객체를 할당하는 게 아니라면, 함수 내부에서 값을 변경할 수 있다!</li></ul></li></ol><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><ul><li>Python은 함수를 실행할때 Call by reference같은 느낌으로 reference를 넘겨준다. 하지만 이때 넘겨주는 것은 변수(Variable)의 reference가 아니라 변수가 담고 있는 자료(Data)의 reference이다. </li><li>자료가 mutable하다면 변경해도 reference가 보존되므로 결과적으로 Call by reference처럼 보일 것이고, 자료가 immutable하다면 결과적으로 Call by value처럼 보일 것이다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우선 Parameter와 Argument의 차이를 짚고 가도록 한다.&lt;/p&gt;
&lt;h2 id=&quot;Parameter&quot;&gt;&lt;a href=&quot;#Parameter&quot; class=&quot;headerlink&quot; title=&quot;Parameter&quot;&gt;&lt;/a&gt;Parameter&lt;/h2
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
      <category term="C" scheme="https://sub2n.github.io/tags/C/"/>
    
      <category term="Call by Value" scheme="https://sub2n.github.io/tags/Call-by-Value/"/>
    
      <category term="Call by Reference" scheme="https://sub2n.github.io/tags/Call-by-Reference/"/>
    
      <category term="Call by Object Reference" scheme="https://sub2n.github.io/tags/Call-by-Object-Reference/"/>
    
  </entry>
  
  <entry>
    <title>Local Variable and Global Variable</title>
    <link href="https://sub2n.github.io/2019/04/22/Local-Variable-and-Global-Variable/"/>
    <id>https://sub2n.github.io/2019/04/22/Local-Variable-and-Global-Variable/</id>
    <published>2019-04-22T10:32:36.000Z</published>
    <updated>2019-04-22T11:29:26.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="전역변수-global-variable-지역변수-local-variable"><a href="#전역변수-global-variable-지역변수-local-variable" class="headerlink" title="전역변수 (global variable) / 지역변수 (local variable)"></a>전역변수 (global variable) / 지역변수 (local variable)</h1><ol><li>변수의 scope와 lifetime</li></ol><ul><li>변수는 선언하는 순간부터 속한 scope 내에서 lifetime을 가진다. 즉, 특정 범위의 코드가 실행되고 있을 때는 메모리에 존재하지만, 실행이 끝나면 이 변수는 메모리에서 사라진다.</li></ul><ol start="2"><li><p>변수의 선언 위치</p><p> a. Block 외부 : block({})으로 감싸진 main 함수와 여러 함수들의 외부 공간에 변수를 선언할 수 있다.</p><p> b. Block 내부 : block 내부에 변수를 선언할 수 있다. C는 block의 최상단에 모든 지역변수를 선언해야한다.</p><p> c. 함수의 parameter : 함수의 매개변수는 그 함수의 block 내에서 선언된 변수와 동일한 효과를 갖는다.</p></li><li><p>전역변수 (a case)</p></li></ol><ul><li><p>Block 외부에 선언되는 변수. 전역 변수는 프로그램이 시작되는 순간부터 종료되는 순간까지 메모리를 차지하고 있으며 사라지지 않는다.</p></li><li><p>C라면 <code>main()</code> 위, <code>#include &lt;stdio.h&gt;</code>와 함수 원형 밑 그 사이에 선언</p></li><li><p>전역변수는 어느 block에서도 언제든지 접근이 가능하다 &gt; sycncrinize 고려</p></li></ul><ol start="4"><li>지역변수 (b case, c case)</li></ol><ul><li><p>지역변수는 block 내부에서 선언되는 변수이다. { } 안에 선언되어있다면 무조건 지역변수</p></li><li><p>지역변수는 선언된 block 내부로 scope가 한정되며 그 block의 실행이 끝나면 lifetime 또한 소멸된다.</p></li><li><p>함수의 parameter로서 선언되는 local variable도 이와 같다. 함수 body 내에서 선언되는 것과 똑같다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;전역변수-global-variable-지역변수-local-variable&quot;&gt;&lt;a href=&quot;#전역변수-global-variable-지역변수-local-variable&quot; class=&quot;headerlink&quot; title=&quot;전역변수 (global
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
      <category term="global variable" scheme="https://sub2n.github.io/tags/global-variable/"/>
    
      <category term="local variavble" scheme="https://sub2n.github.io/tags/local-variavble/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 5. Longest Palindromic Substring</title>
    <link href="https://sub2n.github.io/2019/04/22/LeetCode-5-Longest-Palindromic-Substring/"/>
    <id>https://sub2n.github.io/2019/04/22/LeetCode-5-Longest-Palindromic-Substring/</id>
    <published>2019-04-22T10:27:54.000Z</published>
    <updated>2019-04-22T11:50:29.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-5-Longest-Palindromic-Substring"><a href="#LeetCode-5-Longest-Palindromic-Substring" class="headerlink" title="LeetCode 5. Longest Palindromic Substring"></a><a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">LeetCode 5. Longest Palindromic Substring</a></h2><p>가장 긴, 거꾸로 해도 똑같은 Substring을 찾는 문제</p><a id="more"></a><blockquote><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p></blockquote><blockquote><p>Example 1:</p><p>Input: “babad”</p><p>Output: “bab”</p><p>Note: “aba” is also a valid answer.</p></blockquote><blockquote><p>Example 2:</p><p>Input: “cbbd”</p><p>Output: “bb”</p></blockquote><h3 id="요구-조건"><a href="#요구-조건" class="headerlink" title="요구 조건"></a>요구 조건</h3><p>요구 조건은 간단하다. 한 가지 용어만 정리하고 가면 된다.</p><p>Palindrome : “aba” “dccd”와 같이 reverse한 결과와 원본이 같은 단어를 말한다.</p><p>주어지는 input의 substring 중 가장 긴 palindromic substring을 return하는 문제다.</p><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><p>그러나 Solution은 간단하지 않았다. Palindromic Substring은 길이도 주어지지 않았고, 앞 뒤가 똑같은지 확인하기 위해서 비교해야할 변수가 많았다.</p><p>가장 중요한 건 효율성이다. 어떻게 하면 최소한의 비교로 가장 긴 Palindrome을 찾아낼 수 있을 지 오랫동안 고민했다.</p><p>이미 확인한 string은 다시 확인하지 않기 위해 Dynamic Programming을 이용하려고 했으나 실패했다.</p><p><code>P[i][j] = P[i+1][j-1] and S[i] == S[j]</code></p><p>이 완벽해보이는 알고리즘을 이용해 해답을 찾으려고 했지만 내가 부족한지 자꾸 i+1, j-1이 이전에 계산이 되지 않아 원하는 답이 나오지 않았다.</p><p>아래 두 해답은 다른 사람들의 Solution을 참고한 것이다.</p><h2 id="Python-Solution-1"><a href="#Python-Solution-1" class="headerlink" title="Python Solution 1"></a>Python Solution 1</h2><p>Runtime 5496 ms | Memory Usage 13.3 MB</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        long = <span class="hljs-string">""</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(s) &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(s), i, <span class="hljs-number">-1</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> len(long) &gt;= j-i:</span><br><span class="line">                    <span class="hljs-keyword">continue</span></span><br><span class="line">                <span class="hljs-keyword">elif</span> s[i:j] == s[i:j][::<span class="hljs-number">-1</span>]:</span><br><span class="line">                    long = s[i:j]</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> long</span><br></pre></td></tr></table></figure><p>정말 단순히, s의 모든 substring이 palindromic한지 검사하는 알고리즘이다.</p><h2 id="Python-Solution-2"><a href="#Python-Solution-2" class="headerlink" title="Python Solution 2"></a>Python Solution 2</h2><p>Runtime 68 ms | Memory Usage 13.3 MB</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(s) &lt;= <span class="hljs-number">1</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> s</span><br><span class="line">        i,l=<span class="hljs-number">0</span>,<span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="hljs-keyword">if</span> s[j-l: j+<span class="hljs-number">1</span>] == s[j-l: j+<span class="hljs-number">1</span>][::<span class="hljs-number">-1</span>]:</span><br><span class="line">                i, l = j-l, l+<span class="hljs-number">1</span></span><br><span class="line">                <span class="hljs-comment"># print(s[i: i+l])</span></span><br><span class="line">            <span class="hljs-keyword">elif</span> j-l &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s[j-l<span class="hljs-number">-1</span>: j+<span class="hljs-number">1</span>] == s[j-l<span class="hljs-number">-1</span>: j+<span class="hljs-number">1</span>][::<span class="hljs-number">-1</span>]:</span><br><span class="line">                i, l = j-l<span class="hljs-number">-1</span>, l+<span class="hljs-number">2</span></span><br><span class="line">                <span class="hljs-comment"># print(s[i: i+l])</span></span><br><span class="line">        <span class="hljs-keyword">return</span> s[i: i+l]</span><br></pre></td></tr></table></figure><p>이 Solution은 놀라웠다. </p><ol><li>가장 긴 substring의 시작 index를 i에, 길이는 l에 저장한다.</li><li>j로 s를 순회하면서 s[j-l-1:j+1], 즉 j를 기준으로 l+1만큼의 길이를 가진 (저장된 l의 길이보다 2 더 큰) substring이 palindrome인지 검사한다. 맞으면 i와 l을 update한다.</li><li>된다! 그리고 이해도 쉽게 된다.</li></ol><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><p>문제를 보는 능력을 기르려면 한참 멀었다는 생각이 들었다. 더 좋은 Solution을 많이 접하고 공부해야겠다.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode-5-Longest-Palindromic-Substring&quot;&gt;&lt;a href=&quot;#LeetCode-5-Longest-Palindromic-Substring&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 5. Longest Palindromic Substring&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 5. Longest Palindromic Substring&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;가장 긴, 거꾸로 해도 똑같은 Substring을 찾는 문제&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="LeetCode" scheme="https://sub2n.github.io/categories/Algorithm/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190421-TIL</title>
    <link href="https://sub2n.github.io/2019/04/21/190421-TIL/"/>
    <id>https://sub2n.github.io/2019/04/21/190421-TIL/</id>
    <published>2019-04-21T11:51:59.000Z</published>
    <updated>2019-04-21T11:59:05.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="LeetCode-5-Longest-Palindromic-Substring"><a href="#LeetCode-5-Longest-Palindromic-Substring" class="headerlink" title="LeetCode 5. Longest Palindromic Substring"></a>LeetCode 5. Longest Palindromic Substring</h3><p>금요일부터 오늘까지 내내 나를 괴롭히던 문제를 해결(?) 했다. 시간을 많이 들여도 도저히 답이 나오지 않으면 포기하기보다 다른 사람들의 Solution을 보고 분석하는 것 또한 공부라고 생각한다.</p><p>Python에 익숙해질겸, Dynamic Programming을 재정리할겸 여러 시도를 해보았지만 내가 생각하지 못한 기발한 방법으로 문제를 해결한 사람들이 많았다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;LeetCode-5-Lo
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190420-TIL</title>
    <link href="https://sub2n.github.io/2019/04/20/190420-TIL/"/>
    <id>https://sub2n.github.io/2019/04/20/190420-TIL/</id>
    <published>2019-04-20T08:33:50.000Z</published>
    <updated>2019-04-20T08:42:52.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h3 id="Sass-특강"><a href="#Sass-특강" class="headerlink" title="Sass 특강"></a>Sass 특강</h3><ul><li><p>임기완 강사님의 Sass 특강을 들었다. </p></li><li><p>Sass는 CSS의 preprocessor이다. </p><p>Preprocessor란, 컴파일러와 같이 자신의 input data로 만들어낸 ouput data가 다른 프로그램의 input data가 되게끔 하는 프로그램을 말한다. </p></li><li><p>scss 를 css로 변환하는 방법과, variable, partial, import, mixin, @extend를 이용한 inheritance, data type 등 전체적인 부분을 훑어봤다.</p></li><li><p>HEXO로 블로그를 하기 위해서 살펴보았던 .ejs 나 .jade 파일에서 보았던 이상한 문법들이 이해가 되는 순간이었다! mixin이 많은 도움이 될 것 같다.</p></li></ul><blockquote><p>🐊 <a href="https://steemit.com/css/@march23hare/css" target="_blank" rel="noopener">구닥다리 공룡을 위한 오늘날의 CSS</a></p></blockquote><h3 id="알고리즘"><a href="#알고리즘" class="headerlink" title="알고리즘"></a>알고리즘</h3><ul><li>CodeWars Directions Reduction 문제를 풀었다.</li></ul><blockquote><p><a href="https://sub2n.github.io/2019/04/20/CodeWars-6kyu-Directions-Reduction/">😈 알고리즘 풀이 보러가기</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h3 id=&quot;Sass-특강&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 5kyu. Directions Reduction</title>
    <link href="https://sub2n.github.io/2019/04/20/CodeWars-5kyu-Directions-Reduction/"/>
    <id>https://sub2n.github.io/2019/04/20/CodeWars-5kyu-Directions-Reduction/</id>
    <published>2019-04-20T08:23:59.000Z</published>
    <updated>2019-04-22T10:29:36.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Dubstep"><a href="#CodeWars-6kyu-Dubstep" class="headerlink" title="CodeWars 6kyu. Dubstep"></a><a href="https://www.codewars.com/kata/dubstep/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Dubstep</a></h2><p>뒤죽박죽 방향 지시를 효율적으로 만들기</p><a id="more"></a><p>Instruction이 길어 생략하도록 하겠다. 위의 링크를 참조하도록 하자.</p><h3 id="요구조건"><a href="#요구조건" class="headerlink" title="요구조건"></a>요구조건</h3><ol><li><p>북쪽으로 갔다가 남쪽으로, 동쪽으로 갔다가 서쪽으로. 움직이지 않는 것만 못한 비효율적인 지시를 제거하는 문제다.</p></li><li><p>[NORTH + SOUTH], [EAST + WEST] 와 같이 두 방향이 인접해야지만 제거할 수 있다. </p></li><li><p>[SOUTH, EAST, WEST, NORTH]와 같은 경우, 첫번째로 EAST + WEST가 사라지고 나면 SOUTH + NORTH가 인접하게 되므로 이것 또한 제거해 효율적인 지시를 내려야 한다.</p></li></ol><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><p>이전에 LeetCode에서 두어번 풀어보았던 in-place 알고리즘이 떠올랐다. input을 담을 자료구조를 따로 만들지 않고 input 자체에 연산을 하는 작업이다. Call by reference로 parameter를 넘겨줄 때만 유효한 알고리즘이다. </p><ol><li><p>input arr의 item이 한개 이하라면 그냥 arr를 return한다.</p></li><li><p>각 대응되는 direction들을 dictionary의 key와 value로 mapping한다.</p></li><li><p>for문을 돌며 만약 서로 대응되는 방향이 인접해있다면 그 둘을 arr에서 잘라내고, i를 초기화해서 처음부터 다시 arr를 순회한다.</p></li></ol><h3 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dirReduc</span>(<span class="hljs-params">arr</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span>(arr.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">var</span> direction = &#123;<span class="hljs-string">"NORTH"</span>: <span class="hljs-string">"SOUTH"</span>,</span><br><span class="line">                  <span class="hljs-string">"EAST"</span>: <span class="hljs-string">"WEST"</span>,</span><br><span class="line">                  <span class="hljs-string">"SOUTH"</span>: <span class="hljs-string">"NORTH"</span>,</span><br><span class="line">                  <span class="hljs-string">"WEST"</span>: <span class="hljs-string">"EAST"</span>&#125;;</span><br><span class="line">                  </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(direction[arr[i]] == arr[i+<span class="hljs-number">1</span>])&#123;</span><br><span class="line">      arr.splice(i, <span class="hljs-number">2</span>);</span><br><span class="line">      i = <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Dubstep&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Dubstep&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Dubstep&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/dubstep/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Dubstep&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;뒤죽박죽 방향 지시를 효율적으로 만들기&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Persistent Bugger</title>
    <link href="https://sub2n.github.io/2019/04/19/CodeWars-6kyu-Persistent-Bugger/"/>
    <id>https://sub2n.github.io/2019/04/19/CodeWars-6kyu-Persistent-Bugger/</id>
    <published>2019-04-19T12:46:18.000Z</published>
    <updated>2019-04-20T08:43:27.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Persistent-Bugger"><a href="#CodeWars-6kyu-Persistent-Bugger" class="headerlink" title="CodeWars 6kyu. Persistent Bugger"></a><a href="https://www.codewars.com/kata/persistent-bugger/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Persistent Bugger</a></h2><p>각 자릿수의 곱이 한자릿수가 되는 횟수를 구하기</p><a id="more"></a><blockquote><p>Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.</p></blockquote><blockquote><p>For example:</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">persistence(<span class="hljs-number">39</span>) === <span class="hljs-number">3</span> <span class="hljs-comment">// because 3*9 = 27, 2*7 = 14, 1*4=4</span></span><br><span class="line">                      <span class="hljs-comment">// and 4 has only one digit</span></span><br><span class="line"></span><br><span class="line">persistence(<span class="hljs-number">999</span>) === <span class="hljs-number">4</span> <span class="hljs-comment">// because 9*9*9 = 729, 7*2*9 = 126,</span></span><br><span class="line">                       <span class="hljs-comment">// 1*2*6 = 12, and finally 1*2 = 2</span></span><br><span class="line"></span><br><span class="line">persistence(<span class="hljs-number">4</span>) === <span class="hljs-number">0</span> <span class="hljs-comment">// because 4 is already a one-digit number</span></span><br></pre></td></tr></table></figure><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><p>split()을 사용해서 숫자를 각각 문자열 배열의 원소로 떼어내면 쉬울 것 같았는데 나는 고전적인 방법으로 숫자 그대로를 parsing하고 싶었다. 그래서 이전 LeetCode의 Palindrome 문제를 풀 때 사용한 숫자의 pop 기법을 이용해 한자리씩 숫자를 분리했다.</p><h3 id="javaScript-Solution-1"><a href="#javaScript-Solution-1" class="headerlink" title="javaScript Solution 1"></a>javaScript Solution 1</h3> <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> pop = <span class="hljs-number">0</span>; <span class="hljs-keyword">let</span> count;</span><br><span class="line"><span class="hljs-keyword">let</span> mult, nums;</span><br><span class="line">   </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mul</span>(<span class="hljs-params">num</span>)</span>&#123;</span><br><span class="line">  mult = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">while</span>(num &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="line">      pop = num%<span class="hljs-number">10</span>;</span><br><span class="line">      num = (num-pop)/<span class="hljs-number">10</span>;</span><br><span class="line">      mult *= pop;</span><br><span class="line">   &#125;</span><br><span class="line">  nums = mult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">persistence</span>(<span class="hljs-params">num</span>) </span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">   count = <span class="hljs-number">0</span>;</span><br><span class="line">   nums = num;</span><br><span class="line">   <span class="hljs-keyword">do</span>&#123;</span><br><span class="line">     count++;</span><br><span class="line">     mul(nums);</span><br><span class="line">   &#125;<span class="hljs-keyword">while</span>(mult &gt;= <span class="hljs-number">10</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="hljs-keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Persistent-Bugger&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Persistent-Bugger&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Persistent Bugger&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/persistent-bugger/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Persistent Bugger&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;각 자릿수의 곱이 한자릿수가 되는 횟수를 구하기&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190419-TIL</title>
    <link href="https://sub2n.github.io/2019/04/19/190419-TIL/"/>
    <id>https://sub2n.github.io/2019/04/19/190419-TIL/</id>
    <published>2019-04-19T12:39:53.000Z</published>
    <updated>2019-04-19T12:45:32.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h1><h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="새로운-언어를-배우는-방법"><a href="#새로운-언어를-배우는-방법" class="headerlink" title="새로운 언어를 배우는 방법"></a>새로운 언어를 배우는 방법</h3><ol><li>자료형</li><li>연산자</li><li>제어문, 반복문</li><li>함수 <ul><li>call by reference, call by value, call by object reference</li><li>First class function인지</li></ul></li><li>Class 지원하는지 (<ul><li>Encapsulation</li><li>Inheritance</li><li>Virtual function 지원 여부)</li></ul></li></ol><h3 id="Python-Data-Type과-기본-Data-Structure-실습"><a href="#Python-Data-Type과-기본-Data-Structure-실습" class="headerlink" title="Python Data Type과 기본 Data Structure 실습"></a>Python Data Type과 기본 Data Structure 실습</h3><h3 id="Text-가위바위보-게임"><a href="#Text-가위바위보-게임" class="headerlink" title="Text 가위바위보 게임"></a>Text 가위바위보 게임</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_player_choice</span><span class="hljs-params">()</span>:</span></span><br><span class="line">  <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">  get_player_choice() -&gt; string</span></span><br><span class="line"><span class="hljs-string">  Return "바위" or "가위 or "보"</span></span><br><span class="line"><span class="hljs-string">  """</span></span><br><span class="line">  choice = input(<span class="hljs-string">"가위바위보! : "</span>)</span><br><span class="line">  <span class="hljs-keyword">while</span> choice != <span class="hljs-string">"가위"</span> <span class="hljs-keyword">and</span> choice != <span class="hljs-string">"바위"</span> <span class="hljs-keyword">and</span> choice != <span class="hljs-string">"보"</span>:</span><br><span class="line">    choice = input(<span class="hljs-string">"가위바위보! : "</span>)</span><br><span class="line">  <span class="hljs-keyword">return</span> choice</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_computer_choice</span><span class="hljs-params">()</span>:</span></span><br><span class="line">  <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">  get_computer_choice -&gt; string</span></span><br><span class="line"><span class="hljs-string">  Return "바위" or "가위 or "보"</span></span><br><span class="line"><span class="hljs-string">  """</span></span><br><span class="line">  tup = (<span class="hljs-string">"가위"</span>, <span class="hljs-string">"바위"</span>, <span class="hljs-string">"보"</span>)</span><br><span class="line">  <span class="hljs-keyword">return</span> tup[random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">who_wins</span><span class="hljs-params">(player, computer)</span>:</span></span><br><span class="line">  <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">  who_wins(player, com) -&gt; string</span></span><br><span class="line"><span class="hljs-string">  Return if player wins 'player'</span></span><br><span class="line"><span class="hljs-string">  elif computer wins 'computer'</span></span><br><span class="line"><span class="hljs-string">  else None</span></span><br><span class="line"><span class="hljs-string">  """</span></span><br><span class="line">  <span class="hljs-keyword">if</span> player == computer:</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (player == <span class="hljs-string">"바위"</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-string">"가위"</span>) <span class="hljs-keyword">or</span>\</span><br><span class="line">  (player == <span class="hljs-string">"가위"</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-string">"보"</span>) <span class="hljs-keyword">or</span>\</span><br><span class="line">  (player == <span class="hljs-string">"보"</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-string">"바위"</span>):</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'player'</span></span><br><span class="line">  <span class="hljs-keyword">else</span>:</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'computer'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play_one</span><span class="hljs-params">()</span>:</span></span><br><span class="line">  <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">  play_one -&gt; string</span></span><br><span class="line"><span class="hljs-string">  Return if player wins 'player'</span></span><br><span class="line"><span class="hljs-string">  elif computer wins 'computer'</span></span><br><span class="line"><span class="hljs-string">  """</span></span><br><span class="line">  player_win = <span class="hljs-number">0</span></span><br><span class="line">  computer_win = <span class="hljs-number">0</span></span><br><span class="line">  <span class="hljs-keyword">while</span> player_win == computer_win:</span><br><span class="line">    player = get_player_choice()</span><br><span class="line">    computer = get_computer_choice()</span><br><span class="line">    result = who_wins(player, computer)</span><br><span class="line">    print(<span class="hljs-string">f'Player <span class="hljs-subst">&#123;player&#125;</span> vs Computer <span class="hljs-subst">&#123;computer&#125;</span>'</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> result == <span class="hljs-string">'player'</span>:</span><br><span class="line">      player_win += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> result == <span class="hljs-string">'computer'</span>:</span><br><span class="line">      computer_win += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">if</span> player_win &gt; computer_win:</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">'player'</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">'computer'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_final_winner</span><span class="hljs-params">(result)</span>:</span></span><br><span class="line">  <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">  check_final_winner(result) -&gt; string</span></span><br><span class="line"><span class="hljs-string">  result : ex) ['player', 'player']</span></span><br><span class="line"><span class="hljs-string">  Return if 'player' &gt;= 2 in result, 'Player'</span></span><br><span class="line"><span class="hljs-string">  elif 'computer' &gt;=2 in result, 'Computer'</span></span><br><span class="line"><span class="hljs-string">  else None</span></span><br><span class="line"><span class="hljs-string">  """</span></span><br><span class="line">  print(<span class="hljs-string">f"Player <span class="hljs-subst">&#123;result.count(<span class="hljs-string">'player'</span>)&#125;</span>승 | Computer <span class="hljs-subst">&#123;result.count(<span class="hljs-string">'computer'</span>)&#125;</span> 승"</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> result.count(<span class="hljs-string">'player'</span>) &gt;= <span class="hljs-number">2</span>:</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'Player'</span></span><br><span class="line">  <span class="hljs-keyword">else</span>:</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'Computer'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span><span class="hljs-params">()</span>:</span></span><br><span class="line">  <span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">  play() -&gt; None</span></span><br><span class="line"><span class="hljs-string">  3판 2선승가위바위보</span></span><br><span class="line"><span class="hljs-string">  """</span></span><br><span class="line">  result_list = []</span><br><span class="line">  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):</span><br><span class="line">    result_list.insert(i, play_one())</span><br><span class="line">  print(check_final_winner(result_list)+<span class="hljs-string">" Wins!!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">"__main__"</span>:</span><br><span class="line">  play()</span><br></pre></td></tr></table></figure><h3 id="ASCII와-UNICODE"><a href="#ASCII와-UNICODE" class="headerlink" title="ASCII와 UNICODE"></a>ASCII와 UNICODE</h3><p>ASCII와 UNOCODE의 역사, UNICODE의 Encoding, Decoding 방법도 배웠다.</p><h3 id="Python-Bubble-Sort"><a href="#Python-Bubble-Sort" class="headerlink" title="Python Bubble Sort"></a>Python Bubble Sort</h3><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(li)</span>:</span></span><br><span class="line">  n = len(li)</span><br><span class="line">  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n<span class="hljs-number">-1</span>):</span><br><span class="line">    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n<span class="hljs-number">-1</span>-i):</span><br><span class="line">      <span class="hljs-keyword">if</span> li[j] &gt; li[j+<span class="hljs-number">1</span>]:</span><br><span class="line">        li[j], li[j+<span class="hljs-number">1</span>] = li[j+<span class="hljs-number">1</span>], li[j]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span><br><span class="line">  li=[<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]</span><br><span class="line">  bubble_sort(li)</span><br><span class="line">  print(li)</span><br></pre></td></tr></table></figure><p>간단한 Bubble Sort function을 만들었다.</p><h3 id="알고리즘"><a href="#알고리즘" class="headerlink" title="알고리즘"></a>알고리즘</h3><p><a href="https://www.codewars.com/kata/persistent-bugger/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Persistent Bugger</a></p><p>그리고 LeetCode의 Medium Level 문제를 풀려고 했는데 Dynamic Programming 개념이 들어가 쉽지 않다. 주말 내내 풀어야겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Python Data Type and Data Structure | Jupyter 사용방법</title>
    <link href="https://sub2n.github.io/2019/04/18/Python-Data-Type-and-Data-Structure-Jupyter-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95/"/>
    <id>https://sub2n.github.io/2019/04/18/Python-Data-Type-and-Data-Structure-Jupyter-사용방법/</id>
    <published>2019-04-18T12:03:30.000Z</published>
    <updated>2019-04-22T11:27:34.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jupyter-사용법-Python-Data-Type"><a href="#Jupyter-사용법-Python-Data-Type" class="headerlink" title="Jupyter 사용법 | Python Data Type"></a>Jupyter 사용법 | Python Data Type</h1><h2 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter notebook"></a>Jupyter notebook</h2><ol><li>window 사용을 기준으로 Window PowerShell을 실행한다.</li><li><code>pwd</code>로 현재 폴더를, <code>ls</code>로 현재 폴더에 존재하는 file들을 확인 후 <code>mkdir 폴더이름</code> command로 python file을 만들고 실습할 폴더 하나를 생성한다.</li><li>나는 python-basic이라는 폴더를 만들고 <code>cd python-basic</code> 명령으로 해당 폴더로 이동했다. </li><li><p>만든 폴더로 이동한 후 cmd에 <code>jupyter notebook</code> command를 입력한다.</p><p> <img src="https://user-images.githubusercontent.com/48080762/56360433-97b15400-621f-11e9-9328-7bc93b0eb4d0.png" alt="PowerShell에 jupyter notebook 입력"></p></li><li><p>조금 기다리다보면 (10초 이상 소요) 브라우저 새 창으로 jupyter notebook이 실행된다.</p><p> <img src="https://user-images.githubusercontent.com/48080762/56360962-1b1f7500-6221-11e9-848b-cfdefbca5d82.png" alt="jupyter notebook 실행화면"></p></li><li><p>그림과 같이 우측의 new button을 눌러 새로운 python file을 생성한다.</p><p> <img src="https://user-images.githubusercontent.com/48080762/56360884-ea3f4000-6220-11e9-8425-de0b1699311f.png" alt="create new python file"></p></li><li><p>그럼 새로운 탭에 생성된 file이 보여진다.</p><p> <img src="https://user-images.githubusercontent.com/48080762/56361029-4609c900-6221-11e9-9e4b-3add1af431fa.png" alt="untitled.ipynb"></p></li><li><p>제목을 수정하고 실습을 시작하면 된다!</p></li></ol><ul><li><p>method 이름을 치고 <code>Shift + Tab</code>을 하면 function의 signature를 확인할 수 있다.</p><p><img src="https://user-images.githubusercontent.com/48080762/56361146-954ff980-6221-11e9-8607-ac367aaa5ab7.png" alt="function signature 확인 단축키 : shift + tab"></p></li><li><p>object (variable)을 입력한 상태에서 <code>Tab</code> 키를 누르면 사용 가능한 method들을 확인할 수 있다.</p><p><img src="https://user-images.githubusercontent.com/48080762/56361198-b1ec3180-6221-11e9-8bf0-1efaada1f834.png" alt="method 확인 단축키 : tab"></p></li><li><p>instruction을 작성한 후 <code>Shift + Enter</code>를 누르면 해당 line이 실행된다.</p></li><li><p>어떤 line에 focus가 있는 상태에서, <code>ESC + m</code>을 누르고 <code>Enter</code>를 치면 markdown으로 작성할 수 있다.</p></li></ul><h2 id="Python-Data-Type"><a href="#Python-Data-Type" class="headerlink" title="Python Data Type"></a>Python Data Type</h2><ol><li><p>Number Type : Int, Float</p><p> <img src="https://user-images.githubusercontent.com/48080762/56361443-52425600-6222-11e9-97b1-371dc1abd277.png" alt="Python Number Type"></p><p> javaScript와 다르게 C처럼 int, float등 정수형과 실수형을 구분한다.</p></li><li><p>String</p></li></ol><ul><li>character와 string의 구분 없이 str type을 가진다.</li></ul><p><img src="https://user-images.githubusercontent.com/48080762/56498247-d30f9380-653b-11e9-9411-aa3ed46d0be6.png" alt="String"></p><h2 id="Python-Data-Structure"><a href="#Python-Data-Structure" class="headerlink" title="Python Data Structure"></a>Python Data Structure</h2><h3 id="Mutable-and-Immutable-Object"><a href="#Mutable-and-Immutable-Object" class="headerlink" title="Mutable and Immutable Object"></a>Mutable and Immutable Object</h3><h3 id="Mutable-object-변경-가능-객체"><a href="#Mutable-object-변경-가능-객체" class="headerlink" title="Mutable object (변경 가능 객체)"></a>Mutable object (변경 가능 객체)</h3><ol><li>list</li><li>dictionary</li><li>set</li></ol><h3 id="Immutable-object-변경-불가능-객체"><a href="#Immutable-object-변경-불가능-객체" class="headerlink" title="Immutable object (변경 불가능 객체)"></a>Immutable object (변경 불가능 객체)</h3><ol><li>int, float 등 숫자는 immutable : 값을 덮어쓰는 것이 아니라 새로운 memory 공간에 할당하고 그 값을 가리킨다. 이름 객체가 값 객체를 가리키는 것을 binding이라고 한다.</li><li>string </li><li>Tuple</li></ol><h2 id="Dynamic-Typing"><a href="#Dynamic-Typing" class="headerlink" title="Dynamic Typing"></a>Dynamic Typing</h2><p><img src="https://user-images.githubusercontent.com/48080762/56497145-5ed2f100-6537-11e9-91f6-df0d42532653.png" alt="Dynamic Typing"></p><p>Python은 Dynamic typing 언어로, C / C++ 같은 정적 타이핑 언어처럼 자료형을 미리 선언하지 않아도 알아서 동적으로 자료형을 할당할 수 있다.</p><h2 id="Data-Assignment"><a href="#Data-Assignment" class="headerlink" title="Data Assignment"></a>Data Assignment</h2><p><img src="https://user-images.githubusercontent.com/48080762/56498081-31884200-653b-11e9-86f8-1cc9eb29c9a1.png" alt="Memory Assignment (C / Python)"></p><ul><li>C : char a = 10;<ul><li>A라는 이름을 가진 공간에 10의 값이 저장된다.</li><li>20으로 변경시 같은 메모리 공간의 값을 변경한다.</li></ul></li><li>Python : a = 10;<ul><li>10이라는 값을 가진 객체가 생기고, a라는 이름을 가진 객체가 10을 가리키게 된다.</li><li>만약 a=20으로 재할당할 경우 20이라는 값을 가진 객체가 생기고 a는 20을 가리켜, 10은 자신을 가리키는 객체가 없으므로 제거된다.</li><li>20으로 변경시 10의 메모리공간을 건드리지 않고 새로운 공간을 만든다.</li></ul></li><li>Integer, float등 number type은 immutable 객체</li></ul><h3 id="Python-성질"><a href="#Python-성질" class="headerlink" title="Python 성질"></a>Python 성질</h3><ol><li>모든 것이 객체<br>: integer가 그냥 4 byte가 아니라 객체로 필요한 것들이 붙어있어 크기를 더 차지함</li><li>Overflow<br>: overflow 되는 대신 4 byte를 8 byte로 늘림. 대신 경계검사 하므로 속도 저하</li></ol><h3 id="Language-Abstraction"><a href="#Language-Abstraction" class="headerlink" title="Language Abstraction"></a>Language Abstraction</h3><ul><li>Hardware 의존적인 Assembly 언어에서 벗어나 하드웨어 독립적인 C언어로 Coding하고 각 하드웨어 별 어셈블러로 해석하게끔 함 ▶ 하드웨어 추상화 (각 어셈블러가 어떻게 동작하는지 몰라도 C로 코딩하면 됨)</li><li>Assembly : low level language</li><li>C / C++ : hardware abstraction 됐으나 memory abstraction X ▶ 메모리를 직접 할당, 해제</li><li>Java / C# : 언어 자체에서 메모리 할당, 해제 ▶ garbage collection. Memory abstraction O 그러나 Data Type은 선언해줘야함</li><li>Python / javaScript : Data type abstraction. Interpreter Language</li><li>Level은 abstraction level을 말하는 것이지 급을 나누는 것이 아님</li><li>성능은 C/C++ 생산성은 Python</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jupyter-사용법-Python-Data-Type&quot;&gt;&lt;a href=&quot;#Jupyter-사용법-Python-Data-Type&quot; class=&quot;headerlink&quot; title=&quot;Jupyter 사용법 | Python Data Type&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Python" scheme="https://sub2n.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 3.7.3 | Jupyter 설치</title>
    <link href="https://sub2n.github.io/2019/04/18/Python-3-7-3-Jupyter-%EC%84%A4%EC%B9%98/"/>
    <id>https://sub2n.github.io/2019/04/18/Python-3-7-3-Jupyter-설치/</id>
    <published>2019-04-18T11:52:27.000Z</published>
    <updated>2019-04-18T12:15:34.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Window-Python-3-7-3-및-Jupyter-설치"><a href="#Window-Python-3-7-3-및-Jupyter-설치" class="headerlink" title="Window Python 3.7.3 및 Jupyter 설치"></a>Window Python 3.7.3 및 Jupyter 설치</h1><p>파이썬을 공부하기 위해 작업환경을 우선 구축하기로 한다.</p><h2 id="Python-3-7-3-설치"><a href="#Python-3-7-3-설치" class="headerlink" title="Python 3.7.3 설치"></a>Python 3.7.3 설치</h2><ol><li>Python 최신 릴리즈인 <a href="https://www.python.org/downloads/release/python-373/" target="_blank" rel="noopener">3.7.3 다운로드</a> 페이지로 이동한다.</li></ol><p><img src="https://user-images.githubusercontent.com/48080762/56359343-45226880-621c-11e9-9d8d-12cfb3d12b59.png" alt="www.python.org/download"></p><ol start="2"><li><p>Download for Windows의 Python 3.7.3 버튼을 누르면 자동으로 설치 실행 파일이 다운로드 된다.</p></li><li><p>다운받은 <code>python-3.7.3.exe</code> 파일을 관리자 권한으로 실행 후, 설치를 진행한다. PATH를 자동으로 생성하는 것이 좋다!</p></li><li><p>다운로드가 완료되면 cmd 창을 열어 <code>python --version</code> 명령어로 설치가 제대로 되었는지 확인한다.</p><p> <img src="https://user-images.githubusercontent.com/48080762/56359512-bd892980-621c-11e9-8241-1fc8a260c10b.png" alt="python 설치 확인"></p></li></ol><h2 id="Jupyter-설치"><a href="#Jupyter-설치" class="headerlink" title="Jupyter 설치"></a>Jupyter 설치</h2><p>위의 Python 설치 4단계에서, cmd 명령으로 확인을 정상적으로 마쳤다면 추가적인 명령 한 줄로 Jupyter를 설치할 수 있다.</p><ol><li>cmd 창에 <code>pip install jupyter</code>를 입력한다.<br> <img src="https://user-images.githubusercontent.com/48080762/56359642-1c4ea300-621d-11e9-9c40-cd5fd89b9a24.png" alt="jupyter 설치"></li></ol><p>여기까지 하면 Python 사용을 위한 간단한 작업 환경 구성이 완료된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Window-Python-3-7-3-및-Jupyter-설치&quot;&gt;&lt;a href=&quot;#Window-Python-3-7-3-및-Jupyter-설치&quot; class=&quot;headerlink&quot; title=&quot;Window Python 3.7.3 및 Jupyte
      
    
    </summary>
    
      <category term="Python" scheme="https://sub2n.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://sub2n.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>190418-TIL</title>
    <link href="https://sub2n.github.io/2019/04/18/190418-TIL/"/>
    <id>https://sub2n.github.io/2019/04/18/190418-TIL/</id>
    <published>2019-04-18T11:47:31.000Z</published>
    <updated>2019-04-19T12:39:27.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><ul><li><p>Epsilon, Number Digit 등 컴퓨터에서 실수를 표현하는 방식과 상대오차에 대해서 깊게 배웠다.</p></li><li><p>실수형의 논리비교를 위한 is_equal 함수를 만들었다.</p>  <figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_equal</span>(<span class="hljs-params">x, y, allowed=<span class="hljs-number">0</span></span>)</span>&#123;</span><br><span class="line"><span class="hljs-comment">// 둘 중 큰 수의 다음 숫자와의 오차의 allowed 배 정도 되는 범위 안에 있으면 같다고 판단한다.</span></span><br><span class="line"><span class="hljs-keyword">return</span> (<span class="hljs-built_in">Math</span>.abs(x-y) &lt;= <span class="hljs-built_in">Math</span>.max(<span class="hljs-built_in">Math</span>.abs(x), <span class="hljs-built_in">Math</span>.abs(y))*<span class="hljs-built_in">Number</span>.EPSILON*<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, allowed));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>; i&lt; <span class="hljs-number">100</span>; i++)&#123;</span><br><span class="line">sum += <span class="hljs-number">0.01</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(is_equal(sum, <span class="hljs-number">1.0</span>, <span class="hljs-number">2</span>))&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"THE SAME"</span>);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"NOT THE SAME"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python을 배우는데 너무 재미있다. 익숙하지 않아 찾아보는 것이 번거롭지만 문법이나 기능이 흥미롭다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 35. Search Insert Position</title>
    <link href="https://sub2n.github.io/2019/04/18/LeetCode-35-Search-Insert-Position/"/>
    <id>https://sub2n.github.io/2019/04/18/LeetCode-35-Search-Insert-Position/</id>
    <published>2019-04-18T11:18:45.000Z</published>
    <updated>2019-04-20T08:46:19.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-35-Search-Insert-Position"><a href="#LeetCode-35-Search-Insert-Position" class="headerlink" title="LeetCode 35. Search Insert Position"></a><a href="https://leetcode.com/problems/search-insert-position/" target="_blank" rel="noopener">LeetCode 35. Search Insert Position</a></h2><p>Insert할 Position을 찾는 문제 : C++, Binary Search 사용</p><a id="more"></a><blockquote><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p></blockquote><blockquote><p>Example 1:</p><p>Input: [1,3,5,6], 5</p><p>Output: 2</p></blockquote><blockquote><p>Example 2:</p><p>Input: [1,3,5,6], 2</p><p>Output: 1</p></blockquote><blockquote><p>Example 3:</p><p>Input: [1,3,5,6], 7</p><p>Output: 4</p></blockquote><blockquote><p>Example 4:</p><p>Input: [1,3,5,6], 0</p><p>Output: 0</p></blockquote><h3 id="요구조건"><a href="#요구조건" class="headerlink" title="요구조건"></a>요구조건</h3><p>input으로 들어오는 정렬된 배열 nums와 target으로, target이 nums에 있다면 그 index를 return하고 없다면 순서상 target이 있어야할 자리의 index를 return한다.</p><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><p>처음 문제를 접하고 바로 Binary Search를 사용해야겠다고 생각했다. 원래는 값을 찾으면 return하고 없으면 -1을 return하지만, 이 문제에서는 target이 있어야 할 자리를 return하므로 end + 1을 return했다.</p><h3 id="C-Solution"><a href="#C-Solution" class="headerlink" title="C++ Solution"></a>C++ Solution</h3><p><img src="https://user-images.githubusercontent.com/48080762/56357984-3a65d480-6218-11e9-96a4-27e53817b42a.png" alt="my C++ Solution Submit Page"></p><p>: Runtime 8 ms    | Memory Usage 8.7 MB</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(target &lt;= nums[<span class="hljs-number">0</span>]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> end = nums.size() - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid;</span><br><span class="line">        <span class="hljs-keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">            mid = (start + end) / <span class="hljs-number">2</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span>(target == nums[mid]) <span class="hljs-keyword">return</span> mid;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; nums[mid])&#123;</span><br><span class="line">                end = mid <span class="hljs-number">-1</span>;</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                start = mid+<span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(start &gt; end) <span class="hljs-keyword">return</span> end+<span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode-35-Search-Insert-Position&quot;&gt;&lt;a href=&quot;#LeetCode-35-Search-Insert-Position&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 35. Search Insert Position&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/search-insert-position/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 35. Search Insert Position&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Insert할 Position을 찾는 문제 : C++, Binary Search 사용&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="LeetCode" scheme="https://sub2n.github.io/categories/Algorithm/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Dubstep</title>
    <link href="https://sub2n.github.io/2019/04/18/CodeWars-6kyu-Dubstep/"/>
    <id>https://sub2n.github.io/2019/04/18/CodeWars-6kyu-Dubstep/</id>
    <published>2019-04-18T11:17:20.000Z</published>
    <updated>2019-04-20T08:44:13.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Dubstep"><a href="#CodeWars-6kyu-Dubstep" class="headerlink" title="CodeWars 6kyu. Dubstep"></a><a href="https://www.codewars.com/kata/dubstep/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Dubstep</a></h2><p>덥스텝 제목을 Decoding 하기</p><a id="more"></a><blockquote><p>Polycarpus works as a DJ in the best Berland nightclub, and he often uses dubstep music in his performance. Recently, he has decided to take a couple of old songs and make dubstep remixes from them.</p></blockquote><blockquote><p>Let’s assume that a song consists of some number of words (that don’t contain WUB). To make the dubstep remix of this song, Polycarpus inserts a certain number of words “WUB” before the first word of the song (the number may be zero), after the last word (the number may be zero), and between words (at least one between any pair of neighbouring words), and then the boy glues together all the words, including “WUB”, in one string and plays the song at the club.</p></blockquote><blockquote><p>For example, a song with words “I AM X” can transform into a dubstep remix as “WUBWUBIWUBAMWUBWUBX” and cannot transform into “WUBWUBIAMWUBX”.</p></blockquote><blockquote><p>Recently, Jonny has heard Polycarpus’s new dubstep track, but since he isn’t into modern music, he decided to find out what was the initial song that Polycarpus remixed. Help Jonny restore the original song.</p></blockquote><blockquote><p>Input</p><p>The input consists of a single non-empty string, consisting only of uppercase English letters, the string’s length doesn’t exceed 200 characters</p></blockquote><blockquote><p>Output</p><p>Return the words of the initial song that Polycarpus used to make a dubsteb remix. Separate the words with a space.</p></blockquote><blockquote><p>Examples<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">songDecoder(<span class="hljs-string">"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB"</span>)</span><br><span class="line">  <span class="hljs-comment">// =&gt;  WE ARE THE CHAMPIONS MY FRIEND</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="요구조건"><a href="#요구조건" class="headerlink" title="요구조건"></a>요구조건</h3><ol><li><p>input으로 200자를 넘지 않고 비어있지 않은 string 하나가 들어오면 WUB가 끼어들어가있지 않은 원래의 song 제목으로 decoding해 return 한다.</p></li><li><p>각 단어는 space로 나눠져야 한다.</p></li></ol><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><p>여러가지 방법으로 해결했다. Regular Expression을 활용해 string을 처리했다.</p><ol><li>replace method와 RegEx를 사용해 song에 존재하는 모든 “WUB”를 “ “(space)로 대체한다. 단어 사이에 space가 여러개 있을 수 있으니 하나 이상의 space(\s+)로 string을 배열로 조각낸 후, 각 단어를 다시 space를 사이에 넣어 join한다.</li></ol><p>1-1. 이렇게 되면 string의 시작과 끝에 존재하는 공백이 처리되지 않는다. 처음 Solution 1을 작성할 때는 trim() method를 몰랐으므로 직접 if문으로 처리했다.</p><ol start="2"><li><p>filter() method와 새로운 function 문법 =&gt; 를 써보고 싶어 작성한 Suolution</p></li><li><p>정규 표현식과 trim method를 활용해 코드의 길이를 줄였다.</p></li></ol><h3 id="javaScript-Solution-1"><a href="#javaScript-Solution-1" class="headerlink" title="javaScript Solution 1"></a>javaScript Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">songDecoder</span>(<span class="hljs-params">song</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> result = song.replace(<span class="hljs-regexp">/WUB/gi</span>, <span class="hljs-string">' '</span>).split(<span class="hljs-regexp">/\s+/</span>).join(<span class="hljs-string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>] === <span class="hljs-string">' '</span>)&#123;</span><br><span class="line">    result = result.slice(<span class="hljs-number">1</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">if</span>(result[result.length<span class="hljs-number">-1</span>] === <span class="hljs-string">' '</span>)&#123;</span><br><span class="line">    result = result.slice(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javaScript-Solution-2"><a href="#javaScript-Solution-2" class="headerlink" title="javaScript Solution 2"></a>javaScript Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">songDecoder</span>(<span class="hljs-params">song</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> song.replace(<span class="hljs-regexp">/WUB/g</span>, <span class="hljs-string">' '</span>).split(<span class="hljs-string">' '</span>).filter(<span class="hljs-function"><span class="hljs-params">word</span>=&gt;</span>word!=<span class="hljs-string">''</span>).join(<span class="hljs-string">' '</span>);</span><br><span class="line">;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javaScript-Solution-3"><a href="#javaScript-Solution-3" class="headerlink" title="javaScript Solution 3"></a>javaScript Solution 3</h3><p><img src="https://user-images.githubusercontent.com/48080762/56358001-46519680-6218-11e9-804a-facea4d24994.png" alt="my Solution Submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">songDecoder</span>(<span class="hljs-params">song</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> song.replace(<span class="hljs-regexp">/(WUB)+/g</span>,<span class="hljs-string">" "</span>).trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h3><ul><li>^x : 문자열의 시작이 x</li><li>x$ : 문자열의 끝이 x</li><li>.x : x로 끝나는 임의의 문자</li><li>x+ : x가 1번 이상 반복</li><li>x* : x가 0번 이상 반복</li><li>x? : x가 존재하거나 존재하지 않음</li><li>x{n} : x를 n번 반복한 문자를 찾음</li><li>x{n,} : x를 n번 이상 반복한 문자를 찾음</li><li>x{n, m} : x를 n번 이상, m번 이하 반복하는 문자를 찾음</li></ul><h4 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h4><ul><li>g (Global) : 문자열 내에 존재하는 모든 패턴을 찾음</li><li>i (Ignore Case) : 대소문자 구분 없이 찾음</li><li>m (Multi Line) : 문자열의 행이 바뀌어도 찾음</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 객체초기화(Object initializer) 방법</span></span><br><span class="line"><span class="hljs-keyword">var</span> regExp = <span class="hljs-regexp">/정규표현식/</span>[Flag];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Dubstep&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Dubstep&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Dubstep&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/dubstep/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Dubstep&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;덥스텝 제목을 Decoding 하기&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190417-TIL</title>
    <link href="https://sub2n.github.io/2019/04/17/190417-TIL/"/>
    <id>https://sub2n.github.io/2019/04/17/190417-TIL/</id>
    <published>2019-04-17T10:45:23.000Z</published>
    <updated>2019-04-17T12:17:56.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h1><h2 id="오늘-한-일"><a href="#오늘-한-일" class="headerlink" title="오늘 한 일"></a>오늘 한 일</h2><h3 id="오전"><a href="#오전" class="headerlink" title="오전"></a>오전</h3><ul><li>알고리즘 스터디에서 LeetCode 말고 다른 알고리즘 풀이 사이트를 이용하자는 의견이 나와 오늘부터 CodeWars에서 문제를 풀어보기로 했다. 6급 문제를 풀었는데 생각보다 쉬워서 LeetCode 문제를 하나 더 풀었다.</li></ul><h3 id="오후"><a href="#오후" class="headerlink" title="오후"></a>오후</h3><ul><li><p>컴퓨터공학 기초 수업을 8일간 듣는다. 자료구조, 알고리즘과 Python을 배운다고 한다. 오늘은 Memory와 Number type, Binary 연산을 공부했다. 학교 전공 수업을 다시 복습해야겠다.</p></li><li><p>position: sticky는 top, left, right 중 값 한가지를 넣어야 동작한다!!!</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h1&gt;&lt;h2 id=&quot;오늘-한-일&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 28. Implement strStr()</title>
    <link href="https://sub2n.github.io/2019/04/17/LeetCode-28-Implement-strStr/"/>
    <id>https://sub2n.github.io/2019/04/17/LeetCode-28-Implement-strStr/</id>
    <published>2019-04-17T08:18:54.000Z</published>
    <updated>2019-04-20T08:46:05.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-28-Implement-strStr"><a href="#LeetCode-28-Implement-strStr" class="headerlink" title="LeetCode 28. Implement strStr()"></a><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">LeetCode 28. Implement strStr()</a></h2><p>strStr()을 구현하기 : javaScript, C</p><a id="more"></a><blockquote><p>Implement strStr().</p><p>Return the index of the first occurrence of needle in haystack, or -1 &gt; if needle is not part of haystack.</p><p>Example 1:</p><p>Input: haystack = “hello”, needle = “ll”<br>Output: 2<br>Example 2:</p><p>Input: haystack = “aaaaa”, needle = “bba”<br>Output: -1</p></blockquote><h3 id="요구조건"><a href="#요구조건" class="headerlink" title="요구조건"></a>요구조건</h3><ol><li>string haystack에서 needle이 처음으로 등장하는 index를 반환한다. 존재하지 않으면 -1을 반환한다.</li></ol><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><ol><li>javaScript의 indexOf() method를 이용해 해결했다.</li><li>method를 쓰지 않고 C로 해결해보려고 했는데 한 1년 C를 쓰지 않았다고 기능이 기억이 나지 않아 여러 번 찾아봐야 했다. 포인터 개념도 다시 한 번 훑어봐야겠다.</li></ol><h3 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h3><p><img src="https://user-images.githubusercontent.com/48080762/56282327-dd9be880-6149-11e9-95f8-ba96c666a2c4.png" alt="Submit 1 : javaSript"></p><p>: Runtime 56 ms    | Memory Usage 33.8 MB</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;string&#125; haystack</span></span><br><span class="line"><span class="hljs-comment"> * @param &#123;string&#125; needle</span></span><br><span class="line"><span class="hljs-comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">var</span> strStr = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">haystack, needle</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (needle === <span class="hljs-string">""</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="C-Solution"><a href="#C-Solution" class="headerlink" title="C Solution"></a>C Solution</h3><p><img src="https://user-images.githubusercontent.com/48080762/56284645-10e17600-6150-11e9-85ea-a202348ec60b.png" alt="Submit 2 : C"></p><p>: Runtime 1300 ms    | Memory Usage 7 MB</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* haystack, <span class="hljs-keyword">char</span>* needle)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(needle[<span class="hljs-number">0</span>] == <span class="hljs-string">'\0'</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;</span><br><span class="line">  <span class="hljs-keyword">int</span> hayLen = <span class="hljs-built_in">strlen</span>(haystack);</span><br><span class="line">  <span class="hljs-keyword">int</span> neeLen = <span class="hljs-built_in">strlen</span>(needle);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; hayLen; i++)&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(haystack[i] == needle[<span class="hljs-number">0</span>])&#123;</span><br><span class="line">          index = i;</span><br><span class="line">          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j &lt; neeLen ; j++)&#123;</span><br><span class="line">              <span class="hljs-keyword">if</span>(i+j &gt;= hayLen || haystack[i+j] != needle[j])&#123;</span><br><span class="line">                  index = <span class="hljs-number">-1</span>;</span><br><span class="line">                  <span class="hljs-keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="hljs-keyword">if</span>(index &gt; <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode-28-Implement-strStr&quot;&gt;&lt;a href=&quot;#LeetCode-28-Implement-strStr&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 28. Implement strStr()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/implement-strstr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 28. Implement strStr()&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;strStr()을 구현하기 : javaScript, C&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="LeetCode" scheme="https://sub2n.github.io/categories/Algorithm/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Multiples of 3 or 5</title>
    <link href="https://sub2n.github.io/2019/04/17/CodeWars-6kyu-Multiples-of-3-or-5/"/>
    <id>https://sub2n.github.io/2019/04/17/CodeWars-6kyu-Multiples-of-3-or-5/</id>
    <published>2019-04-17T08:17:13.000Z</published>
    <updated>2019-04-20T08:43:50.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Multiples-of-3-or-5"><a href="#CodeWars-6kyu-Multiples-of-3-or-5" class="headerlink" title="CodeWars 6kyu. Multiples of 3 or 5"></a><a href="https://www.codewars.com/kata/multiples-of-3-or-5/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Multiples of 3 or 5</a></h2><p>3 또는 5의 배수의 합 구하기</p><a id="more"></a><blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p><p>Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in.</p><p>Note: If the number is a multiple of both 3 and 5, only count it once.</p><p>Courtesy of ProjectEuler.net</p></blockquote><h3 id="요구조건"><a href="#요구조건" class="headerlink" title="요구조건"></a>요구조건</h3><p>어떤 자연수 number 미만의 3 또는 5의 배수를 찾는 문제</p><h3 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h3><ol><li>input number가 3 또는 5로 나누어 떨어지면 sum에 더하는 방식이다. 문제가 너무 간단하게 풀려서 새로운 방법으로 생각 해보기로 했다.</li><li>number를 3, 5로 나누면 그 몫의 개수만큼만 for loop을 돌며 추가한다. 5로 나눈 몫이 항상 3으로 나눈 몫보다 작기 때문에 한 번 더 검사를 해주었다.</li></ol><h3 id="javaScript-Solution-1"><a href="#javaScript-Solution-1" class="headerlink" title="javaScript Solution 1"></a>javaScript Solution 1</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">number</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> === <span class="hljs-number">0</span> || i % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) &#123;</span><br><span class="line">      sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="javaScript-Solution-2"><a href="#javaScript-Solution-2" class="headerlink" title="javaScript Solution 2"></a>javaScript Solution 2</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">solution</span>(<span class="hljs-params">number</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">var</span> threeMultiples = number/<span class="hljs-number">3</span>;</span><br><span class="line">  <span class="hljs-keyword">var</span> fiveMultiples = number/<span class="hljs-number">5</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt; threeMultiples; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">5</span> != <span class="hljs-number">0</span>) sum += i*<span class="hljs-number">3</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(i &lt; fiveMultiples) sum += i*<span class="hljs-number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Multiples-of-3-or-5&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Multiples-of-3-or-5&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Multiples of 3 or 5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/multiples-of-3-or-5/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Multiples of 3 or 5&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;3 또는 5의 배수의 합 구하기&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
</feed>
