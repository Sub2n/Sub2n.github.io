<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>수빈 개발블로그</title>
  
  <subtitle>Sub2n Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sub2n.github.io/"/>
  <updated>2019-05-07T12:42:58.770Z</updated>
  <id>https://sub2n.github.io/</id>
  
  <author>
    <name>Subin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10. Comparing primitive and objects</title>
    <link href="https://sub2n.github.io/2019/05/07/10-Comparing-primitive-and-objects/"/>
    <id>https://sub2n.github.io/2019/05/07/10-Comparing-primitive-and-objects/</id>
    <published>2019-05-07T11:24:49.000Z</published>
    <updated>2019-05-07T12:42:58.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Difference-between-primitive-type-and-object-type"><a href="#Difference-between-primitive-type-and-object-type" class="headerlink" title="Difference between primitive type and object type"></a>Difference between primitive type and object type</h2><table><thead><tr><th style="text-align:center">Primitive Type</th><th style="text-align:center">Object Type</th></tr></thead><tbody><tr><td style="text-align:center">immutable value</td><td style="text-align:center">mutable value</td></tr><tr><td style="text-align:center">stored as real value</td><td style="text-align:center">stored as reference value</td></tr><tr><td style="text-align:center">pass by value</td><td style="text-align:center">pass by reference</td></tr></tbody></table><h1 id="Primitive-Value"><a href="#Primitive-Value" class="headerlink" title="Primitive Value"></a>Primitive Value</h1><h2 id="Immutable-Value"><a href="#Immutable-Value" class="headerlink" title="Immutable Value"></a>Immutable Value</h2><ul><li>The value of primitive type is an <strong>immutable value</strong>. (Read only, can not change)</li><li>Can not change value doesn’t mean can not reassign value.</li><li>Variable can be reassigned a new value, but the value can not be changed.</li><li>When reassigning a new value to a variable, instead of changing the value stored in the memory space pointed to by the variable, assign a value to the new memory space and make the variable refer to the new memory space. This is because the primitive value is immutable.</li><li>If the primitive value is a mutable value, the memory address referenced by the variable will not change when reassigning the variable.</li><li>immutability : Since the primitive value is an immutable value, when the value of the variable is changed, the new value is stored in the new memory space, and the memory space is referred to. This property is called the <strong>immutability</strong> of the primitive value.</li></ul><h2 id="String-and-Immutability"><a href="#String-and-Immutability" class="headerlink" title="String and Immutability"></a>String and Immutability</h2><ul><li><p>String is immutable because it’s also primitive type of JavaScript.</p></li><li><p>String is an array-like object.</p><blockquote><h3 id="Array-like-Object"><a href="#Array-like-Object" class="headerlink" title="Array-like Object"></a>Array-like Object</h3><p>An array-like object is an object that is not an array, but can be treated like an array. A string can access each character through an index like an array, or it can be traversed by a for statement. This means that the string can be an object with a length property.</p></blockquote></li></ul><ul><li>You can not change <code>str[0]</code>, but error doesn’t occur.</li></ul><p><img src="https://user-images.githubusercontent.com/48080762/57296797-dba1c580-7108-11e9-83bd-86e735652c18.png" alt="String is immutable value"></p><ul><li>But, it is of course possible to reassign the new string. Because it is not a change to the existing string but a new assignment of the new string.</li></ul><h2 id="Pass-by-value"><a href="#Pass-by-value" class="headerlink" title="Pass by value"></a>Pass by value</h2><p>What happens when a variable is assigned to a variable? </p><p>If assigned variable is primitive type, the assigned variable value is copied and passed. It’s <strong>pass by value</strong>.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> score = <span class="hljs-number">80</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> mine = score;</span><br></pre></td></tr></table></figure><p>Variable <code>score</code> and <code>mine</code> have a value 80, but it’s a separate value in memory. The value 80 in <code>mine</code> is not same as 80 in <code>score</code>.</p><p><img src="https://user-images.githubusercontent.com/48080762/57297341-57e8d880-710a-11e9-9007-36ec715ebcf7.png" alt="Pass by Value"></p><p>Thus, reassigning another value to the variable <code>score</code> does not affect the value of the variable <code>mine</code>.</p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><ul><li>An object is a collection of properties consisting of key and value. A property whose value is a function is called a method.</li><li>Since the number of properties is not fixed and the object can be added and deleted dynamically, the size of the memory space can not be preset in the dictionary like the primitive value.</li></ul><blockquote><h2 id="How-JavaScript-manages-objects"><a href="#How-JavaScript-manages-objects" class="headerlink" title="How JavaScript manages objects"></a>How JavaScript manages objects</h2><p>Unlike with an class-based object-oriented language, JavaScript can create an object without class and dynamically add a property and method even after an object have been created.</p><p>For this reason, almost modern JavaScript engine uses a function-based dictionary-like structure to score a location of object property in memory.</p><p>This is theoretically more costly and inefficient than object management in class-based object-oriented programming languages such as Java. So V8 JavaScript engine uses hidden class method. A hidden class operates like class in Java.</p></blockquote><h2 id="Mutable-Value"><a href="#Mutable-Value" class="headerlink" title="Mutable Value"></a>Mutable Value</h2><p>The value of an object (reference) type, that is, an object is a mutable value.</p><p>A variable that has been assigned a primitive value has its primitive value as its value. </p><p>But, the variable that the object is assigned has a <strong>reference value</strong> as a value. The reference value is <strong>the address of the memory space</strong> in which the generated object is stored, itself.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/57298300-d181c600-710c-11e9-96ba-119ba0ffc866.png" alt="Assignment of an object"></p><ul><li><p><code>student</code> variable has a memory address of the memory space where a created object is stored. This is a <strong>reference value</strong>. A variable can access the object by this reference value.</p></li><li><p>When evaluating a variable that assigns an object, it returns the object by accessing the actual object through the reference value rather than returning the reference value stored in memory.</p></li><li><p>An object pointed to by a variable can be added dynamically after it has been created, updated, or deleted. In other words, an object is a <strong>mutable value</strong>.</p></li><li><p>Objects can be very large and change fluidly, so instead of reallocating each time as a primitive value and changing the memory address, it changes the object itself to be referenced directly.</p></li><li><p>In other words, copying an object as a primitive value (a deep copy) is expensive and inefficient, so it copies the reference value.</p><blockquote><h3 id="Shallow-copy-and-Deep-copy"><a href="#Shallow-copy-and-Deep-copy" class="headerlink" title="Shallow copy and Deep copy"></a>Shallow copy and Deep copy</h3><ul><li>Shallow copy : copying reference values</li><li>Deep copy : copying and recreating the object itself as a primitive value</li></ul></blockquote></li></ul><ul><li><p>A side effect of storing an object’s reference value is that an object can be referenced by multiple identifiers.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> student = &#123;</span><br><span class="line">    name: <span class="hljs-string">'Park'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">var</span> teacher = student;</span><br><span class="line"></span><br><span class="line">teacher.age = <span class="hljs-number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(teacher);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(student);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/57299503-b06ea480-710f-11e9-8dd4-19c322cbf727.png" alt="Referenced by multiple identifiers"></p><ul><li>The property is added only to the object of the teacher variable, but the changes are shared because the objects referenced by the student and teacher are the same.</li></ul></li></ul><h2 id="Pass-by-Reference"><a href="#Pass-by-Reference" class="headerlink" title="Pass by Reference"></a>Pass by Reference</h2><p>If you assign a variable that points to an object to another variable, the original reference value is copied and passed. This is called <strong>pass by reference.</strong></p><p><img src="https://user-images.githubusercontent.com/48080762/57299971-d34d8880-7110-11e9-8fc7-1ee9d64a5f13.png" alt="Pass by Reference"></p><p>As shown in the figure above, since the memory address of the same object is referenced, <code>student</code> and <code>teacher</code> refer to the same object and change it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Difference-between-primitive-type-and-object-type&quot;&gt;&lt;a href=&quot;#Difference-between-primitive-type-and-object-type&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="immutable" scheme="https://sub2n.github.io/tags/immutable/"/>
    
      <category term="mutable" scheme="https://sub2n.github.io/tags/mutable/"/>
    
      <category term="primitive" scheme="https://sub2n.github.io/tags/primitive/"/>
    
      <category term="object" scheme="https://sub2n.github.io/tags/object/"/>
    
      <category term="pass by reference" scheme="https://sub2n.github.io/tags/pass-by-reference/"/>
    
      <category term="pass by value" scheme="https://sub2n.github.io/tags/pass-by-value/"/>
    
  </entry>
  
  <entry>
    <title>190507-TIL</title>
    <link href="https://sub2n.github.io/2019/05/07/190503-TIL/"/>
    <id>https://sub2n.github.io/2019/05/07/190503-TIL/</id>
    <published>2019-05-07T10:51:17.000Z</published>
    <updated>2019-05-07T11:21:52.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Studied JavaScript operator, contitional statement, type coercion and short-circuit evaluation, object literal.</p><p>Algorithm study - CodeWars [6kyu] Consecutive strings. We will start to implement underscore library functions like map, reduce.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Studied JavaScript
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>190502-TIL</title>
    <link href="https://sub2n.github.io/2019/05/02/190502-TIL/"/>
    <id>https://sub2n.github.io/2019/05/02/190502-TIL/</id>
    <published>2019-05-02T12:45:17.000Z</published>
    <updated>2019-05-02T12:47:46.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Algorithm study</p><p>Solved Double cola problem!</p><p>Studied about Control flow statement of JavaScript</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Algorithm study&lt;/p
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Playing with digits</title>
    <link href="https://sub2n.github.io/2019/05/02/CodeWars-6kyu-Playing-with-digits/"/>
    <id>https://sub2n.github.io/2019/05/02/CodeWars-6kyu-Playing-with-digits/</id>
    <published>2019-05-02T06:11:03.000Z</published>
    <updated>2019-05-02T06:23:47.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Playing-with-digits"><a href="#CodeWars-6kyu-Playing-with-digits" class="headerlink" title="CodeWars 6kyu. Playing with digits"></a><a href="https://www.codewars.com/kata/playing-with-digits/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Playing with digits</a></h2><p>Play with digits 😊</p><a id="more"></a><p>I changed the type of input n to cycle through each digit.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">digPow</span>(<span class="hljs-params">n, p</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> digitSum = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">let</span> strNum = <span class="hljs-built_in">String</span>(n);</span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> strNum)&#123;</span><br><span class="line">    digitSum += strNum[i]**p;</span><br><span class="line">    p++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>.isInteger(digitSum/n) ? digitSum/n : <span class="hljs-number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/57058695-4196e300-6cec-11e9-9f36-2b196d64fba6.png" alt="Submit screen"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Playing-with-digits&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Playing-with-digits&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Playing with digits&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/playing-with-digits/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Playing with digits&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Play with digits 😊&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190501-TIL</title>
    <link href="https://sub2n.github.io/2019/05/01/190501-TIL/"/>
    <id>https://sub2n.github.io/2019/05/01/190501-TIL/</id>
    <published>2019-05-01T12:43:16.000Z</published>
    <updated>2019-05-01T12:47:46.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>I learned about the operation principle and process of web browser. HTML parser creates DOM tree, CSS parser creates CSSOM tree and JavaScript parser creates AST(Abstract Syntax Tree).</p><p>Now I can explain JavaScript and ECMAScript.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;I learned about th
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>6. Operator</title>
    <link href="https://sub2n.github.io/2019/05/01/6-Operator/"/>
    <id>https://sub2n.github.io/2019/05/01/6-Operator/</id>
    <published>2019-05-01T11:43:56.000Z</published>
    <updated>2019-05-03T10:08:35.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Expression-and-Operator"><a href="#Expression-and-Operator" class="headerlink" title="Expression and Operator"></a>Expression and Operator</h1><p>Operator needs operand as value. And the expression is equivalent with value. So expressions can be located</p><p>Values ​​can be generated in a variety of ways. The various methods mentioned here are expressions. Expressions in a programming language have a very important meaning.</p><p>Expression is combination of tokens(literal, identifier(variable name, function name, etc), operator, function call). The expression is evaluated to produce a single value. That is, an <strong>expression is a statement that can be evaluated as a single value</strong>.</p><p>Expression can be divided into a literal notation, an identifier expression, an operator expression, a function/method call expression, but they are all the same in that they are evaluated and made into a single value.</p><p>The value that generated by evaluation of an expression is equivalent with an expression. In other words, expressions can be used like values. This means that an expression can also be placed where the value can be placed.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// expression x + 30 consists of a combination of an identifier expression(x), number literal(30) and operator(+)</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(x + <span class="hljs-number">30</span>); <span class="hljs-comment">//40</span></span><br></pre></td></tr></table></figure><h1 id="Statement-and-Expression"><a href="#Statement-and-Expression" class="headerlink" title="Statement and Expression"></a>Statement and Expression</h1><p><strong>A statement</strong> is a <strong>command to a JavaScript engine that consists of a combination of one or more expressions and keywords.</strong> A program is made up of a set of statements, and programming is to write the statements and sequence them.</p><p>A statement can be divided into</p><ul><li>declare statement</li><li>expression statement</li><li>conditional statement</li><li>loop statement. </li></ul><p>Statement should end up with semicolon(;). Do not add a semicolon after the code block.</p><p>All codes of JavaScript are statements. An expression can itself be a statement. But the statement can not be an expression.</p><p>It is difficult that distinguish statement and expression. The expression evaluates to produce a value, but can not do anything further. The statement can be used to create variables, functions, and classes using declarative keywords such as <code>var</code>, <code>let</code>, <code>const</code>, function (declare statement), and class and to control the program flow by generating conditional statements such as <code>if</code>, <code>for</code>, and <code>while</code> statements.</p><p>The role of expression is that generates value. The role of statement is that command to JavaScript engine using a value that is generated by expression.</p><h1 id="Expression-statement-and-Non-expression-statement"><a href="#Expression-statement-and-Non-expression-statement" class="headerlink" title="Expression statement and Non-expression statement"></a>Expression statement and Non-expression statement</h1><p>There are expression statement and non-expression statement. A expression statement is a statement that can be evaluated as a value, and non-expression statement is a statement that can not be evaluated as a value.</p><p>For example, assignment statement can not be evaluated as a value. So it’s non-expression statement. </p><p><strong>The simplest and most obvious way to distinguish expressions from expressions is to assign them to variables.</strong> An expression statement can be evaluated as value so it can be assigned to a variable.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// declare statement : non-expression statement</span></span><br><span class="line">&gt; <span class="hljs-keyword">var</span> x;</span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// assignment statement : expression statement</span></span><br><span class="line">&gt; x = <span class="hljs-number">5</span>;</span><br><span class="line">&lt; <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// function declare statement : non-expression statement</span></span><br><span class="line">&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// conditional statement : non-expression statement</span></span><br><span class="line">&gt; <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">5</span>) &#123; <span class="hljs-built_in">console</span>.log(x); &#125;</span><br><span class="line">  <span class="hljs-number">5</span></span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// loop statement</span></span><br><span class="line">&gt; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123; <span class="hljs-built_in">console</span>.log(i); &#125;</span><br><span class="line">  <span class="hljs-number">0</span></span><br><span class="line">  <span class="hljs-number">1</span></span><br><span class="line">&lt; <span class="hljs-literal">undefined</span></span><br></pre></td></tr></table></figure><p>Expression always prints a evaluated value in Chrome developer tool.</p><h1 id="What-is-Operator"><a href="#What-is-Operator" class="headerlink" title="What is Operator?"></a>What is Operator?</h1><p>An operator creates one value by performing arithmetic, assignment, comparison, logic, and type operations on one or more expressions. </p><ul><li>operand : the object of the operation</li></ul><p>The operand is also an expression because it is evaluated and a single value, and the expression is also an expression that combines the operand with the operator.</p><h1 id="Arithmetic-Operator"><a href="#Arithmetic-Operator" class="headerlink" title="Arithmetic Operator"></a>Arithmetic Operator</h1><p>The Arithmetic Operator performs a mathematical computation on the operands to produce new numeric values. If arithmetic is not possible, NaN is returned.</p><p>Arithmetic operators can be classified into binary arithmetic operators and unary arithmetic operators according to the number of operands.</p><h2 id="Binary-Arithmetic-Operator"><a href="#Binary-Arithmetic-Operator" class="headerlink" title="Binary Arithmetic Operator"></a>Binary Arithmetic Operator</h2><p>The binary arithmetic operator creates one Number type value by operating arithmetic on two operands.</p><p>All binary arithmetic operators have no side effects that change the value of the operand. In other words, any arithmetic operation does not change the value of the operand. It always creates new values.</p><table><thead><tr><th style="text-align:center">Binary arithmetic operator</th><th style="text-align:center">Meaning</th><th style="text-align:center">Side effect</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">Addition</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">Subtraction</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">Multiplication</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">Division</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">Remainder</td><td style="text-align:center">X</td></tr></tbody></table><h2 id="Unary-Arithmetic-Operator"><a href="#Unary-Arithmetic-Operator" class="headerlink" title="Unary Arithmetic Operator"></a>Unary Arithmetic Operator</h2><p>Unary arithmetic operators perform arithmetic operations on a single operand to produce a numeric type value. The increment / decrement (++ / –) operator has side effects that change the value of the operand. </p><table><thead><tr><th style="text-align:center">Unary arithmetic operator</th><th style="text-align:center">Meaning</th><th style="text-align:center">Side effect</th></tr></thead><tbody><tr><td style="text-align:center">++</td><td style="text-align:center">Increment</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">–</td><td style="text-align:center">Decrement</td><td style="text-align:center">O</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">No effect. Negative numbers are not reversed to positive numbers.</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">Returns a positive number that is a negative number and a negative number that is a positive number.</td><td style="text-align:center">X</td></tr></tbody></table><p>The position of increment/decrement(++/–) operator has meaning.</p><ul><li>The prefix increment / decrement operator that located before the operand first increments / decrements the value of the operand, and then performs another operation.</li><li>The postfix increment / decrement operator that located after the operand first performs other operation, and then increments / decrements the value of the operand.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Expression-and-Operator&quot;&gt;&lt;a href=&quot;#Expression-and-Operator&quot; class=&quot;headerlink&quot; title=&quot;Expression and Operator&quot;&gt;&lt;/a&gt;Expression and Op
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Expression" scheme="https://sub2n.github.io/tags/Expression/"/>
    
      <category term="Statement" scheme="https://sub2n.github.io/tags/Statement/"/>
    
      <category term="Operater" scheme="https://sub2n.github.io/tags/Operater/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Find The Parity Outlier</title>
    <link href="https://sub2n.github.io/2019/05/01/CodeWars-6kyu-Find-The-Parity-Outlier/"/>
    <id>https://sub2n.github.io/2019/05/01/CodeWars-6kyu-Find-The-Parity-Outlier/</id>
    <published>2019-05-01T06:11:42.000Z</published>
    <updated>2019-05-02T06:20:59.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Find-The-Parity-Outlier"><a href="#CodeWars-6kyu-Find-The-Parity-Outlier" class="headerlink" title="CodeWars 6kyu. Find The Parity Outlier"></a><a href="https://www.codewars.com/kata/5526fc09a1bbd946250002dc" target="_blank" rel="noopener">CodeWars 6kyu. Find The Parity Outlier</a></h2><p>Find one odd / even number in last all even / odd numbers.</p><a id="more"></a><blockquote><p>You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this “outlier” N.</p></blockquote><blockquote><p>Examples</p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 0, 100, 4, 11, 2602, 36]</span><br><span class="line">Should return: 11 (the only odd number)</span><br><span class="line"></span><br><span class="line">[160, 3, 1719, 19, 11, 13, -21]</span><br><span class="line">Should return: 160 (the only even number)</span><br></pre></td></tr></table></figure><h2 id="First-Solution"><a href="#First-Solution" class="headerlink" title="First Solution"></a>First Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/57058944-b1f23400-6ced-11e9-882d-2e346bbc23af.png" alt="Solution1 submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOutlier</span>(<span class="hljs-params">integers</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> isOdd = <span class="hljs-literal">true</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">0</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">    <span class="hljs-comment">// even</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">      <span class="hljs-comment">// even even</span></span><br><span class="line">      isOdd = <span class="hljs-literal">false</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">      <span class="hljs-comment">// even odd</span></span><br><span class="line">      <span class="hljs-keyword">if</span>(integers[<span class="hljs-number">2</span>]%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>)&#123;</span><br><span class="line">        <span class="hljs-comment">// if even odd even, return odd</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">1</span>];</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-comment">// else if even odd odd, return even</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">    <span class="hljs-comment">// odd</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">      <span class="hljs-comment">// odd even</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (integers[<span class="hljs-number">2</span>]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">        <span class="hljs-comment">// if odd even even, return odd</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">0</span>];</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-comment">// if odd even odd, return even</span></span><br><span class="line">        <span class="hljs-keyword">return</span> integers[<span class="hljs-number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span>(isOdd == <span class="hljs-literal">true</span>)&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>; i&lt;integers.length; i++)&#123;</span><br><span class="line">      <span class="hljs-keyword">if</span>(integers[i]%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> integers[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>; i&lt;integers.length; i++)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(integers[i]%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> integers[i];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Second-Solution"><a href="#Second-Solution" class="headerlink" title="Second Solution"></a>Second Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/57058974-d0f0c600-6ced-11e9-9735-00208b67e603.png" alt="Solution2 submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOutlier</span>(<span class="hljs-params">integers</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> even = integers.filter(<span class="hljs-function"><span class="hljs-params">a</span>=&gt;</span>a%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">var</span> odd = integers.filter(<span class="hljs-function"><span class="hljs-params">a</span>=&gt;</span>a%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">return</span> even.length == <span class="hljs-number">1</span> ? <span class="hljs-built_in">Number</span>(even) : <span class="hljs-built_in">Number</span>(odd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Find-The-Parity-Outlier&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Find-The-Parity-Outlier&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Find The Parity Outlier&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/5526fc09a1bbd946250002dc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Find The Parity Outlier&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Find one odd / even number in last all even / odd numbers.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190430-TIL</title>
    <link href="https://sub2n.github.io/2019/04/30/190430-TIL/"/>
    <id>https://sub2n.github.io/2019/04/30/190430-TIL/</id>
    <published>2019-04-30T12:46:10.000Z</published>
    <updated>2019-05-01T00:08:59.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Algorithm study</p><p>Studied history, variable, data type and operation of JavaScript</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Algorithm study&lt;/p
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>5. Data Type</title>
    <link href="https://sub2n.github.io/2019/04/30/5-Data-Type/"/>
    <id>https://sub2n.github.io/2019/04/30/5-Data-Type/</id>
    <published>2019-04-30T11:22:12.000Z</published>
    <updated>2019-05-03T08:22:12.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Data-Type"><a href="#What-is-Data-Type" class="headerlink" title="What is Data Type?"></a>What is Data Type?</h1><p><strong>Data Type is type of values</strong>. All of the data in JavaScript have data type.</p><h2 id="Allocatation-of-memory-space-by-Data-Type"><a href="#Allocatation-of-memory-space-by-Data-Type" class="headerlink" title="Allocatation of memory space by Data Type"></a>Allocatation of memory space by Data Type</h2><p>All of values used in programming language can be stored in memory and referenced. To store values in memory, computer need to know the size of memory space it need. Because size of memory depends on data type.</p><p>JavaScript uses a double-precision 64-bit floating-point format when creating numeric binary values.</p><h2 id="Access-memory-by-Data-Type"><a href="#Access-memory-by-Data-Type" class="headerlink" title="Access memory by Data Type"></a>Access memory by Data Type</h2><p>When refer to memory space by identifier, computer need to know the size of memory it need to read once. If variable <code>soup</code> is Number type, computer should access memory by only 8 byte. Data Type provides that informations to computer and human.</p><p>Here’s reasons why Data Type need:</p><ol><li>To determine the size of <strong>memory space</strong> that must be free when storing values</li><li>To determine how much <strong>memory space</strong> should be read at once when referring to a value</li><li>To determine <strong>how to interpret the binary</strong> be read from memory. (To Number, String etc.)</li></ol><h1 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h1><p><strong>Value is one of expression that can not be evaluated any more</strong>. The expression is statement that makes value. In other words, expression make value by being evaluated.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1 + 2 is an expression. And this expression evaluated and make a value 3.</span></span><br><span class="line"><span class="hljs-number">1</span> + <span class="hljs-number">2</span></span><br></pre></td></tr></table></figure><p>1 + 2 is an expression. It is made up of value 1, 2 and operator +. The expression is evaluated by the JavaScript engine to produce a new value of 3. In other words, expression 1 + 2 is equivalent with value 3. The newly created value of 3 can not be evaluated anymore. When you evaluate 3, it is always 3.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// The variable is assigned the value 3, which is the evaluated value of expression 1 + 2.</span></span><br><span class="line"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">1</span> + <span class="hljs-number">2</span>;</span><br></pre></td></tr></table></figure><p>After the assignment operator =, value must be located. The expression creates value. So the expression can be located after operator =.</p><p>Function in JavaScript is an object. And an object is a value. So function also can be evaluated to a value.</p><h1 id="Creation-of-Value"><a href="#Creation-of-Value" class="headerlink" title="Creation of Value"></a>Creation of Value</h1><p>Value can created by many expressions. <strong>The most basic method</strong> to create value is using <strong>literal notation</strong>. The expression is more comprehensive concept that includes literal notation, identifier expression, etc.</p><h2 id="Literal"><a href="#Literal" class="headerlink" title="Literal"></a>Literal</h2><p><strong>A literal is a fixed value itself created directly in the source code.</strong> More specifically, literal values are evaluated by the JavaScript engine.</p><p><strong>Literal notation creates literal.</strong></p><p><strong>Literal notation</strong> is method that make literal. The literal notation allows the generation of various types of values (Number, String, Boolean, null, undefined, object, array, function, regular expression, etc.) available in JavaScript. When JavaScript engines meet codes written in literal notation, they interpret the literal at the time the code is executed (runtime) and generate values.</p><p>Literal is the most basic method to generates value.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Integer literal</span></span><br><span class="line"><span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Floating point literal</span></span><br><span class="line"><span class="hljs-number">10.2</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Binary literal</span></span><br><span class="line"><span class="hljs-number">0b011010101</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Octal literal</span></span><br><span class="line"><span class="hljs-number">0o010101</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Hexa literal</span></span><br><span class="line"><span class="hljs-number">0xd100ff</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// String literal</span></span><br><span class="line"><span class="hljs-string">'Hello'</span></span><br><span class="line"><span class="hljs-string">"Subin"</span></span><br><span class="line"><span class="hljs-string">``</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Boolean literal</span></span><br><span class="line"><span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// null literal</span></span><br><span class="line"><span class="hljs-literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// undefined literal</span></span><br><span class="line"><span class="hljs-literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Object literal</span></span><br><span class="line">&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Park'</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">'yellow'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Array literal</span></span><br><span class="line">[ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Function literal</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Regular expression literal</span></span><br><span class="line">/ab+c/</span><br></pre></td></tr></table></figure><p>Literal notation can be understood as a promise between the JavaScript engine and the developer. The JavaScript engine can interpret literal notation. For example, if you want to generate a numeric value, the developer uses the numeric literal notation to ask the JavaScript engine to generate a numeric value. The JavaScript engine responds to the developer’s request to interpret numeric literals and generate numeric values.</p><h2 id="Relation-of-Value-and-Literal"><a href="#Relation-of-Value-and-Literal" class="headerlink" title="Relation of Value and Literal"></a>Relation of Value and Literal</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> soup = <span class="hljs-number">100</span>;</span><br></pre></td></tr></table></figure><p>At the right side, 100 is directly created literal by literal notation. This literal is <strong>both literal and value</strong> at the same time because it cannot be evaluated any more and can be assigned to variable.</p><p>Another example,</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> soup = <span class="hljs-number">50</span> + <span class="hljs-number">50</span>;</span><br></pre></td></tr></table></figure><p>At the right side, 50 made by literal notation and + operator was used to sum. This expression create a new value 100. As such, statement that generates value in program called <strong>expression</strong>. The right side of this code is expression and generates a new value 100.</p><p>So 50 is literal but created value 100 is not a literal, a value.</p><p>A literal can be a value in itself, but <strong>not all values are literal</strong>.</p><h2 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h2><p>A value can be generated by various methods. Various methods are expressions.</p><p>The expression refers to <strong>combination of literal, identifier(variable name, function name), operator and function calls</strong>. The expression generate one value as a result of evaluation.</p><p>In the other words, <strong>the expression is a statement that can be evaluated to one value.</strong></p><p>Everything that produces a value is an expression.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// literal notation</span></span><br><span class="line"><span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-string">'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// identifier expression(Assuming that a declaration already exists)</span></span><br><span class="line">sum</span><br><span class="line">person.name</span><br><span class="line">arr[<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// operator expression</span></span><br><span class="line"><span class="hljs-number">10</span> + <span class="hljs-number">20</span></span><br><span class="line">sum = <span class="hljs-number">10</span><span class="hljs-comment">//assignment statement</span></span><br><span class="line">sum !== <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// function/method call expression(Assuming that a declaration already exists)</span></span><br><span class="line">square()</span><br><span class="line">person.getName()</span><br></pre></td></tr></table></figure><ul><li>The assignment statement is evaluated as a assigned value.</li></ul><h1 id="Classification-of-Data-types"><a href="#Classification-of-Data-types" class="headerlink" title="Classification of Data types"></a>Classification of Data types</h1><p>All of the values in JavaScript have a data type. JavaScript provides 7 data types. 7 data types can be classified into primitive types and object(reference) types.</p><h2 id="Primitive-type"><a href="#Primitive-type" class="headerlink" title="Primitive type"></a>Primitive type</h2><ul><li>Number type : Number(Integer and Real number)</li><li>String type : Strings</li><li>Boolean type : logical <code>true</code> and <code>false</code></li><li><code>undefined</code> type : The implicitly assigned value that declared but not explicitly assigned</li><li><code>null</code> type : The value used to indicate intentionally that there is no value.</li><li>Symbol type : Seventh type that newly introduced in ES6</li></ul><h2 id="Object-reference-type"><a href="#Object-reference-type" class="headerlink" title="Object /reference type"></a>Object /reference type</h2><ul><li>Object, funtcions, array etc.</li></ul><p>For example, Number 1 and String ‘1’ are look similar but completely different values. Size of memory space that needs to be occupied is different, binary digits that are stored in memory is different, and method of reading and interpreting is different.</p><p>Also the purpose of value is different. Number type values are for arithmetic operation and String type values are for printing out text to screen. As such, developers will create values by distinguishing between types with clear intentions and JavaScript engines will treat values by distinguishing between types.</p><h1 id="Number-Type"><a href="#Number-Type" class="headerlink" title="Number Type"></a>Number Type</h1><p>In C and Java, they distinguish integer and real number so there are various number types like <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>. But JavaScript has only one Number type.</p><p>As ECMAScript specification, Number type follows double-precision 64-bit floating-point format(numbers between -(2<sup>53</sup> -1) ~ 2<sup>53</sup> -1 ).</p><p>JavaScript treats all of the Numbers as real number, has no integer type.</p><h2 id="Special-number-types"><a href="#Special-number-types" class="headerlink" title="Special number types"></a>Special number types</h2><ul><li>Infinity : positive infinity</li><li>-Infinity : negative infinity</li><li>NaN : no arithmetic operation(not-a-number)</li></ul><p>Infinity is not a mathematical term, but a number that goes beyond what JavaScript can express.</p><p>JavaScript is case-sensitive so NaN != nan, NAN, naN, Nan.</p><h1 id="String-Type"><a href="#String-Type" class="headerlink" title="String Type"></a>String Type</h1><p>The String type is used to refer text data. String is a collection of more than 0 16 bit Unicode characters (UTF-16) that can represent most of the world’s characters.</p><h2 id="How-to-know-the-size-of-String"><a href="#How-to-know-the-size-of-String" class="headerlink" title="How to know the size of String?"></a>How to know the size of String?</h2><p>The purpose of Data Type is to determine the size of <strong>memory space</strong> that must be free when storing values and to determine how much <strong>memory space</strong> should be read at once when referring to a value.</p><p>String can be generated by ‘’, “”, <code></code>. The most general expression is using ‘’.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// String Type</span></span><br><span class="line"><span class="hljs-keyword">var</span> string;</span><br><span class="line">string = <span class="hljs-string">"문자열"</span>; <span class="hljs-comment">// double quotes</span></span><br><span class="line">string = <span class="hljs-string">'문자열'</span>; <span class="hljs-comment">// single quotes</span></span><br><span class="line">string = <span class="hljs-string">`문자열`</span>; <span class="hljs-comment">// backtick</span></span><br><span class="line"></span><br><span class="line">string = <span class="hljs-string">"A 'single quote' in a string enclosed in double quotes is recognized as a string."</span>;</span><br><span class="line">string = <span class="hljs-string">'The "double quotes" in strings enclosed in single quotes are recognized as strings.'</span>;</span><br></pre></td></tr></table></figure><p>Unlike languages such as C and Java, JavaScript strings are primitive types and are <strong>immutable values</strong>. Immutable means that once a string is generated, it cannot be changed.</p><h2 id="Template-literal"><a href="#Template-literal" class="headerlink" title="Template literal"></a>Template literal</h2><p>ES6 introduced new string expression, called template literal. Template literal seems like general string, it uses backtick (`).</p><p>In a typical string, the line is not allowed and in order to represent a white space, an escape sequence beginning with a backslash () must be used.</p><p>Unlike a typical string, ES6 template literal can write strings across multiple lines, and all spaces within the template literal apply as they are.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> template = <span class="hljs-string">`&lt;ul class="nav-items"&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;li&gt;&lt;a href="#home"&gt;Home&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;li&gt;&lt;a href="#news"&gt;News&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure><p>And Strings can be concatenated using the + string operator. The + operator concatenate operands if at least one of the operand is a String.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> first = <span class="hljs-string">'Subin'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> last = <span class="hljs-string">'Park'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ES5: String Concatenation</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'My name is '</span> + first + <span class="hljs-string">' '</span> + last + <span class="hljs-string">'.'</span>);</span><br></pre></td></tr></table></figure><p>Template literal provides String Interpolation to insert new string without using + string operator.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> first = <span class="hljs-string">'Subin'</span>;</span><br><span class="line"><span class="hljs-keyword">var</span> last = <span class="hljs-string">'Park'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ES6: String Interpolation</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`My name is <span class="hljs-subst">$&#123;first&#125;</span> <span class="hljs-subst">$&#123;last&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure><p>String Interpolation wraps expression with ${ extension}. The evaluation results of the expression are then forced to type into a string.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`1 + 1 = <span class="hljs-subst">$&#123;<span class="hljs-number">1</span> + <span class="hljs-number">1</span>&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>The sequence is that Number 1 + 1 evaluated to Number 2, and be type casted to String 2.</p><h1 id="Boolean-Type"><a href="#Boolean-Type" class="headerlink" title="Boolean Type"></a>Boolean Type</h1><p>The boolean type values are only <code>true</code> and <code>false</code>. It is used to condition statement as a flow control.</p><h1 id="undefined-Type"><a href="#undefined-Type" class="headerlink" title="undefined Type"></a>undefined Type</h1><p>The value of undefined type is unique, a <code>undefined</code>. The implicitly assigned value that declared but not explicitly assigned.</p><p>If the value of variable is <code>undefined</code>, it means that the variable only be declared but not be assigned yet.</p><blockquote><h2 id="Declaration-and-Definition"><a href="#Declaration-and-Definition" class="headerlink" title="Declaration and Definition"></a>Declaration and Definition</h2><p><code>undefined</code> means not defined. The definition refers to clarifying the substance of a variable by assigning a value to the variable.</p><p>In C, definition of variable is important because if the variable only declared but not assigned, it can be contain a garbage value. But JavaScript assign <code>undefined</code> when at the time a variable is declared. In JavaScript, the boundaries between declarations and definitions are ambiguous and do not distinguish between them.</p></blockquote><h1 id="null-Type"><a href="#null-Type" class="headerlink" title="null Type"></a>null Type</h1><p>The value of null type is unique, a <code>null</code>. JavaScript is case-sensitive so null != Null, NULL.</p><p>In programming language, null is used to represent intentional absence. However, assigning <code>null</code> to a variable is not used very well. </p><p>If the function can not return a valid value, it may explicitly return <code>null</code>. </p><p>For example, <code>Document.getElementById(id)</code> return <code>null</code> if given id is not exist in document.</p><h1 id="Object-Type"><a href="#Object-Type" class="headerlink" title="Object Type"></a>Object Type</h1><p>All of the JavaScript data type excepts primitive types are object type.</p><h1 id="Dynamic-Typing"><a href="#Dynamic-Typing" class="headerlink" title="Dynamic Typing"></a>Dynamic Typing</h1><h2 id="Static-type-language"><a href="#Static-type-language" class="headerlink" title="Static type language"></a>Static type language</h2><p>Static / Strong type languages ​​such as C or Java must declare a data type in advance. This is called an explicit type declaration. The following is an example of declaring an integer type variable in C.</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 4 byte integer type</span></span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1 byte integer type</span></span><br><span class="line"><span class="hljs-keyword">char</span> c;</span><br></pre></td></tr></table></figure><p>Static type language can not change a type of value and only can assign values that match the type declared in the variable. Representative static type languages are C, C++, Java, Kotlin, Go, Hashell, Rust, Scala etc.</p><h2 id="Dynamic-type-language"><a href="#Dynamic-type-language" class="headerlink" title="Dynamic type language"></a>Dynamic type language</h2><p>JavaScript does not declare the type of variable when declaration. But only use the keywords such as <code>var</code>, <code>let</code>, <code>const</code> to declare a variable. JavaScript can assign any type of values.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> foo;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// undefined</span></span><br><span class="line"></span><br><span class="line">foo = <span class="hljs-number">3</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// number</span></span><br><span class="line"></span><br><span class="line">foo = <span class="hljs-string">'Hello'</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// string</span></span><br><span class="line"></span><br><span class="line">foo = <span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// boolean</span></span><br><span class="line"></span><br><span class="line">foo = <span class="hljs-literal">null</span>;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// object</span></span><br><span class="line"></span><br><span class="line">foo = <span class="hljs-built_in">Symbol</span>(); <span class="hljs-comment">// symbol</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// symbol</span></span><br><span class="line"></span><br><span class="line">foo = &#123;&#125;; <span class="hljs-comment">// object</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// object</span></span><br><span class="line"></span><br><span class="line">foo = []; <span class="hljs-comment">// array</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// object</span></span><br><span class="line"></span><br><span class="line">foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;; <span class="hljs-comment">// 함수</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo);  <span class="hljs-comment">// function</span></span><br></pre></td></tr></table></figure><p>A static type language determines the type of a variable <strong>at the time of variable declaration</strong> and can not change the type of a variable. JavaScript can dynamically determine the type of the variable <strong>at the time of assigning the value</strong> and change the type of the variable at any time.</p><p>In other words, JavaScript variables are type-determined by assignments rather than declarations. And the type of variable can be changed by reassignment at any time. This feature is called <strong>Dynamic Typing</strong>, and JavaScript is called a Dynamic / weak type language to distinguish it from Static type languages. Typical dynamic type languages ​​are JavaScript, Python, PHP, Ruby, Lisp, and Perl.</p><h2 id="Parameter-and-Argument"><a href="#Parameter-and-Argument" class="headerlink" title="Parameter and Argument"></a>Parameter and Argument</h2><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// x, y: parameter</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-comment">// type check is needed</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x, y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1, 2: argument</span></span><br><span class="line">add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><p>A <strong>parameter</strong> is a variable in a method definition. When a method is called, the <strong>arguments</strong> are the data you pass into the method’s <strong>parameters</strong>. <strong>Parameter</strong> is variable in the declaration of function. <strong>Argument</strong> is the actual value of this variable that gets passed to function.</p><h2 id="Things-to-keep-in-mind-when-using-variables"><a href="#Things-to-keep-in-mind-when-using-variables" class="headerlink" title="Things to keep in mind when using variables"></a>Things to keep in mind when using variables</h2><ul><li>Actively reduce the use of variables. The greater the number of variables, the higher the probability of error occurrence.</li><li>Do not use global variables. Make the life cycle of the variable as short as possible.</li><li>Use a constant rather than a variable to suppress the change of value. Use <code>const</code> instead <code>let</code> if a variable is never reassigned.</li><li>The variable name is named so that the reason for the existence of the variable can be grasped.</li></ul><hr><p>Reference</p><p><a href="https://poiemaweb.com/js-data-type-variable" target="_blank" rel="noopener">Data type &amp; Variable</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-Data-Type&quot;&gt;&lt;a href=&quot;#What-is-Data-Type&quot; class=&quot;headerlink&quot; title=&quot;What is Data Type?&quot;&gt;&lt;/a&gt;What is Data Type?&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Data Type" scheme="https://sub2n.github.io/tags/Data-Type/"/>
    
  </entry>
  
  <entry>
    <title>4. Variable</title>
    <link href="https://sub2n.github.io/2019/04/30/4-Variable/"/>
    <id>https://sub2n.github.io/2019/04/30/4-Variable/</id>
    <published>2019-04-30T07:07:31.000Z</published>
    <updated>2019-05-03T05:40:14.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-variable"><a href="#What-is-variable" class="headerlink" title="What is variable?"></a>What is variable?</h1><p>Application uses data. And the variable is core concept for managing data.</p><p>Computer is computing machine. To do simple operation like sum of 1 and 2, computer should memorize these operand 1 and 2 in register. Computer uses memory to memorze the data. </p><blockquote><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>Memory is a collection of memory cells that can store data. Size of one cell is 1byte(8bit) and computer read or wirte data by one cell, 1 byte size. Each memory cell has its own address. That address means location of memory space and can be represented from 0 to memory size.</p></blockquote><p>Computer can simply compute 1 + 2, but how to use this result of sum? What you need at this point is the variable. To store data in memory and read to use data from memory, programming language provide variable.</p><p><strong>Variable</strong> refers name of memory space or memory space itself. Simply, variable is mechanism that store and refer data values.</p><p>Through variable, developer can store, refer and change value wihout access to memory directly.</p><p>Just, like it.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> result = <span class="hljs-number">1</span> + <span class="hljs-number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/48080762/56947343-cf959100-6b67-11e9-8bde-d3e9553a4bf1.png" alt="variable in memory"></p><p>In JavaScript, <code>var</code> means variable. In that code, ‘result’ is a name of the variable and 3 is a value of the variable. Storing value in variable is called <strong>assignment</strong> and reading data from variable is called <strong>reference</strong>. </p><p>The variable name is the name given to the memory space where the value is stored for the person.</p><h1 id="Declaration-of-variable"><a href="#Declaration-of-variable" class="headerlink" title="Declaration of variable"></a>Declaration of variable</h1><p>Variable name is the name given to memory space. To use a variable, variable must be declared. Use <code>var</code>, <code>let</code>, <code>const</code> keywords to declare variable.</p><p>Before ES6 introduced <code>let</code> and <code>const</code> keywords, <code>var</code> was the only method to declare variable. </p><blockquote><h2 id="Keyword"><a href="#Keyword" class="headerlink" title="Keyword"></a>Keyword</h2><p>Keyword is kind of command that defines the actions performed by JavaScript engines that execute JavaScript code. When JavaScript engine meets </p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> soup;</span><br></pre></td></tr></table></figure><p>After declaring a variable, the variable never been assigned. Therefore, the memory space allocated by the variable declaration may be considered to be empty, but the allocated memory space is implicitly allocated with the value <code>undefined</code> by the JavaScript engine. This is a unique feature of JavaScript.</p><blockquote><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p><code>undefined</code> is primitive value of JavaScript.</p></blockquote><p>JavaScript engine operates declaration of variable by 2 phases.</p><ol><li>Declaration phase : Register the variable name to tell the JavaScript engine the existence of the variable.</li><li>Initialization phase : Allocates memory space to store the value and implicitly assigns <code>undefined</code>.</li></ol><p>Variable declaration using the <code>var</code> keyword proceeds both in the declaration phase and in the initialization phase. <code>var soup;</code> registers the variable name soup through the declaration phase, and initializes it by assigning <code>undefined</code> to the variable score through the initialization step. </p><p>In general, <strong>initialization</strong> refers to assigning a value first after a variable is declared. JavaScript automatically do implicit initialization to <code>undefined</code>. Therefore, even if you declare a variable and do not assign any value, the variable has a value of <code>undefined</code>.</p><p>If you do not go through the initialization phase, the reserved memory space may still contain values that were previously used by other applications. These values are called <strong>garbage values</strong>. Therefore, garbage value can be obtained by referring to a variable value immediately after allocating memory space and not allocating a value.</p><p>Declarations are required to use variables. Not just variables, but all identifiers (functions, classes, etc.). If you access the identifier without declaration, a ReferenceError is raised. ReferenceError is a error that occurs when the JavaScript engine tries to reference a value through an identifier but can not find the registered identifier.</p><h1 id="Variable-Declaration-run-time-and-Hoisting"><a href="#Variable-Declaration-run-time-and-Hoisting" class="headerlink" title="Variable Declaration run time and Hoisting"></a>Variable Declaration run time and Hoisting</h1><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(soup);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> soup;</span><br></pre></td></tr></table></figure><p>In C, the avobe code will occur compile error because it access to the variable before its declaration. But in JavaScript print <code>undefined</code> instead of ReferenceError.</p><p>Variable declaration is processed <strong>before the run-time</strong> that source code execute in line step. In other words, JavaScript engine estimate entire source code in advance. At this time, it finds all of declaration(variable declaration, function declaration), declare and initialize identifiers. After that run source codes sequentially except declarations.</p><h2 id="What-is-Hoisting"><a href="#What-is-Hoisting" class="headerlink" title="What is Hoisting?"></a>What is Hoisting?</h2><p>Hoist means to lift something. It is a variable that is hoisted in JavaScript. </p><p>Hoist means that the definition of a variable is separated into declarations and allocations according to its scope.<br>Declarations execute before other codes so it seems like declarations are hoisted to top of the source code. In JavaScript, all of variable declarations are hoisted. </p><p><strong>Warning</strong></p><p>Function hoisting hoists function declarations too, but not hoist the value of variables. So think separate declarations and assignment is important. It’s relevant with run-time and parsing-time.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ok'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// Ok</span></span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ok'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-comment">// Syntax error!</span></span><br></pre></td></tr></table></figure><h1 id="Assignment-of-Values"><a href="#Assignment-of-Values" class="headerlink" title="Assignment of Values"></a>Assignment of Values</h1><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> soup; <span class="hljs-comment">// Variable Declaration</span></span><br><span class="line">soup = <span class="hljs-number">3</span>; <span class="hljs-comment">// Assignment value</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> soup = <span class="hljs-number">3</span>; <span class="hljs-comment">// Variable declaration and assigment</span></span><br></pre></td></tr></table></figure><p>Variable declaration is executed at parsing-time and assignment is executed in run-time, affter the parsing-time. Of course when declare variable, it is initialized to <code>undefined</code>. </p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">console</span>.log(soup);  <span class="hljs-comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> soup = <span class="hljs-number">3</span>;       <span class="hljs-comment">// Variable declaration and assigment</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(soup);  <span class="hljs-comment">// 3</span></span><br></pre></td></tr></table></figure><p>So soup is re-initialized to 3.</p><h1 id="Reassignment-of-Value"><a href="#Reassignment-of-Value" class="headerlink" title="Reassignment of Value"></a>Reassignment of Value</h1><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> soup = <span class="hljs-number">3</span>; <span class="hljs-comment">// Declaration and Assignment</span></span><br><span class="line">soup = <span class="hljs-number">5</span>; <span class="hljs-comment">// Reassignment</span></span><br></pre></td></tr></table></figure><p>Variable that declared by <code>var</code> keyword can be reassigned. Reassignment is that variable discards the current value and store new value.</p><p>Reassignment changes old value to new value. If the reassignment is not possible, it is called a <strong>constant</strong> not a variable. A constant is a value that does not change once set. In other words, constants are variables that can be assigned only once.</p><blockquote><h2 id="const-keyword"><a href="#const-keyword" class="headerlink" title="const keyword"></a>const keyword</h2><p>Introduced from ES6, variable that declared by <code>const</code> is prohibited reassignment. But <code>const</code> keyword does not only used for constant.</p></blockquote><h1 id="Identifier-Naming-Convention"><a href="#Identifier-Naming-Convention" class="headerlink" title="Identifier Naming Convention"></a>Identifier Naming Convention</h1><p>An identifier is a unique name that can identify any data. The identifier shall conform to the following naming conventions.</p><ul><li>Identifiers can include letters, numbers, underscore ( _ ), and dollar sign ($), except for special characters.</li><li>However, identifiers must begin with a letter, underscore ( _ ), or dollar sign ($), except for special characters. It is not allowed to start with a number.</li><li>Reserved words can not be used as identifiers.</li></ul><p>Since the variable name is an identifier, the above naming rules must be followed. There are 4 naming conventions that are often used to distinguish words at a time when naming identifiers composed of one or more English words.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// camelCase</span></span><br><span class="line"><span class="hljs-keyword">var</span> firstName;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// snake_case</span></span><br><span class="line"><span class="hljs-keyword">var</span> first_name;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// PascalCase</span></span><br><span class="line"><span class="hljs-keyword">var</span> FirstName;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// typeHungarianCase</span></span><br><span class="line"><span class="hljs-keyword">var</span> strFirstName;          <span class="hljs-comment">// type + identifier</span></span><br><span class="line"><span class="hljs-keyword">var</span> $elem = $(<span class="hljs-string">'.myClass'</span>); <span class="hljs-comment">// jQuery</span></span><br></pre></td></tr></table></figure><p>Any naming convention may be used if it is consistent. The most common is to <strong>use a camel case for the name of a variable or function</strong> and <strong>a Pascal case for the name of a constructor function or class</strong>.</p><p>In order to improve the readability of the entire code, it is advantageous to follow the above naming convention.</p><hr><p>Reference</p><p><a href="https://poiemaweb.com/js-data-type-variable" target="_blank" rel="noopener">Data type &amp; Variable</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-variable&quot;&gt;&lt;a href=&quot;#What-is-variable&quot; class=&quot;headerlink&quot; title=&quot;What is variable?&quot;&gt;&lt;/a&gt;What is variable?&lt;/h1&gt;&lt;p&gt;Application 
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Variable" scheme="https://sub2n.github.io/tags/Variable/"/>
    
      <category term="Hoisting" scheme="https://sub2n.github.io/tags/Hoisting/"/>
    
  </entry>
  
  <entry>
    <title>3. JavaScript Develop Environment and Execute</title>
    <link href="https://sub2n.github.io/2019/04/30/3-JavaScript-Develop-Environment-and-Execute/"/>
    <id>https://sub2n.github.io/2019/04/30/3-JavaScript-Develop-Environment-and-Execute/</id>
    <published>2019-04-30T02:53:43.000Z</published>
    <updated>2019-04-30T07:06:27.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Before-this-chapter-What-is-Web-API"><a href="#Before-this-chapter-What-is-Web-API" class="headerlink" title="Before this chapter, What is Web API?"></a>Before this chapter, What is Web API?</h1><p>While the most common scripting language ECMAscript (more widely known as JavaScript) is developed by Ecma, a great many of the APIs made available in browsers have been defined at W3C.</p><h2 id="What-is-scripting"><a href="#What-is-scripting" class="headerlink" title="What is scripting?"></a>What is scripting?</h2><p>A script is program code that doesn’t need pre-processing(e.g. compiling) before being run. </p><p>In the context of Web browser, scripting usually refers to program code written in <strong>JavaScript</strong> that is <strong>executed by browser when a page is downloaded</strong>, or in response to an <strong>event triggered</strong> by the user.</p><p>Scripting can make Web pages more dynamic.<br>For Example, without reloading a new version of a page it may</p><ul><li>allow modifications to the content of that page : DHTML(Dynamic HTML)</li><li>allow content to be added to or sent from that page : AJAX(Asyncronous JavaScript and XML)</li></ul><h2 id="What-scripting-interfaces-are-available"><a href="#What-scripting-interfaces-are-available" class="headerlink" title="What scripting interfaces are available ?"></a>What scripting interfaces are available ?</h2><p>The most basic scripting interface developed by W3C is the <strong>DOM</strong>, the Document Object Model which allows programs and scripts to dynamically access and update the content, structure and stype of documents. DOM specifications form the core of DHTML.</p><p>Modifications of the content using the DOM by the user and by scripts trigger events that developers can make use of to build rich user interface.</p><p>A number of more advanced interfaces are being standardized, for instance:</p><ul><li><strong>XMLHttpRequest</strong> makes it possible to load additional content from the Web without loading a new document, a core component of AJAX,</li><li><strong>the Geolocation API</strong> makes the user’s current location available to browser-based applications,</li><li>several APIs make the integration of Web applications with the local file system and storage seamless.</li></ul><h1 id="Execution-Environment-of-JavaScript"><a href="#Execution-Environment-of-JavaScript" class="headerlink" title="Execution Environment of JavaScript"></a>Execution Environment of JavaScript</h1><p>All browsers have JavaScript engine that can inpterpreter and execute JavaScript. Not only browser but also Node.js has JavaScript engine. So JavaScript can operate in both browser and Node.js environment. Basically code that operate in browser also operate in Node.js environment too.</p><p>But the browser and Node.js have different purpose. The main purpose of browser is execute HTML, CSS, JavaScript to rendering web page on screen, but the other one is provide server development envorinment. So both of browser and Node.js can operate ECMAScript(core of JavaScript) but additional features provided by Node.js and browser and ECMAScript are incompatible.</p><ol><li>Node.js environment<ul><li>ES + Node.js API (file control)</li></ul></li><li>Browser<ul><li>Rendering HTML, CSS</li><li>JavaScript : ES + Web API (created by browser vendors and managed by W3C) (DOM API, event) only browser can execute </li></ul></li></ol><p>As such, the browser supports ECMAScript and client side Web APIs such as DOM, BOM, Canvas, XMLHttpRequest, Fetch, requestAnimationFrame, SVG, Web Storage, Web Component, and Web worker. Node.js does not support client side Web APIs and supports ECMAScript and Node.js-specific APIs.</p><h1 id="Web-Browser"><a href="#Web-Browser" class="headerlink" title="Web Browser"></a>Web Browser</h1><h2 id="How-does-a-Web-Browser-work"><a href="#How-does-a-Web-Browser-work" class="headerlink" title="How does a Web Browser work?"></a>How does a Web Browser work?</h2><p>Most programming languages run on Operating System, but JavaScript in Web application runs with HTML and CSS in a browser. So efficient JavaScript programming is available when considering Web browser environment.</p><p>Core function of Web browser is that request the Web page user want and represent the response from server in browser.</p><ol><li>Web browser receives HTML, CSS, JavaScript, and image files from the server.</li><li>HTML and CSS files are parsed by the rendering enginde’s HTML parser and CSS parser, </li><li>converted into DOM tree and CSSOM tree, </li><li>and combined into a Render Tree. Browser represent Web pages by this Render tree.</li></ol><p>JavaScript is processed by JavaScript engine, not the Rendering engine. </p><ol><li>HTML parser stops DOM construction process when meet the script tag, and passes control to the JavaScript engine to execute JavaScript code.</li><li>Control passed JavaScript engine loads, parses and executes the JavaScript code in script tag or JavaScript file defined in script tag’s src attribute.</li><li>Interpreter that used in most modern Web browser doesn’t compile like typical compiler language but compiles and executes a part of source code in complex way.</li></ol><h2 id="Interperter"><a href="#Interperter" class="headerlink" title="Interperter"></a>Interperter</h2><ul><li>Translates program one statement at a time.</li><li>It takes less amount of time to analyze the source code but the overall execution time is slower.</li><li>No intermediate object code is generated, hence are memory efficient.</li><li>Continues translating the program until the first error is met, in which case it stops. Hence debugging is easy.</li><li>Programming language like Python, Ruby use interpreters.</li></ul><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><ul><li>Scans the entire program and translates it as a whole into machine code.</li><li>It takes large amount of time to analyze the source code but the overall execution time is comparatively faster.</li><li>It takes large amount of time to analyze the source code but the overall execution time is comparatively faster.</li><li>It generates the error message only after scanning the whole program. Hence debugging is comparatively hard.</li><li>Programming language like C, C++ use compilers.</li></ul><p>Source code is composed of simple strings. So interpret string codes to make the <strong>AST(Abstrack Syntax Tree)</strong> that has syntax and semantics.</p><ul><li>Tokenizing<br>Separate the source code into tokens, the smallest unit of meaning, by lexical analysis. </li><li>Parsing<br>Syntactically analysis the set of tokens to create AST.</li><li>Execute code<br>Created AST is converted to byte code or optimized machine code and run by interpreter.</li></ul><p>If execution of JavaScript is finished, pass control to HTML parser and resume DOM creation from the time when browser stopped.</p><p>As such, browsers process HTML, CSS, and JavaScript <strong>synchronously</strong>. This means creation of DOM can be delayed by blocking from script tag. So the position of script tag has important meaning.</p><p>You should put script code at bottom of HTML file. It prevent error that can be occured when JavaScript touch DOM before DOM creation completed.</p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>A client side, or simple web application that works on a web browser, can be developed with just a browser. However, as the project grows in size, it is necessary to introduce external libraries such as React and jQuery, or to use several tools such as Babel, Webpack, ESLint, etc. Node.js and npm are required.</p><h2 id="Node-js-and-npm"><a href="#Node-js-and-npm" class="headerlink" title="Node.js and npm"></a>Node.js and npm</h2><p>Node.js, announced by Ryan Dahl in 2009 is a JavaScript runtime environment built with Chrome V8 JavaScript engine. Simply, Node.js is JavaScript execution environment that enable JavaScript to run in addition to browser.</p><p>npm(node package manager) is JavaScript package manager. Itself a repository include packaged modules available in Node.js and provide CLI to install and management.</p><hr><p>Reference</p><p><a href="https://www.w3.org/standards/webdesign/script" target="_blank" rel="noopener">JavaScript Web API</a></p><p><a href="https://poiemaweb.com/js-hello-world" target="_blank" rel="noopener">Hello world</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Before-this-chapter-What-is-Web-API&quot;&gt;&lt;a href=&quot;#Before-this-chapter-What-is-Web-API&quot; class=&quot;headerlink&quot; title=&quot;Before this chapter, W
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://sub2n.github.io/tags/Node-js/"/>
    
      <category term="Web Browser" scheme="https://sub2n.github.io/tags/Web-Browser/"/>
    
  </entry>
  
  <entry>
    <title>190429-TIL</title>
    <link href="https://sub2n.github.io/2019/04/29/190429-TIL/"/>
    <id>https://sub2n.github.io/2019/04/29/190429-TIL/</id>
    <published>2019-04-29T12:45:46.000Z</published>
    <updated>2019-04-30T01:11:18.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><p>Solved Morse code decoding problem <a href="https://sub2n.github.io/2019/04/29/CodeWars-6kyu-Decode-the-Morse-code">my Algorithm Post</a></p><p>Wrote posting about JavaScript <a href="https://sub2n.github.io/2019/04/29/1-What-is-Programming/">1. What is Programming?</a></p><p>Studied Data Structure and posted <a href="https://sub2n.github.io/2019/04/29/1-OOP-and-ADT/">1. OOP and ADT</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;p&gt;Solved Morse code 
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>1. OOP and ADT</title>
    <link href="https://sub2n.github.io/2019/04/29/1-OOP-and-ADT/"/>
    <id>https://sub2n.github.io/2019/04/29/1-OOP-and-ADT/</id>
    <published>2019-04-29T11:51:41.000Z</published>
    <updated>2019-04-29T12:45:27.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object-oriented-Design"><a href="#Object-oriented-Design" class="headerlink" title="Object-oriented Design"></a>Object-oriented Design</h1><p>Object-oriented design has fundamnental defferences from structured programming design methods. The two methods are similar in that they develop complex systems with divide and conquer, but differ in how to divide a given task.</p><h2 id="Algorithmic-Decomposition-vs-Object-oriented-Decomposition"><a href="#Algorithmic-Decomposition-vs-Object-oriented-Decomposition" class="headerlink" title="Algorithmic Decomposition vs Object-oriented Decomposition"></a>Algorithmic Decomposition vs Object-oriented Decomposition</h2><p>Traditional programming techniques used to algoritmicc decomposition. Algorithmic or functional decomposition treats software as a process and breaks it down into modules that represent the steps of the process. These modules are implemented in language syntax such as procedure of Pascal, subprogram of FORTRAN, function in C. Data Structure to implement the program is of secondary concern and should be considered only after the project has been divided into functional modules.</p><p>Object-oriented decomposition views software as set of Well-defined objects that model software well for entity in applications. These objects form software sysyem by interaction. Functional decomposition should be considered after system decomposied to objects.</p><p>The majot positive of object-oriented design is reuse of software. This enables flexible software systems that can change and evolve as the requirements of the system change.</p><h2 id="Basic-concept-of-Object-oriented-Programming"><a href="#Basic-concept-of-Object-oriented-Programming" class="headerlink" title="Basic concept of Object-oriented Programming"></a>Basic concept of Object-oriented Programming</h2><p>Definition : An object is an entity that performs calculations and has states. So object can be considered compination of data and operations.</p><p>Definition : OOP has methods such as ..</p><ol><li>An object is basic building block.</li><li>Each object is instance of some type(class).</li><li>Classes are connected each other by inheritance. (Programming not using inheritance does not considered as object-oriented programming)</li></ol><p>Definition : Called object-oriented language if some language has a function like ..</p><ol><li>Support object</li><li>All objects are involved in class</li><li>Support inheritance</li></ol><p>A language support 1, 2 not 3 called “object-based language”. (JavaScript)</p><h1 id="Data-Abstraction-and-Encapsulation"><a href="#Data-Abstraction-and-Encapsulation" class="headerlink" title="Data Abstraction and Encapsulation"></a>Data Abstraction and Encapsulation</h1><p>The concept of abstraction and encapsulation is used to human-machine interaction.</p><p>Definition : Data encapsulation(or Information Hiding) hides the detailed implementation of data objects from the outside world.</p><p>Definition : Data abstraction is the separation of specification and implementation of data objects.</p><p>C++ has <code>char</code>, <code>int</code>, <code>float</code>, <code>double</code> as a default data type. These data types are modified if <code>short</code>, <code>long</code>, <code>signed</code>, <code>unsigned</code> keywords are used. All programming languages provide at least a minimum of predefined data types, plus the ability to create new user-defined types.</p><p>Definition : Data type is set of objects and operations of that objects.</p><p>Whatever program addresses default data type or user-defined data type, object and operation must be considered.</p><p>Definition : ADT(Abstraction Data Type) is a data type in which the specifications of objects and the specifications of operations on these objects are separated from the representation of the objects and the implementation of the operations.</p><p>To emphasize the separation of specification and implementation, the ADT definition of the object will begin first. In this way, people can understand the essential elements of an object without a complex description of the representation of the object and the actual implementation of the operation.</p><hr><p>ADT NaturalNumber is<br>  Object : from 0 to MAXINT<br>  Functions :<br>    All x, y in NaturalNumber</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object-oriented-Design&quot;&gt;&lt;a href=&quot;#Object-oriented-Design&quot; class=&quot;headerlink&quot; title=&quot;Object-oriented Design&quot;&gt;&lt;/a&gt;Object-oriented Desi
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Data Structure" scheme="https://sub2n.github.io/categories/Computer-Engineering/Data-Structure/"/>
    
    
      <category term="OOP" scheme="https://sub2n.github.io/tags/OOP/"/>
    
      <category term="ADT" scheme="https://sub2n.github.io/tags/ADT/"/>
    
      <category term="Encapsulation" scheme="https://sub2n.github.io/tags/Encapsulation/"/>
    
      <category term="Abstraction" scheme="https://sub2n.github.io/tags/Abstraction/"/>
    
  </entry>
  
  <entry>
    <title>2. What is JavaScript?</title>
    <link href="https://sub2n.github.io/2019/04/29/2-What-is-JavaScript/"/>
    <id>https://sub2n.github.io/2019/04/29/2-What-is-JavaScript/</id>
    <published>2019-04-29T09:10:43.000Z</published>
    <updated>2019-04-30T06:06:09.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Creation-of-JavaScript"><a href="#1-Creation-of-JavaScript" class="headerlink" title="1. Creation of JavaScript"></a>1. Creation of JavaScript</h1><p>In 1995, the Netscape Communications decided to introduce a lightweight programming language to dynamically express static HTML. So JavaScript developed by Brendan Eich.</p><p>JavaScript was mounted on Netscape Navigator 2 which is web browser of Netscape Communications, named “Mocha” in March, 1996. In September, renamed to “LiveScript” and finally named as “JavaScript” in December.</p><p>So JavaScript is now the standard programming language for all browsers. But JavaScript has not grown smoothly</p><h1 id="2-Fragmentation-and-Standardization-of-JavaScript"><a href="#2-Fragmentation-and-Standardization-of-JavaScript" class="headerlink" title="2. Fragmentation and Standardization of JavaScript"></a>2. Fragmentation and Standardization of JavaScript</h1><p>In August 1996, Microsoft added a derived version of JavaScript, “JScript”, to Internet Explorer 3.0. But the problem is that JScript and JavaScript are not standardized and are moderately compatible. In other words, they have competitively begun adding features that only work with their browsers to gain market share in their browsers.</p><p>This has led to cross-browsing issues where webpages are not working properly, and it has become extremely difficult to develop webpages that work across all browsers.</p><p>Thus, the need for stadard of JavaScript which works same in all browser has begun to be raised. For this, Netscape Communications requested standardization of JavaScript to ECMA International in November 1996.</p><table><thead><tr><th>Version</th><th>Release</th><th>Specification</th></tr></thead><tbody><tr><td>ES1</td><td>1997</td><td>First version</td></tr><tr><td>ES2</td><td>1998</td><td>Application of the same standards as ISO/IEC 16262 international standards</td></tr><tr><td>ES3</td><td>1999</td><td>Regular Expression, try … catch Exception</td></tr><tr><td>ES5</td><td>2009</td><td>Standard released with HTML5. JSON, strict mode, accessor property(getter, setter), improved array manipulation (forEach, map, filter, reduce, some, every)</td></tr><tr><td>ES6 (ECMAScript 2015)</td><td>2015</td><td>let, const, class, arrow function expression(=&gt;), template literal, destructuring assignment, spread operator, rest parameter, Symbol, Promise, Map/Set, iterator/generator, module import/export</td></tr><tr><td>ES7 (ECMAScript 2016)</td><td>2016</td><td>Exponential operator(**), Array.prototype.includes, String.prototype.includes</td></tr><tr><td>ES8 (ECMAScript 2017)</td><td>2017</td><td>async/await, Object static method(Object.values, Object.getOwnPropertyDescriptors)</td></tr><tr><td>ES9 (ECMAScript 2018)</td><td>2018</td><td>Object Rest/Spread Property</td></tr></tbody></table><h1 id="3-History-of-JavaScript"><a href="#3-History-of-JavaScript" class="headerlink" title="3. History of JavaScript"></a>3. History of JavaScript</h1><p>Early JavaScript was used for limited purposes to perform the supplementary functions of webpages. During this time, most logics were run primarily on Web servers and browsers were simply rendering HTML and CSS delivered from the server.</p><blockquote><h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering?"></a>Rendering?</h2><p>Rendering refers to interpreting data expressed in HTML and CSS and expressing it visually on a browser.</p></blockquote><p>In 1999, Ajax(Asynchronous JavaScript and XML), a communication function that allows server and browser to exchange data asynchronously using JavaScript, has emerger under the name of XMLHttpRequest.</p><p>Previous webpages worked by receiving complete HTML from the server and rendering the entire web page. So when screen switches, it received a new HTML file from server and started rendering a whole web page again from beginning.</p><p>This is a disadvantageous way because unnecessary data communication occurs when receive HTML including unchanged parts from a server and browser should be rendering that whole HTML again including unchanged parts. This causes the screen to flash momentarily when a screen transition occurs, which has been accepted as the limit for web applications.</p><p>The advent of Ajax changed the previous paradigm. In other words, it make possible to do not rendering again the parts unnecessary to change and rendering only the part need to change by receiving only a necessary data from server. This enables fast performance and smooth screen transitions similar to desktop applications in web browsers.</p><p>In 2005, Google Maps, which operates on JavaScript and Ajax in a web browser, has shown performance and smooth screen transitions that are comparable to desktop applications.</p><p>In 2006, the advent of jQuery made it easier to control the rather cumbersome DOM(Document Object Model) and resolved cross-browsing issues to some extent. jQuery quickly secured a large user base. This resulted in the mass production of developers who preferred jQuery, which was easier to learn and more intuitive than JavaScript.</p><p>In 2008, V8 JavaScript Engine from google made more fast performance in web browser. With the advent of the V8 JavaScript engine, JavaScript has become a web application development programming language that can provide a user experience(UX) similar to that of desktop applications.</p><p>In 2009, the Node.js that enable operate JavaScript in an environment other than a browser emerged. JavaScript is now a standard for web programming languages that cover not only front-end but also back-end areas.</p><h1 id="4-JavaScript-and-ECMAScript"><a href="#4-JavaScript-and-ECMAScript" class="headerlink" title="4. JavaScript and ECMAScript"></a>4. JavaScript and ECMAScript</h1><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMAScript refers ECMA-262, which standard specification of JavaScript and defines core syntax such as the type, value, objace and property, function, built-in object, etc. Each</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript is typically a programming language that encompasses ECMAScript as a core and client side Web API, which is supported separately by the browser.</p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><p>DOM, BOM, Canvas, XMLHttpRequest, Fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web worker, etc.</p><p>Apart from ECMAScript, the client side Web API is managed as a separate specification by the World Wide Web Consortium (W3C).</p><h1 id="5-Characteristics-of-JavaScript"><a href="#5-Characteristics-of-JavaScript" class="headerlink" title="5. Characteristics of JavaScript"></a>5. Characteristics of JavaScript</h1><p>JavaScript is one of the components that compose the web with HTML and CSS, and is the only programming language that works with a web browser. It use basic syntax from C, prototype-based inheritance from Self, first-class function from Scheme.</p><p>JavaScript is interpreter language that developer not have to do compile work. Almost modern JavaScript engines(V8 by Chrome, Spidermonkey by FireFox, JavaScriptCore by Safari, Chakra by Microsoft Edge) combined advantage of interpreter and compiler to resole disadvantage of slow interpreter.</p><p>Actually JavaScript complie but not make executable file. So JavaScript is interpreter lanuage.</p><p>JavaScript is a multi-paradigm programming language that supports imprerative, functional, and prototype-based object-oriented programming.</p><hr><p>Reference</p><p><a href="https://poiemaweb.com/js-introduction" target="_blank" rel="noopener">자바스크립트란?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Creation-of-JavaScript&quot;&gt;&lt;a href=&quot;#1-Creation-of-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;1. Creation of JavaScript&quot;&gt;&lt;/a&gt;1. Creation o
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="ECMA" scheme="https://sub2n.github.io/tags/ECMA/"/>
    
  </entry>
  
  <entry>
    <title>1. What is Programming?</title>
    <link href="https://sub2n.github.io/2019/04/29/1-What-is-Programming/"/>
    <id>https://sub2n.github.io/2019/04/29/1-What-is-Programming/</id>
    <published>2019-04-29T09:10:24.000Z</published>
    <updated>2019-05-03T08:29:43.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Computational-Thinking"><a href="#1-Computational-Thinking" class="headerlink" title="1. Computational Thinking"></a>1. Computational Thinking</h1><p>Programming is communication that sends commands to be performed to the computer. In order to define the “command to be performed,” the resolution task (problem/requirements) must be clearly understood, the complexity must be simply desconstructed, the data organized and sorted by modeling, and the actions arranged in sequence.</p><p>In other words, clear understanding of reguirements and proper definitaion of solution are needed before programming. What is required at this time is the problem-solving skill. Some people tend to equate problem-solving abilities with algorithms, but it does not. Of course studying algorithm is very helpful to get problem-solving skill, but problem-solving skill is more higher level of ability.</p><p>Programming is just a means of expression to produce the final result of solving a problem. Programming itself doesn’t solve the problem. Considering the solution of the problem, you should look at preoblem from a computer’s point of view. Computational thinking is required this kind of time. You should do computational thinking with solving problems.</p><p>This requires logical and mathematical thinking, and all concepts that will be used within the programming should be defined as assessable, breaking down and patterning the resolution tasks into smaller units.</p><h1 id="2-Programming-Language"><a href="#2-Programming-Language" class="headerlink" title="2. Programming Language"></a>2. Programming Language</h1><p>As above, solution defined based on problem-solving skill should be communicated to computer. At this point, computer do perform the commands. So the command should be communicated by machine code, not a natural language. But it is very difficult that human to understand machine code. It is even described in bits.</p><p>The most useful alternative to delivering commands in direct mechanical language is to use a kind of translator to write a program using “programming language” consisting of promised phrases (Syntax) that humans can understand and then convert it into machine language that computers can understand. This kind of translator is called complier or interpreter.</p><p>Programming is a kind of communication that sends commands to the computer that you want to perform using the programming language. The programming language is expressed as a combination of Syntax and Semantics.</p><h1 id="3-Syntax-amp-Semantics"><a href="#3-Syntax-amp-Semantics" class="headerlink" title="3. Syntax &amp; Semantics"></a>3. Syntax &amp; Semantics</h1><p>Understanding both syntax and semantics properly is important to use language well. In the end, solutions created through problem-solving ability are expressed through the syntax of programming languages. The code is a specific implementation of the solution. This is only archeive semantics when the requirements are fulfilled(problem solved).</p><p>Most of programming languages provide syntax such as variables and values, keywords, operators, expressions, flow control by conditional and loop statements, statements, functions(set of statements), and data structures such as objects and arrays. </p><p>What a programmer needs to do is find a solution for problem and implement it in a code that has correct syntax. Implemented code should act as expected and solve the problem. It should be predictable and explainable how the code work inside the computer and what it will give back.</p><p>To do this, it is important to have an accurate understanding of the basic concepts and operating principles of programming language. If you just copy &amp; paste code without understand basic concept and principle, that code is not reliable. And problem-solving skills will not grow anymore.</p><hr><p>Reference</p><p><a href="https://poiemaweb.com/coding" target="_blank" rel="noopener">프로그래밍이란?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Computational-Thinking&quot;&gt;&lt;a href=&quot;#1-Computational-Thinking&quot; class=&quot;headerlink&quot; title=&quot;1. Computational Thinking&quot;&gt;&lt;/a&gt;1. Computatio
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://sub2n.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://sub2n.github.io/tags/JavaScript/"/>
    
      <category term="Programming" scheme="https://sub2n.github.io/tags/Programming/"/>
    
      <category term="Computational Thinking" scheme="https://sub2n.github.io/tags/Computational-Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Difference between Subsequence and Substring</title>
    <link href="https://sub2n.github.io/2019/04/29/Difference-between-Subsequence-and-Substring/"/>
    <id>https://sub2n.github.io/2019/04/29/Difference-between-Subsequence-and-Substring/</id>
    <published>2019-04-29T02:26:20.000Z</published>
    <updated>2019-04-29T09:07:31.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Subsequence"><a href="#Subsequence" class="headerlink" title="Subsequence"></a>Subsequence</h2><p>In mathmatics, a subsequence is a sequence that can be derived from another sequence by <strong>deleting</strong> some or no elememts <strong>without changing</strong> the order of the remaining elememts.</p><h3 id="What-is-Sequence"><a href="#What-is-Sequence" class="headerlink" title="What is Sequence?"></a>What is Sequence?</h3><p>In mathematics, a sequence is an enumerated collection of objects in which repetitions are allowed. Serial arrangement in which things follow in logical order or a recurrent pattern.</p><h2 id="Substring"><a href="#Substring" class="headerlink" title="Substring"></a>Substring</h2><p>Substring can be derived from the string by deleting anoter substring. The substring is a refinement of the subsequence.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Subsequence&quot;&gt;&lt;a href=&quot;#Subsequence&quot; class=&quot;headerlink&quot; title=&quot;Subsequence&quot;&gt;&lt;/a&gt;Subsequence&lt;/h2&gt;&lt;p&gt;In mathmatics, a subsequence is a 
      
    
    </summary>
    
      <category term="Computer Engineering" scheme="https://sub2n.github.io/categories/Computer-Engineering/"/>
    
      <category term="Basic" scheme="https://sub2n.github.io/categories/Computer-Engineering/Basic/"/>
    
    
      <category term="Substring" scheme="https://sub2n.github.io/tags/Substring/"/>
    
      <category term="Subsequence" scheme="https://sub2n.github.io/tags/Subsequence/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Decode the Morse code</title>
    <link href="https://sub2n.github.io/2019/04/29/CodeWars-6kyu-Decode-the-Morse-code/"/>
    <id>https://sub2n.github.io/2019/04/29/CodeWars-6kyu-Decode-the-Morse-code/</id>
    <published>2019-04-29T01:53:43.000Z</published>
    <updated>2019-05-02T06:11:51.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Decode-the-Morse-code"><a href="#CodeWars-6kyu-Decode-the-Morse-code" class="headerlink" title="CodeWars 6kyu. Decode the Morse code"></a><a href="https://www.codewars.com/kata/decode-the-morse-code/train/javascript" target="_blank" rel="noopener">CodeWars 6kyu. Decode the Morse code</a></h2><p>Decode Morse code to plain text</p><a id="more"></a><blockquote><p>The Morse code encodes every character as a sequence of “dots” and “dashes”. For example, the letter A is coded as ·−, letter Q is coded as −−·−, and digit 1 is coded as ·−−−−. The Morse code is case-insensitive, traditionally capital letters are used. When the message is written in Morse code, a single space is used to separate the character codes and 3 spaces are used to separate words. For example, the message HEY JUDE in Morse code is ···· · −·−−   ·−−− ··− −·· ·.</p></blockquote><blockquote><p>NOTE: Extra spaces before or after the code have no meaning and should be ignored.</p></blockquote><blockquote><p>In addition to letters, digits and some punctuation, there are some special service codes, the most notorious of those is the international distress signal SOS (that was first issued by Titanic), that is coded as ···−−−···. These special codes are treated as single special characters, and usually are transmitted as separate words.</p><p>Your task is to implement a function that would take the morse code as input and return a decoded human-readable string.</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decodeMorse(<span class="hljs-string">'.... . -.--   .--- ..- -.. .'</span>)</span><br><span class="line"><span class="hljs-comment">//should return "HEY JUDE"</span></span><br></pre></td></tr></table></figure><ol><li>Each word distinguished by <code>&quot;   &quot;</code> (3 spaces)</li><li>Free to use the preloaded Morse code table as a dictionary. By <code>MORSE_CODE[&#39;.--&#39;]</code></li></ol><h2 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/56873375-eefbc380-6a6c-11e9-864d-86e29c152aea.png" alt="Submit screen"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">decodeMorse = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">morseCode</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> words = morseCode.split(<span class="hljs-string">"   "</span>);</span><br><span class="line">  <span class="hljs-keyword">var</span> string = <span class="hljs-string">""</span></span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> words)&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(words[i] != <span class="hljs-string">''</span>)&#123;</span><br><span class="line">      <span class="hljs-keyword">var</span> word = words[i].split(<span class="hljs-string">" "</span>);</span><br><span class="line">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j <span class="hljs-keyword">in</span> word)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(word[j] != <span class="hljs-string">''</span>)&#123;</span><br><span class="line">          string += MORSE_CODE[word[j]];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(i &lt; words.length<span class="hljs-number">-1</span>)&#123;</span><br><span class="line">        string += <span class="hljs-string">" "</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Decode-the-Morse-code&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Decode-the-Morse-code&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Decode the Morse code&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/decode-the-morse-code/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Decode the Morse code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Decode Morse code to plain text&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>190426-TIL</title>
    <link href="https://sub2n.github.io/2019/04/26/190426-TIL/"/>
    <id>https://sub2n.github.io/2019/04/26/190426-TIL/</id>
    <published>2019-04-26T12:44:36.000Z</published>
    <updated>2019-04-29T01:00:01.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Today-I-Learned"><a href="#Today-I-Learned" class="headerlink" title="Today I Learned"></a>Today I Learned</h2><ul><li><p>Simulated and implemented Merge sort.</p></li><li><p>Studied python Stack and queue. Also implemented stack using 2 queues, queue using 2 stacks.</p></li><li><p>Review linked list in python. </p></li><li><p>Solve CodeWars 6kyu Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eureka!!</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Today-I-Learned&quot;&gt;&lt;a href=&quot;#Today-I-Learned&quot; class=&quot;headerlink&quot; title=&quot;Today I Learned&quot;&gt;&lt;/a&gt;Today I Learned&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simulated
      
    
    </summary>
    
      <category term="TIL" scheme="https://sub2n.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://sub2n.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ...</title>
    <link href="https://sub2n.github.io/2019/04/26/CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-%C2%A1Eurekals/"/>
    <id>https://sub2n.github.io/2019/04/26/CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-¡Eurekals/</id>
    <published>2019-04-26T00:56:47.000Z</published>
    <updated>2019-04-29T01:57:25.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal"><a href="#CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal" class="headerlink" title="CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!"></a><a href="https://www.codewars.com/kata/5626b561280a42ecc50000d1" target="_blank" rel="noopener">CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!</a></h2><p>Return a number that sum of each digit powered of its own number of digit.</p><a id="more"></a><blockquote><p>The number 89 is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. What’s the use of saying “Eureka”? Because this sum gives the same number.</p><p>In effect: 89 = 8^1 + 9^2</p><p>The next number in having this property is 135.</p><p>See this property again: 135 = 1^1 + 3^2 + 5^3</p><p>We need a function to collect these numbers, that may receive two integers a, b that defines the range [a, b] (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.</p></blockquote><blockquote><p>Let’s see some cases:</p><p>sumDigPow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]</p><p>sumDigPow(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]</p></blockquote><blockquote><p>If there are no numbers of this kind in the range [a, b] the function should output an empty list.</p><p>sumDigPow(90, 100) == []</p></blockquote><h2 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h2><ol><li><p>Put the numbers that fulfill the property to eureka[].</p></li><li><p>Used String type casting to use split and reduce method to each number.</p></li></ol><h2 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/56872698-fddf7780-6a66-11e9-8718-743e7f71933a.png" alt="Submit screen"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sumDigPow</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="line"> eureka = [];</span><br><span class="line"> <span class="hljs-keyword">for</span>(i=a; i &lt;=b; i++)&#123;</span><br><span class="line">   digits = <span class="hljs-built_in">String</span>(i).split(<span class="hljs-string">''</span>);</span><br><span class="line">   <span class="hljs-keyword">if</span>(i == digits.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">accumulator, currentValue, currentIndex</span>)</span>&#123;</span><br><span class="line">     <span class="hljs-keyword">return</span> accumulator + currentValue**(currentIndex+<span class="hljs-number">1</span>);</span><br><span class="line">   &#125;, <span class="hljs-number">0</span>))&#123;</span><br><span class="line">     eureka.push(i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="hljs-keyword">return</span> eureka;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal&quot;&gt;&lt;a href=&quot;#CodeWars-6kyu-Take-a-Number-And-Sum-Its-Digits-Raised-To-The-Consecutive-Powers-And-…-¡Eurekal&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/5626b561280a42ecc50000d1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 6kyu. Take a Number And Sum Its Digits Raised To The Consecutive Powers And ….¡Eurekal!!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Return a number that sum of each digit powered of its own number of digit.&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars 5kyu Maximum subarray sum</title>
    <link href="https://sub2n.github.io/2019/04/25/CodeWars-5kyu-Maximum-subarray-sum/"/>
    <id>https://sub2n.github.io/2019/04/25/CodeWars-5kyu-Maximum-subarray-sum/</id>
    <published>2019-04-25T11:50:45.000Z</published>
    <updated>2019-04-25T12:13:04.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeWars-5kyu-Maximum-subarray-sum"><a href="#CodeWars-5kyu-Maximum-subarray-sum" class="headerlink" title="CodeWars 5kyu. Maximum subarray sum"></a><a href="https://www.codewars.com/kata/maximum-subarray-sum/train/javascript" target="_blank" rel="noopener">CodeWars 5kyu. Maximum subarray sum</a></h2><p>Return maximum sum of subarrays</p><a id="more"></a><blockquote><p>The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:</p></blockquote><blockquote><p>maxSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])</p><p>// should be 6: [4, -1, 2, 1]</p><p>Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</p></blockquote><blockquote><p>Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.</p></blockquote><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><ol><li><p>Should return maximum sum of any subarrays including empty list.</p></li><li><p>Return 0 when all of list’s element is negative numbers.</p></li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I used Dynamic Programming - Bottom up approach to solve this problem. Because I learned on some online lectures about Dynamic Programming recently.</p><ol><li><p>First I catched that all the start and end element in subarray is positive numbers. So I decided to put all positive numbers’ index in positive_index list.</p></li><li><p>Make a 2 dementional array, sum[][] to keep the sum of subarrays.</p></li><li><p>Drew the recurrance Induction of this problem.</p><ul><li>Basis <ul><li>sum[i][i] = arr[positive_index[i]]</li><li>sum[i][i+1] = arr[positive_index[i]] to arr[positive_index[j]] (i &lt; positive_index.length - 1)</li></ul></li><li>Inductive Step<ul><li>sum[i][j] = sum[i][j-1] + sum[j-1][j] - arr[positive_index[j-1]] </li></ul></li></ul></li></ol><h2 id="javaScript-Solution"><a href="#javaScript-Solution" class="headerlink" title="javaScript Solution"></a>javaScript Solution</h2><p><img src="https://user-images.githubusercontent.com/48080762/56734293-5f6cc100-679d-11e9-8f72-280c1b4514ae.png" alt="Submit"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> maxSequence = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> positive_index = []</span><br><span class="line"> </span><br><span class="line">  arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">positive_check</span>(<span class="hljs-params">element, index</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(element&gt;<span class="hljs-number">0</span>)&#123;</span><br><span class="line">      positive_index.push(index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">if</span> (positive_index.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">var</span> sum = <span class="hljs-built_in">Array</span>(positive_index.length).fill(<span class="hljs-literal">null</span>).map(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">Array</span>(positive_index.length));</span><br><span class="line">  <span class="hljs-keyword">var</span> max = <span class="hljs-built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;positive_index.length; i++)&#123;</span><br><span class="line">    sum[i][i] = arr[positive_index[i]];</span><br><span class="line">    <span class="hljs-keyword">if</span>(max &lt; sum[i][i])&#123;</span><br><span class="line">        max = sum[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;positive_index.length)&#123;</span><br><span class="line">      sum[i][i+<span class="hljs-number">1</span>] = arr.slice(positive_index[i], positive_index[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>).reduce(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a+b);</span><br><span class="line">      <span class="hljs-keyword">if</span>(max &lt; sum[i][i+<span class="hljs-number">1</span>])&#123;</span><br><span class="line">        max = sum[i][i+<span class="hljs-number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt; positive_index.length; i++)&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">2</span>; j&lt; positive_index.length; j++)&#123;</span><br><span class="line">      sum[i][j] = sum[i][j<span class="hljs-number">-1</span>] + sum[j<span class="hljs-number">-1</span>][j] - arr[positive_index[j<span class="hljs-number">-1</span>]];</span><br><span class="line">      <span class="hljs-keyword">if</span>(max &lt; sum[i][j])&#123;</span><br><span class="line">        max = sum[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PPT-slides"><a href="#PPT-slides" class="headerlink" title="PPT slides"></a>PPT slides</h2><p>Made presentations for my algorithm study group</p><p><img src="https://user-images.githubusercontent.com/48080762/56733714-e7ea6200-679b-11e9-8020-a289b67f909b.PNG" alt="슬라이드1"><br><img src="https://user-images.githubusercontent.com/48080762/56733777-06e8f400-679c-11e9-80d9-9800ff74138e.PNG" alt="슬라이드2"><br><img src="https://user-images.githubusercontent.com/48080762/56733780-08b2b780-679c-11e9-867b-ebac97ab6a38.PNG" alt="슬라이드3"><br><img src="https://user-images.githubusercontent.com/48080762/56733783-0a7c7b00-679c-11e9-9204-664edfe5be0b.PNG" alt="슬라이드4"><br><img src="https://user-images.githubusercontent.com/48080762/56733711-e3be4480-679b-11e9-89f3-c1c7631adb50.PNG" alt="슬라이드5"><br><img src="https://user-images.githubusercontent.com/48080762/56733728-ee78d980-679b-11e9-9439-f0a9e7189cfe.PNG" alt="슬라이드6"><br><img src="https://user-images.githubusercontent.com/48080762/56733730-f173ca00-679b-11e9-9faf-89258b8786a4.PNG" alt="슬라이드7"><br><img src="https://user-images.githubusercontent.com/48080762/56733737-f59fe780-679b-11e9-8932-9983e4cd734a.PNG" alt="슬라이드8"><br><img src="https://user-images.githubusercontent.com/48080762/56733740-f769ab00-679b-11e9-883e-bc4b2a41275c.PNG" alt="슬라이드9"><br><img src="https://user-images.githubusercontent.com/48080762/56733742-f9cc0500-679b-11e9-948e-0cf731d6700c.PNG" alt="슬라이드10"><br><img src="https://user-images.githubusercontent.com/48080762/56733745-fafd3200-679b-11e9-9a82-5883417827df.PNG" alt="슬라이드11"><br><img src="https://user-images.githubusercontent.com/48080762/56733757-fcc6f580-679b-11e9-9674-1f630f832fb5.PNG" alt="슬라이드12"><br><img src="https://user-images.githubusercontent.com/48080762/56733765-fe90b900-679b-11e9-9d97-3b839add0674.PNG" alt="슬라이드13"><br><img src="https://user-images.githubusercontent.com/48080762/56733770-005a7c80-679c-11e9-9fd8-253cac494e0c.PNG" alt="슬라이드14"><br><img src="https://user-images.githubusercontent.com/48080762/56733774-02bcd680-679c-11e9-8d56-627fb0df85a4.PNG" alt="슬라이드15"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodeWars-5kyu-Maximum-subarray-sum&quot;&gt;&lt;a href=&quot;#CodeWars-5kyu-Maximum-subarray-sum&quot; class=&quot;headerlink&quot; title=&quot;CodeWars 5kyu. Maximum subarray sum&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.codewars.com/kata/maximum-subarray-sum/train/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeWars 5kyu. Maximum subarray sum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Return maximum sum of subarrays&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://sub2n.github.io/categories/Algorithm/"/>
    
      <category term="CodeWars" scheme="https://sub2n.github.io/categories/Algorithm/CodeWars/"/>
    
    
      <category term="Algorithm" scheme="https://sub2n.github.io/tags/Algorithm/"/>
    
  </entry>
  
</feed>
